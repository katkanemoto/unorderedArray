var check = require('check-types')

function lesson(options) {
	if (!(this instanceof lesson)) return new lesson(options);
	
	//if we don't have a UI object, can't continue, error
	if (!(check.object(options) && check.object(options.UI))) {
		throw new TypeError("Argument 'UI' (object) is required, argument should be object.");
	}
	
	this._UI = options.UI;
	
	//SETUP
	//initial setup state
	this._state = this._INIT;
	
	//setup an array and fill it with random numbers
	var array_setup = require('lib/lesson/util/array_setup');
	
	this._array = array_setup({size:6, fill:6, ordered:true, x:50, y:145});
	this._arrow = array._.arrow;
	
	//register the array with the UI
	//	only add the array as the arrow is a child of the array component
	this._UI.stage.add(this._array);
	
	var next = this.next;
	var instance = this;
	//setup event handler on Next button
	//NOTE: had to use call() here, methods were being called with the window assigned to `this` as they were being called from inside an event handler
	this._UI.pub_sub.subscribe("click.next_button", function() {
		//if we're tweening, do nothing that would involve an animation
		var move = require('lib/util/move');
		if (move.is_moving()) return;
		//otherwise either start or continue with a lesson
		next.call(instance);
	});
	
	//all done with initial setup
	this._state = this._READY;
};

lesson.prototype = {
	//public function to handle calling internal lesson logic
	next : function() {
		//if in the _INIT state, do nothing
		if (this._state === this._INIT) return false;
		
		//get the user input
		if (this._state === this._READY) {
			var pre_lesson_check = require('lib/lesson/util/pre_lesson_check.js');
			this._input_tmp = pre_lesson_check(this._UI);
			
			//if the user input was bad, then do nothing
			if (check.undefined(this._input_tmp)) return false;
			
			//else, we have user input to search with, so allocate a search...
			var array_binary_search = require('lib/lesson/logic/array_binary_search');
			this._search = array_binary_search({UI: this._UI, array:this._array, arrow:this._arrow, value:this._input_tmp});
			
			//...disable the input for the lesson...
			this._UI.input.disable();
			
			//and set the internal state to start the search
			this._state = this._RUN;
			//this._step_state = this._STEP_INIT_SEARCH;
		}
		
		if (this._state === this._RUN) {
			var result = this._search.next();
			
			//if we reach the end of the lesson, then reset the lesson state, so we do pre_lesson checks before allocating new lesson logic
			if (result.done) {
				//...re-enable the text input
				this._UI.input.enable();
				this._state = this._READY;
			}
			
			return result;
		}
		
		//otherwise if there was some issue above, just return without doing anything
		return false;
	}
	
	//private variables
	_UI :			undefined,	//local pointer to the UI object
	_array : 		undefined,	//reference to the UI array setup in the constructor and registered with the UI
	_arrow : 		undefined,	//reference to the UI arrow setup with the array and registered with the UI
	_input_tmp :	undefined,	//used to hold user input during the lesson
	_search :		undefined,	//holds the instance of the search logic
	
	//state and constants associated
	_DONE : 3,			//if we can no longer run the lesson, then set this state which makes the lesson unresponsive
	_RUN : 2,			//currently traversing the lesson
	_READY : 1,			//ready to start the lesson, done with all of the setup, not currently in the lesson
	_INIT : 0,			//initial state, setting up object for lesson, should not be able to interact at this step
	_state : undefined,	//tracks the state of the lesson
};

module.exports = lesson;