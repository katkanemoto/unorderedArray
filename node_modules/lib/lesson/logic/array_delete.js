var check = require('check-types');

//walks through the lesson of deleting an existing item in an array
//assumes that the option "index" contains a valid value which to delete
//requires arguments: `UI`, `array`, `arrow` and index
function array_delete(options) {
	if (!(this instanceof array_delete)) return new array_delete(options);
	
	this._state = this._INIT;
	
	//requires arguments
	var validate = require('lib/lesson/util/array_lesson_argument_validate.js');
	var result = validate(options);
	
	if (!result.valid) {
		throw new TypeError(result.msg);
	}
	
	this._UI = options.UI;
	this._array = options.array;
	this._arrow = options.arrow;
	
	if (check.undefined(options.index)) {
		throw new TypeError("Required argument: index, should be an integer index in the array with a valid value at that index");
	}
	this._index = options.index;
	
	this._state = this._READY;
};

array_delete.prototype = {
	//METHODS
	
	next: function() {
		if (this._state === this._INIT) return false;
		
		//if trying to delete from an empty array
		if (this._state === this._DONE) {
			var output = "Cannot delete from an empty array.";

			this._UI.output.set(output);
			
			return {value:output, done:true};
		}
		
		if (this._state === this._READY) {
			this._state = this._RUN;
			this._step_state = this._STEP_1_STATEMENT;
		}
		
		//statement steps
		if (this._step_state === this._STEP_1_STATEMENT) {
			var output = "For this lesson, we'll be deleting a" + "\n" + 
				"value from an array.";

			this._UI.output.set(output);
			
			this._step_state = this._STEP_2_STATEMENT;
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_2_STATEMENT) {
			var output = "First we will remove the value at" + "\n" +
				"index " + String(this._index) + ".";

			this._UI.output.set(output);
			
			this._step_state = this._STEP_3_STATEMENT;
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_3_STATEMENT) {
			var output = "Then we will allocate two arrows:" + "\n" +
				"'move_to'" + "\n" +
				"(pointing at the index where we" + "\n" +
				"removed the value)" + "\n" +
				"and 'move_from' (at the next index).";

			this._UI.output.set(output);
			
			this._step_state = this._STEP_4_STATEMENT;
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_4_STATEMENT) {
			var output = "Next we will move values from" + "\n" +
			"the index where 'move_from' is" + "\n" +
			"pointing to where 'move_to' is" + "\n" +
			"pointing.";

			this._UI.output.set(output);
			
			this._step_state = this._STEP_5_STATEMENT;
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_5_STATEMENT) {
			var output = "Then we will increment both" + "\n" +
			"'move' arrows and continue moving" + "\n" +
			"values in the array until" + "\n" +
			"'move_from' is pointing to the same" + "\n" +
			"index as the 'tail' arrow.";

			this._UI.output.set(output);
			
			this._step_state = this._STEP_6_STATEMENT;
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_6_STATEMENT) {
			var output = "We will then remove the 'move'" + "\n" +
			"arrows and move the 'tail' arrow" + "\n" +
			"back one space, producing an" + "\n" +
			"array that is one smaller than the" + "\n" +
			"one we started with by removing" + "\n" +
			"the value at index " + String(this._index) + ".";

			//make room for the additional text on the screen
			this._UI.output.self.y -= 20;
			this._UI.output.set(output);
			
			this._step_state = this._STEP_7_DELETE;
			
			return {value:output, done:false};
		}
		
		//delete value at index
		if (this._step_state === this._STEP_7_DELETE) {
			//correct the positioning of the text output, from the previous step
			this._UI.output.self.y += 20;
			
			var output = "Removing the value at index " + String(this._index) + ".";
			
			this._array._.pop({index:this._index});
				
			this._UI.output.set(output);
			
			this._step_state = this._STEP_8_ALLOCATE_MOVERS;
			
			return {value:output, done:false};
		}
		
		//place 'move to' and 'move from' arrows
		if (this._step_state === this._STEP_8_ALLOCATE_MOVERS) {
			var output = "Placing the 'move to' and" + "\n" +
				"'move from' arrows.";
			
			this._UI.output.set(output);
			
			//set both arrows, such that:
			//	'to' is pointing at the index of the element that was removed
			//	'from' is pointing at the next index beyond the removed
			this._move_to_arrow = this._array._.iterator("move\nto");
			this._move_to_arrow._.set(this._index, {tween:false});
			this._array.addChild(this._move_to_arrow);
			
			this._move_from_arrow = this._array._.iterator("move\nfrom");
			this._move_from_arrow._.set(this._index+1, {tween:false});
			this._array.addChild(this._move_from_arrow);
			
			this._step_state = this._STEP_CHECK_IF_DONE;
			
			return {value:output, done:false};
		}
		
		//checking if we're done moving
		if (this._step_state === this._STEP_CHECK_IF_DONE) {
			var output = "Is the 'move from' arrow at" + "\n" +
				"the same index as the 'tail' arrow?"  + "\n" +
				"Are we done moving?";
				
			this._UI.output.set(output);
			
			if (this._move_from_arrow._.index === this._arrow._.index) {
				//if we're done, then cleanup the lesson
				this._step_state = this._STEP_CLEANUP_1;
			} else {
				//if we're not done, then move values backwards in the array until we've reached the end of the array
				this._step_state = this._STEP_MOVE_VALUE;
			}
			
			return {value:output, done:false};
		}
		
		//LOOP START
		//move the value at the arrow 'move from' to the arrow 'move to'
		if (this._step_state === this._STEP_MOVE_VALUE) {
			var output = "Moving the value at 'move from' to" + "\n" +
			"'move to'.";
			
			this._UI.output.set(output);
			
			this._array._.move_within(this._move_from_arrow._.index, this._move_to_arrow._.index);
			
			this._step_state = this._STEP_INCREMENT_MOVE_1;
			
			return {value:output, done:false};
		}
		
		//increment the move arrows
		if (this._step_state === this._STEP_INCREMENT_MOVE_1) {
			var output = "Incrementing the move arrows" + "\n" +
				"to prepare for the next value move.";
			
			this._UI.output.set(output);
			
			this._move_from_arrow._.next();
			
			this._step_state = this._STEP_INCREMENT_MOVE_2;
			
			return {value:output, done:false};
		}
		
		//increment the move arrows
		if (this._step_state === this._STEP_INCREMENT_MOVE_2) {
			var output = "Incrementing the move arrows" + "\n" +
				"to prepare for the next value move.";
			
			this._UI.output.set(output);
			
			this._move_to_arrow._.next();
			
			//loop from here, until we've moved all the values in the array back one
			this._step_state = this._STEP_CHECK_IF_DONE;
			
			return {value:output, done:false};
		}
		//LOOP DONE
		
		//done with lesson, removing move arrows
		if (this._step_state === this._STEP_CLEANUP_1) {
			var output = "There are no values left to move," + "\n" +
			"de-allocating the move arrows.";
			
			this._array.removeChild(this._move_from_arrow);
			this._move_from_arrow = undefined
			this._array.removeChild(this._move_to_arrow);
			this._move_to_arrow = undefined;
			
			this._UI.output.set(output);
			
			this._step_state = this._STEP_CLEANUP_2;
			
			return {value:output, done:false};
		}
		
		//done with lesson, decrementing tail arrow
		if (this._step_state === this._STEP_CLEANUP_2) {
			var output = "Moving the 'tail' arrow" + "\n" +
				"back one space";
				
			this._arrow._.prev();
				
			this._UI.output.set(output);
			
			this._step_state = this._STEP_CLEANUP_3
				
			return {value:output, done:false};
		}
		
		//done with lesson, state that finished with current lesson
		//	if the tail arrow is pointing at 0, then set DONE condition on lesson as we have an empty array
		if (this._step_state === this._STEP_CLEANUP_3) {
			var output = "We now have an array that is one" + "\n" +
			"smaller than what we started with,"+ "\n" +
			"by removing the selected value." 
			
			this._UI.output.set(output);
			
			if (this._arrow._.index === 0) {
				this._state = this._DONE;	//cannot delete from an empty array
			} else {
				this._state = this._READY;
			}
			
			this._step_state = undefined;
			
			return {value:output, done:true};
		}
	},
	
	//PROPERTIES
	//PRIVATE
	_array	:			undefined,
	_arrow	:			undefined,
	_UI		:			undefined,
	_move_from_arrow :	undefined,
	_move_to_arrow :	undefined,
	
	//state and constants associated
	_DONE : 3,					//if we can no longer run the lesson, then set this state which makes the lesson unresponsive
	_RUN : 2,					//currently traversing the lesson
	_READY : 1,					//ready to start the lesson, done with all of the setup, not currently in the lesson
	_INIT : 0,					//initial state, setting up object for lesson, should not be able to interact at this step
	_state : undefined,			//tracks the state of the lesson
	
	//states for when stepping through a lesson
	_STEP_INCREMENT_MOVE_2	: 13,
	_STEP_INCREMENT_MOVE_1	: 12,
	_STEP_CLEANUP_3			: 11,
	_STEP_CLEANUP_2			: 10,
	_STEP_CLEANUP_1			: 9,
	_STEP_CHECK_IF_DONE		: 8,
	_STEP_8_ALLOCATE_MOVERS	: 7,
	_STEP_7_DELETE			: 6,
	_STEP_6_STATEMENT		: 5,
	_STEP_5_STATEMENT		: 4,
	_STEP_4_STATEMENT		: 3,
	_STEP_3_STATEMENT		: 2,
	_STEP_2_STATEMENT		: 1,
	_STEP_1_STATEMENT		: 0,
	_step_state 			: undefined,
	
	_UI : 			undefined,	//holds a reference to the required argument UI (the proxy to control the UI)
	_array :		undefined,	//holds a reference to the required array (the UI component to traverse during the lesson)
	_arrow :		undefined,	//holds a reference to the required arrow (the "tail" arrow of the array)
};

module.exports = array_delete;