var check = require('check-types');

function array_binary_search(options) {
	if (!(this instanceof array_binary_search)) return new array_binary_search(options);
	
	this._state = this._INIT;
	
	//requires arguments
	var validate = require('lib/lesson/util/array_lesson_argument_validate.js');
	var result = validate(options);
	
	if (!result.valid) {
		throw new TypeError(result.msg);
	}
	
	this._UI = options.UI;
	this._array = options.array;
	this._arrow = options.arrow;
	
	if (check.undefined(options.value)) {
		throw new TypeError("Required argument: value, should be a value possible to find the array.");
	}
	this._value = options.value;
	
	this._state = this._READY;
};

array_binary_search.prototype = {
	next: function() {
		if (this._state === this._INIT) return false;
		
		//empty case
		if (this._arrow._.index === 0) {
			var output = "Cannot search in an empty array.";

			this._UI.output.set(output);
			
			return {value:output, done:true};
		};
		
		if (this._state === this._READY) {
			this._state = this._RUN;
			this._step_state = this._STEP_1_STATEMENT;
		}
		
		//statement steps
		if (this._step_state === this._STEP_1_STATEMENT) {
			var output = "First we will place our arrows: 'low'" + "\n" +
			"(at the first index), 'high'" + "\n" +
			"(at the last index) and 'mid'" + "\n" +
			"(in the middle of the array).";

			this._UI.output.set(output);
			
			this._step_state = this._STEP_2_STATEMENT;
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_2_STATEMENT) {
			var output = "During the search we will check if" + "\n" +
			"we've found the value " + String(this._value) + ", at the 'mid'" + "\n" +
			"index; So the second step is to" + "\n" +
			"check 'mid' for the value, if not then" + "\n" +
			"we examine the rest of the array.";

			this._UI.output.set(output);
			
			this._step_state = this._STEP_3_STATEMENT;
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_3_STATEMENT) {
			var output = "As the array is ordered, if the value" + "\n" +
			"is larger than 'mid' we will consider" + "\n" +
			"the subarray that is larger than" + "\n" +
			"'mid' (from 'mid' + 1 to 'high')" + "\n" +
			"if the value is smaller the subarray" + "\n" +
			"will be all values less than 'mid'" + "\n" +
			"(between 'mid' - 1 and 'low').";
			
			//making more room in the on screen text, for the larger output ^
			this._UI.output.self.y -= 40;
			
			this._UI.output.set(output);
			
			this._step_state = this._STEP_4_STATEMENT;
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_4_STATEMENT) {
			//repositioning the on screen text to its original position
			this._UI.output.self.y += 40;
			
			var output = "As we are now considering a" + "\n" +
			"sub-array, we will simply move 'low'" + "\n" +
			"'mid' and 'high' to show the bounds" + "\n" +
			"of this array and search it," + "\n" +
			"as before.";
			
			this._UI.output.set(output);
			
			this._step_state = this._STEP_5_STATEMENT;
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_5_STATEMENT) {			
			var output = "We will continue shrinking the" + "\n" +
			"number of values that we're" + "\n" +
			"searching, until 'mid' has the value" + "\n" +
			"we're searching for, or we can no" + "\n" +
			"longer make a new subarray" + "\n" +
			"and we know the value is not in the" + "\n" +
			"array.";
			
			this._UI.output.self.y -= 40;
			
			this._UI.output.set(output);
			
			this._step_state = this._STEP_6_STATEMENT;
			
			return {value:output, done:false};
		}
		
		//this._UI.output.self.y += 40;
		//	next step ^
		
	},//end next()
	
	//state and constants associated
	_DONE : 3,					//if we can no longer run the lesson, then set this state which makes the lesson unresponsive
	_RUN : 2,					//currently traversing the lesson
	_READY : 1,					//ready to start the lesson, done with all of the setup, not currently in the lesson
	_INIT : 0,					//initial state, setting up object for lesson, should not be able to interact at this step
	_state : undefined,			//tracks the state of the lesson
	
	_STEP_6_STATEMENT		: 5,
	_STEP_5_STATEMENT		: 4,
	_STEP_4_STATEMENT		: 3,
	_STEP_3_STATEMENT		: 2,
	_STEP_2_STATEMENT		: 1,
	_STEP_1_STATEMENT		: 0,
	_step_state 			: undefined,
};

module.exports = array_binary_search;