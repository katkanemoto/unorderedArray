var check = require('check-types');

function array_binary_search(options) {
	if (!(this instanceof array_binary_search)) return new array_binary_search(options);
	
	this._state = this._INIT;
	
	//requires arguments
	var validate = require('lib/lesson/util/array_lesson_argument_validate.js');
	var result = validate(options);
	
	if (!result.valid) {
		throw new TypeError(result.msg);
	}
		
	this._UI = options.UI;
	this._array = options.array;
	this._arrow = options.arrow;
	
	if (check.undefined(options.value)) {
		throw new TypeError("Required argument: value, should be a value possible to find the array.");
	}
	this._value = options.value;
	
	this._state = this._READY;
};

array_binary_search.prototype = {
	next: function() {
		if (this._state === this._INIT) return false;
		
		//empty case
		if (this._arrow._.index === 0) {
			var output = "Cannot search in an empty array.";

			this._UI.output.set(output);
			
			return {value:output, done:true};
		};
		
		if (this._state === this._READY) {
			this._state = this._RUN;
			this._step_state = this._STEP_1_STATEMENT;
		}
		
		//statement steps
		if (this._step_state === this._STEP_1_STATEMENT) {
			//making more room in the on screen text for the larger output of some of the steps
			this._UI.output.self.y -= 80;
			this._UI.output.self.x -= 40;
			
			var output = "First we will place our arrows: 'low'" + "\n" +
			"(at the first index), 'high'" + "\n" +
			"(at the last index) and 'mid'" + "\n" +
			"(in the middle of the array).";

			this._UI.output.set(output);
			
			this._step_state = this._STEP_2_STATEMENT;
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_2_STATEMENT) {
			var output = "During the search we will check if" + "\n" +
			"we've found the value " + String(this._value) + ", at the 'mid'" + "\n" +
			"index; So the second step is to" + "\n" +
			"check 'mid' for the value, if not then" + "\n" +
			"we examine the rest of the array.";

			this._UI.output.set(output);
			
			this._step_state = this._STEP_3_STATEMENT;
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_3_STATEMENT) {
			var output = "As the array is ordered, if the value" + "\n" +
			"is larger than 'mid' we will consider" + "\n" +
			"the subarray that is larger than" + "\n" +
			"'mid' (from 'mid' + 1 to 'high')" + "\n" +
			"if the value is smaller the subarray" + "\n" +
			"will be all values less than 'mid'" + "\n" +
			"(between 'mid' - 1 and 'low').";
			
			this._UI.output.set(output);
			
			this._step_state = this._STEP_4_STATEMENT;
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_4_STATEMENT) {
			var output = "As we are now considering a" + "\n" +
			"sub-array, we will simply move 'low'" + "\n" +
			"'mid' and 'high' to show the bounds" + "\n" +
			"of this array and search it," + "\n" +
			"as before.";
			
			this._UI.output.set(output);
			
			this._step_state = this._STEP_5_STATEMENT;
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_5_STATEMENT) {
			var output = "We will continue shrinking the" + "\n" +
			"number of values that we're" + "\n" +
			"searching, until 'mid' has the value" + "\n" +
			"we're searching for, or we can no" + "\n" +
			"longer make a new subarray" + "\n" +
			"and we know the value is not in the" + "\n" +
			"array.";
			
			this._UI.output.set(output);
			
			this._step_state = this._STEP_ALLOCATE_ARROWS;
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_ALLOCATE_ARROWS) {
			var output = "Allocating our arrows: 'low'" + "\n" +
			"(at the beginning of the array)," + "\n" +
			"'high' (at the last index) and" + "\n" +
			"'mid' (at the middle index).";
			
			this._low = this._array._.iterator("low");
			this._low._.set(0, {tween:false});
			this._array.addChild(this._low);
			
			this._high = this._array._.iterator("high");
			this._high._.set(this._array._.values.length - 1, {tween:false});
			this._array.addChild(this._high);
			
			this._mid = this._array._.iterator("mid");
			var mid_index = Math.floor((this._array._.values.length - 1) / 2);
			this._mid._.set(mid_index, {tween:false});
			this._array.addChild(this._mid);
			
			this._UI.output.set(output);
			
			this._step_state = this._STEP_CONSIDER_SUBARRAY;
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_CONSIDER_SUBARRAY) {
			var output;
			
			if (this._low._.index <= this._high._.index) {
				output = "As we can examine values in" + "\n" +
				"the array starting at 'low' and" + "\n" +
				"ending at 'high', we can consider" + "\n" +
				"the value between them (at 'mid')."
			
				this._step_state = this._STEP_MOVE_MID;
			} else {
				//given the value at 'mid', determine which index the searched for value should be at and return that
				var target_index;
				if (this._value < this._array._.values[this._mid._.index]) {
					//if we're at the first index in the array, then the place to insert the value would be the first index
					//	as it's smaller than any value in the array
					if (this._mid._.index === 0) {
						target_index = 0;
					} else {
						//else the value is larger than what preceedes the value at mid, so insert at mid to keep an ordered array
						target_index = this._mid._.index;
					}
				} else {
					if (this._mid._.index === (this._array._.length - 1)) {
						target_index = (this._array._.length - 1);
					} else {
						target_index = this._mid._.index + 1;
					}
				}
				output = "We cannot examine any values in" + "\n" +
				"the array starting at 'low' and" + "\n" +
				"ending at 'high', because the 'low'"+ "\n" +
				"index is above the 'high' index. So" + "\n" +
				"the value " + String(this._value) + " is not in the array. But" + "\n" +
				"we also know that if the value were" + "\n" +
				"in the array, it would be at index " + String(target_index) + ".";
				
				//return to the caller on not found
				this._index = target_index;
				this._found = false;
				
				this._step_state = this._STEP_CLEANUP;
			}
			
			this._UI.output.set(output);
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_MOVE_MID) {
			var output;
			//'mid' usually needs to move...
			var needs_move = true;
			
			if(this._low._.index === this._high._.index) {
				output = "Moving 'mid' to the last" + "\n" + 
					"index we can search in the array.";
			} else {
				output = "Moving 'mid'.";
			}
			
			var new_index = Math.floor((this._low._.index + this._high._.index) / 2);
			
			//initial case
			if (this._mid._.index === new_index) {
				output = "During this initial step, we'll check" + "\n" + 
				"the value at 'mid' instead of moving.";
				
				//...but in the initial case, it doesn't need to move
				needs_move = false;
			}
			
			if (needs_move) {
				this._mid._.set(new_index);
			}
			
			this._UI.output.set(output);
			
			this._step_state = this._STEP_CHECK_FOUND;
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_CHECK_FOUND) {
			var output;
			
			//if we're still in bounds on the array
			var value_at_mid = this._array._.values[this._mid._.index];
			output = "Is the value at 'mid' (" + String(value_at_mid) + ")" + "\n" +
			"equal to " + String(this._value) + "?";
			
			if (value_at_mid === this._value) {
				this._step_state = this._STEP_FOUND_EQUAL;
			}
			
			if (value_at_mid > this._value) {
				this._step_state = this._STEP_NOT_FOUND_LESS_THAN;
			}
			
			if (value_at_mid < this._value) {
				this._step_state = this._STEP_NOT_FOUND_GREATER_THAN;
			}
			
			this._UI.output.set(output);
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_FOUND_EQUAL) {
			var output = "We found it! Next we would return" + "\n" +
			"the index where we found it: " + String(this._mid._.index) + ".";
			
			this._step_state = this._STEP_CLEANUP;
			
			//used during cleanup to return to the caller the index where the value was found
			this._index = this._mid._.index;
			//...and that it was found
			this._found = true;
			
			this._UI.output.set(output);
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_NOT_FOUND_LESS_THAN) {
			var value_at_mid = this._array._.values[this._mid._.index];
			
			var output = String(this._value) + " != " + String(value_at_mid) + ". But, we know that:" + "\n" +
			String(this._value) + " < " + String(value_at_mid) + "\n" +
			"so if " + String(this._value) + " is in the array then it must be" + "\n" +
			"to the left of 'mid', as the array is" + "\n" +
			"ordered.";
			
			this._subarray_low = this._low._.index;
			this._subarray_high = this._mid._.index - 1;
			
			this._UI.output.set(output);
			
			this._step_state = this._STEP_MOVE_LOW;
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_NOT_FOUND_GREATER_THAN) {
			var value_at_mid = this._array._.values[this._mid._.index];
			
			var output = String(this._value) + " != " + String(value_at_mid) + ". But, we know that:" + "\n" +
			String(this._value) + " > " + String(value_at_mid) + "\n" +
			"so if " + String(this._value) + " is in the array then it must be" + "\n" +
			"to the right of 'mid', as the array is" + "\n" +
			"ordered.";
			
			this._subarray_low = this._mid._.index + 1;
			this._subarray_high = this._high._.index;
			
			this._UI.output.set(output);
			
			this._step_state = this._STEP_MOVE_LOW;
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_MOVE_LOW) {
			var output;
			
			if (this._subarray_low === this._low._.index) {
				output = "We don't need to move 'low', as it's" + "\n" +
				"already at the correct index.";
			} else {
				output = "Moving 'low' to index " + String(this._subarray_low) + ".";
				this._low._.set(this._subarray_low);
			}
			
			this._UI.output.set(output);
			
			this._step_state = this._STEP_MOVE_HIGH;
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_MOVE_HIGH) {
			var output;
			
			if (this._subarray_high === this._high._.index) {
				output = "We don't need to move 'high', as" + "\n" +
				"it's already at the correct index.";
			} else {
				output = "Moving 'high' to index " + String(this._subarray_high) + ".";
				this._high._.set(this._subarray_high);
			}
			
			this._UI.output.set(output);
			
			this._step_state = this._STEP_CONSIDER_SUBARRAY;
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_CLEANUP) {
			//repositioning the on screen text to its original position
			this._UI.output.self.y += 80;
			this._UI.output.self.x += 40;
			
			var output = "Deallocating the arrows.";
			
			this._array.removeChild(this._mid);
			this._array.removeChild(this._low);
			this._array.removeChild(this._high);
			this._mid = undefined;
			this._low = undefined;
			this._high = undefined;
			
			this._UI.output.set(output);
			
			this._step_state = undefined;
			this._state = this._READY;
			
			//return the last index we searched, helpful for inserting into the array
			var index = this._index;
			//return if the value was found or not
			var found = this._found;
			
			var value = {output:output, index:index, found:found}
			var ret = {value:value, done:true};
			
			//reset return values for next search
			this._index = undefined;
			this._found = false;
			
			return ret;
		}
		
	},//end next()
	
	//used to return to the caller the last index considered
	_index : undefined,
	//used to return to the caller if the value was found in the array or not
	_found : false,
	
	//indices used during lesson
	_subarray_low : undefined,
	_subarray_high : undefined,
	
	//argument objects
	_array	:	undefined,
	_arrow	:	undefined,
	_UI		:	undefined,
	
	//arrows allocated during the lesson
	_low :		undefined,
	_mid :		undefined,
	_high :		undefined,
	
	//state and constants associated
	_DONE : 3,					//if we can no longer run the lesson, then set this state which makes the lesson unresponsive
	_RUN : 2,					//currently traversing the lesson
	_READY : 1,					//ready to start the lesson, done with all of the setup, not currently in the lesson
	_INIT : 0,					//initial state, setting up object for lesson, should not be able to interact at this step
	_state : undefined,			//tracks the state of the lesson
	
	_STEP_CLEANUP					: 14,
	_STEP_MOVE_MID					: 13,
	_STEP_MOVE_HIGH					: 12,
	_STEP_MOVE_LOW					: 11,
	_STEP_CONSIDER_SUBARRAY			: 10,
	_STEP_NOT_FOUND_GREATER_THAN	: 9,
	_STEP_NOT_FOUND_LESS_THAN		: 8,
	_STEP_FOUND_EQUAL				: 7,
	_STEP_CHECK_FOUND				: 6,
	_STEP_ALLOCATE_ARROWS			: 5,
	_STEP_5_STATEMENT				: 4,
	_STEP_4_STATEMENT				: 3,
	_STEP_3_STATEMENT				: 2,
	_STEP_2_STATEMENT				: 1,
	_STEP_1_STATEMENT				: 0,
	_step_state 					: undefined,
};

module.exports = array_binary_search;