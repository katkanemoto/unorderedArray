var check = require('check-types');

//walks through the lesson of deleting an existing item in an array
//assumes that the option "index" contains a valid value which to delete
//requires arguments: `UI`, `array`, `arrow`, `index` and `value`
function array_delete(options) {
	if (!(this instanceof array_delete)) return new array_delete(options);
	
	this._state = this._INIT;
	
	//requires arguments
	var validate = require('lib/lesson/util/array_lesson_argument_validate.js');
	var result = validate(options);
	
	if (!result.valid) {
		throw new TypeError(result.msg);
	}
	
	this._UI = options.UI;
	this._array = options.array;
	this._arrow = options.arrow;
	
	if (check.undefined(options.index) ||
		options.index > this._array._.length ||
		options.index > this._arrow._.index ||
		options.index < 0
		) {
		throw new TypeError("Required argument: index, should be an integer index of a current value in the array or the 'tail' index.");
	}
	this._index = options.index;
	
	if (check.undefined(options.value) || check.not.number(options.value)) {
		throw new TypeError("Required argument: value, should be a number.");
	}
	this._value = options.value;
	
	this._state = this._READY;
};

array_delete.prototype = {
	//METHODS
	
	next: function() {
		if (this._state === this._INIT) return false;
		
		//if trying to insert into an empty array
		if (this._state === this._DONE) {
			var output = "Cannot insert into a full array.";

			this._UI.output.set(output);
			
			return {value:output, done:true};
		}
		
		if (this._state === this._READY) {
			this._state = this._RUN;
			this._step_state = this._STEP_1_STATEMENT;
		}
		
		//statement steps
		if (this._step_state === this._STEP_1_STATEMENT) {
			//make extra room in the text area for some statements
			this._UI.output.self.y -= 60;
			
			var output = "To insert a value into an array...";

			this._UI.output.set(output);
			
			this._step_state = this._STEP_2_STATEMENT;
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_2_STATEMENT) {
			var output = "Either we will have to insert into" + "\n" +
				"an empty spot in the array or we" + "\n" +
				"will have to move values in the" + "\n" +
				"array to make room to insert" + "\n" +
				+ String(this._value) + " into.";

			this._UI.output.set(output);
			
			this._step_state = this._STEP_3_STATEMENT;
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_3_STATEMENT) {
			var output = "In either case, we'll begin by" + "\n" +
				"allocating an 'insert' arrow, that" + "\n" +
				"points to where we're going to add" + "\n" +
				"the value to the array; Once that" + "\n" +
				"index is empty we'll insert " + "\n" +
				String(this._value) + " into the array.";

			this._UI.output.set(output);
			
			this._step_state = this._STEP_4_STATEMENT;
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_4_STATEMENT) {
			var output = "We will then increment" + "\n" +
				"the 'tail' arrow, to make room for"  + "\n" +
				"the new value.";
			
			this._UI.output.set(output);
			
			this._step_state = this._STEP_5_STATEMENT;
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_5_STATEMENT) {
			var output = "Then we will allocate two arrows" + "\n" +
				"'move to' (pointing at the new" + "\n" +
				"empty index where we moved 'tail'" + "\n" +
				"from) and 'move from' (at the" + "\n" +
				"index before 'move to')." + "\n" +
				"We know when we're done when" + "\n" +
				"the 'insert' and 'move to' arrows" + "\n" +
				"are at the same index.";

			this._UI.output.set(output);
			
			this._step_state = this._STEP_6_STATEMENT;
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_6_STATEMENT) {
			var output = "Next we will move values from" + "\n" +
			"the index where 'move_from' is" + "\n" +
			"pointing to where 'move_to' is" + "\n" +
			"pointing.";
			
			/* var output = "Then we will increment both" + "\n" +
			"'move' arrows and continue moving" + "\n" +
			"values in the array until" + "\n" +
			"'move_from' is pointing to the same" + "\n" +
			"index as the 'tail' arrow."; */
			
			/* var output = "We will then remove the 'move'" + "\n" +
			"arrows and move the 'tail' arrow" + "\n" +
			"back one space, producing an" + "\n" +
			"array that is one smaller than the" + "\n" +
			"one we started with by removing" + "\n" +
			"the value at index " + String(this._index) + "."; */
			
			this._UI.output.set(output);
			
			this._step_state = this._STEP_7_STATEMENT;
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_7_STATEMENT) {
			var output = "Then we will decrement both" + "\n" +
			"'move' arrows and continue moving" + "\n" +
			"values in the array until" + "\n" +
			"'insert' arrow index is empty.";
			
			/* var output =  */
			
			/* var output = "We will then remove the 'move'" + "\n" +
			"arrows and move the 'tail' arrow" + "\n" +
			"back one space, producing an" + "\n" +
			"array that is one smaller than the" + "\n" +
			"one we started with by removing" + "\n" +
			"the value at index " + String(this._index) + "."; */
			
			this._UI.output.set(output);
			
			this._step_state = this._STEP_8_STATEMENT;
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_8_STATEMENT) {
			var output = "We will then remove the 'move'" + "\n" +
			"arrows producing an array" + "\n" +
			"that is one larger than the" + "\n" +
			"one we started with, by adding" + "\n" +
			"the value " + String(this._value) + ".";
			
			this._UI.output.set(output);
			
			this._step_state = this._STEP_SETUP_INSERT_ARROW;
			
			return {value:output, done:false};
		}
		
		//setup the 'insert' arrow
		if (this._step_state === this._STEP_SETUP_INSERT_ARROW) {
			var output = "Adding the 'insert' arrow at" + "\n" +
				"index " + String(this._index) + ".";
				
			this._insert_arrow = this._array._.iterator("insert");
			this._insert_arrow._.set(this._index, {tween:false});
			this._array.addChild(this._insert_arrow);
				
			this._UI.output.set(output);
			
			this._step_state = this._STEP_MOVE_TAIL;
				
			return {value:output, done:false};
		}
		
		//increment the tail
		if (this._step_state === this._STEP_MOVE_TAIL) {
			var output = "Moving the 'tail' arrow" + "\n" +
				"ahead one space";
				
			this._arrow._.next();
				
			this._UI.output.set(output);
			
			this._step_state = this._STEP_ALLOCATE_MOVERS;
				
			return {value:output, done:false};
		}
		
		//place 'move to' and 'move from' arrows
		if (this._step_state === this._STEP_ALLOCATE_MOVERS) {
			var output = "Placing the 'move to' and" + "\n" +
				"'move from' arrows.";
			
			this._UI.output.set(output);
			
			//set both arrows, such that:
			//	'to' is pointing at the index where 'tail' was
			//	'from' is pointing at previous index beyond that
			this._move_to_arrow = this._array._.iterator("move\nto");
			this._move_to_arrow._.set(this._arrow._.index - 1, {tween:false});
			this._array.addChild(this._move_to_arrow);
			
			this._move_from_arrow = this._array._.iterator("move\nfrom");
			this._move_from_arrow._.set(this._move_to_arrow._.index - 1, {tween:false});
			this._array.addChild(this._move_from_arrow);
			
			this._step_state = this._STEP_CHECK_IF_DONE;
			
			return {value:output, done:false};
		}
		
		//checking if we're done moving
		if (this._step_state === this._STEP_CHECK_IF_DONE) {
			var output = "Is the 'move to' arrow at" + "\n" +
				"the same index as the" + "\n" +
				"'insert' arrow?" + "\n" +
				"Are we done moving?";
				
			this._UI.output.set(output);
			
			if (this._move_to_arrow._.index === this._insert_arrow._.index) {
				//if we're done, then cleanup the lesson
				this._step_state = this._STEP_FOUND_IT;
			} else {
				//if we're not done, then move a value forward in the array one space
				this._step_state = this._STEP_MOVE_VALUE;
			}
			
			return {value:output, done:false};
		}
		
		//if we're done moving
		
		//then state that we found the index to insert into
		if (this._step_state === this._STEP_FOUND_IT) {
			var output = "Yes! Now we can insert.";
				
			this._UI.output.set(output);
			
			this._step_state = this._STEP_DEALLOCATE_MOVERS;
			
			return {value:output, done:false};
		}
		
		//then take out the mover arrows
		if (this._step_state === this._STEP_DEALLOCATE_MOVERS) {
			var output = "First we'll remove the 'move'" + "\n" +
			"arrows to declutter.";
				
			this._UI.output.set(output);
			
			this._array.removeChild(this._move_to_arrow);
			this._array.removeChild(this._move_from_arrow);
			this._move_to_arrow = undefined;
			this._move_from_arrow = undefined;
			
			this._step_state = this._STEP_INSERT_VALUE;
			
			return {value:output, done:false};
		}
		
		//then insert the value from the input
		if (this._step_state === this._STEP_INSERT_VALUE) {
			var output = "Then we'll insert " + String(this._value) + " at the" + "\n" +
				"'insert' index (" + String(this._index) + ").";
			
			//create a canvas element of the input & clear the input from the HTML input
			var input = this._UI.input.get_canvas_element();
			
			//tween the input from its position, to the array
			var move = require('lib/util/move');
			input._.move = move(input);
			
			//get the initial position of the element, with respect to the array element we're going to insert into
			initial_point = this._array.children[this._index].globalToLocal(input.x, input.y);
			
			//add the input to the array at the index
			this._array.children[this._index].addChild(input);
			
			//set the elements position to its position near the text input on the stage
			input.x = initial_point.x;
			input.y = initial_point.y;
			
			//then move to the correct coordinates with respect to the array element
			//	to have the element appear in the array
			input._.move.to({x:9, y:15});
			
			//add the value to the 'values' array in the array
			this._array._.values[this._index] = Number(input.text);
				
			this._UI.output.set(output);
			
			this._step_state = this._STEP_CLEANUP;
			
			return {value:output, done:false};
		}
		
		//then do final cleanup
		if (this._step_state === this._STEP_CLEANUP) {
			this._UI.output.self.y += 60;
			
			var output = "Finally, removing the 'insert' arrow" + "\n" +
			"to cleanup.";
			
			var full = false;
			if (this._arrow._.index === this._array._.length) {
				full = true;
				
				output += "\n" + "The array is full, so we won't be" + "\n" +
					"able to insert more values.";
				
				this._state = this._DONE;	//cannot insert into a full array
			} else {
				this._state = this._READY;
			}
			
			this._array.removeChild(this._insert_arrow);
			this._insert_arrow = undefined;
			
			this._UI.output.set(output);
			
			this._step_state = undefined;
			
			var ret = {value:output, full:full};
			return {value:ret, done:true};
		}
		
		//if we're not done
		
		//move the value at the arrow 'move from' to the arrow 'move to'
		if (this._step_state === this._STEP_MOVE_VALUE) {
			var output = "Moving the value at 'move from' to" + "\n" +
			"'move to'.";
			
			this._UI.output.set(output);
			
			this._array._.move_within(this._move_from_arrow._.index, this._move_to_arrow._.index);
			
			this._step_state = this._STEP_DECREMENT_MOVE_1;
			
			return {value:output, done:false};
		}
		
		//increment the move arrows
		if (this._step_state === this._STEP_DECREMENT_MOVE_1) {
			var output = "Decrementing the move arrows" + "\n" +
				"to prepare for the next step.";
			
			this._UI.output.set(output);
			
			this._move_from_arrow._.set(this._move_from_arrow._.index-1);
			
			this._step_state = this._STEP_DECREMENT_MOVE_2;
			
			return {value:output, done:false};
		}
		
		//increment the move arrows
		if (this._step_state === this._STEP_DECREMENT_MOVE_2) {
			var output = "Decrementing the move arrows" + "\n" +
				"to prepare for the next step.";
			
			this._UI.output.set(output);
			
			this._move_to_arrow._.set(this._move_to_arrow._.index-1);
			
			//loop from here, until we've moved all the values in the array back one
			this._step_state = this._STEP_CHECK_IF_DONE;
			
			return {value:output, done:false};
		}
	},
	
	//PROPERTIES
	//PRIVATE
	_array	:			undefined,
	_arrow	:			undefined,
	_UI		:			undefined,
	_move_from_arrow :	undefined,
	_move_to_arrow :	undefined,
	_insert_arrow :		undefined,
	
	//state and constants associated
	_DONE : 3,					//if we can no longer run the lesson, then set this state which makes the lesson unresponsive
	_RUN : 2,					//currently traversing the lesson
	_READY : 1,					//ready to start the lesson, done with all of the setup, not currently in the lesson
	_INIT : 0,					//initial state, setting up object for lesson, should not be able to interact at this step
	_state : undefined,			//tracks the state of the lesson
	
	//states for when stepping through a lesson
	_STEP_DECREMENT_MOVE_2		: 17,
	_STEP_DECREMENT_MOVE_1		: 16,
	_STEP_MOVE_VALUE			: 15,
	_STEP_CLEANUP				: 14,
	_STEP_INSERT_VALUE			: 13,
	_STEP_DEALLOCATE_MOVERS		: 12,
	_STEP_FOUND_IT				: 11,
	_STEP_ALLOCATE_MOVERS		: 10,
	_STEP_MOVE_TAIL				: 9,
	_STEP_SETUP_INSERT_ARROW	: 8,
	_STEP_8_STATEMENT			: 7,
	_STEP_7_STATEMENT			: 6,
	_STEP_6_STATEMENT			: 5,
	_STEP_5_STATEMENT			: 4,
	_STEP_4_STATEMENT			: 3,
	_STEP_3_STATEMENT			: 2,
	_STEP_2_STATEMENT			: 1,
	_STEP_1_STATEMENT			: 0,
	_step_state 				: undefined,
	
	_UI : 			undefined,	//holds a reference to the required argument UI (the proxy to control the UI)
	_array :		undefined,	//holds a reference to the required array (the UI component to traverse during the lesson)
	_arrow :		undefined,	//holds a reference to the required arrow (the "tail" arrow of the array)
};

module.exports = array_delete;