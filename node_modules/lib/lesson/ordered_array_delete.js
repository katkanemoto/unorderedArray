var check = require('check-types')

function lesson(options) {
	if (!(this instanceof lesson)) return new lesson(options);
	
	//if we don't have a UI object, can't continue, error
	if (!(check.object(options) && check.object(options.UI))) {
		throw new TypeError("Argument 'UI' (object) is required, argument should be object.");
	}
	
	this._UI = options.UI;
	
	//SETUP
	//initial setup state
	this._state = this._INIT;
	
	//setup an array and fill it with random numbers
	var array_setup = require('lib/lesson/util/array_setup');
	
	this._array = array_setup({size:6, fill:6, ordered:true, x:50, y:145});
	this._arrow = this._array._.arrow;
	
	//register the array with the UI
	//	only add the array as the arrow is a child of the array component
	this._UI.stage.add(this._array);
	
	var next = this.next;
	var instance = this;
	//setup event handler on Next button
	//NOTE: had to use call() here, methods were being called with the window assigned to `this` as they were being called from inside an event handler
	this._UI.pub_sub.subscribe("click.next_button", function() {
		//if we're tweening, do nothing that would involve an animation
		var move = require('lib/util/move');
		if (move.is_moving()) return;
		//otherwise either start or continue with a lesson
		next.call(instance);
	});
	
	//all done with initial setup
	this._state = this._READY;
};

lesson.prototype = {
	//public function to handle calling internal lesson logic
	next : function() {
		//if in the _INIT state, do nothing
		if (this._state === this._INIT) return false;
		
		if (this._state === this._DONE) {
			var output = "Cannot delete from an empty array.";

			this._UI.output.set(output);
			
			return {value:output, done:true};
		}
		
		//get the user input
		if (this._state === this._READY) {
			var pre_lesson_check = require('lib/lesson/util/pre_lesson_check.js');
			this._input_tmp = pre_lesson_check(this._UI);
			
			//if the user input was bad, then do nothing
			if (check.undefined(this._input_tmp)) return false;
			
			//...disable the input for the lesson...
			this._UI.input.disable();
			
			//and set the internal state to start the search
			this._state = this._RUN;
			this._step_state = this._STEP_INIT_SEARCH;
		}
		
		if (this._step_state === this._STEP_INIT_SEARCH) {
			//do the search first, to find the index to insert
			var array_binary_search = require('lib/lesson/logic/array_binary_search');
			this._search = array_binary_search({UI: this._UI, array:this._array, arrow:this._arrow, value:this._input_tmp});
			
			this._UI.output.self.y -= 20;
			
			var output = "Deleting from an ordered array is a" + "\n" +
				"two step process: first we'll do a" + "\n" +
				"binary search to find the index" + "\n" +
				"where we should delete, then we'll" + "\n" +
				"remove the value at that index" + "\n" +
				"and shrink the array.";
			
			this._step_state = this._STEP_SEARCHING;
			
			this._UI.output.set(output);
			
			this._correct_text_output = true;
			
			return {value:output, done:false};
		}
		
		//correct the positioning of the text output before the next step in the lesson
		if (this._correct_text_output) {
			this._UI.output.self.y += 20;
			this._correct_text_output = false;
		}
		
		if (this._step_state === this._STEP_SEARCHING) {
			var result = this._search.next();
			
			//if we reach the end of the search...
			if (result.done) {
				//...and if we found the value in the array...
				if (result.value.found) {
					//...then startup the delete logic to remove the value from the array
					var deletion_index = result.value.index;
					var array_delete = require('lib/lesson/logic/array_delete');
					this._delete = array_delete({UI:this._UI, array:this._array, arrow:this._arrow, index:deletion_index});
					
					this._step_state = this._STEP_INIT_DELETE;
					
					return {value:result.value, done:false};
				} else {
					//...else if the value was not found in the array, terminate the lesson
						
					var output = "We could not locate the value " + String(this._input_tmp) + "\n" +
						" in the array to delete.";
						
					this._UI.output.set(output);
					
					this._state = this._READY;
					this._UI.input.clear();
					this._UI.input.enable();
					this._step_state = undefined;
					
					return {value:output, done:true};
				}
			}
			return result;
		}
		
		if (this._step_state === this._STEP_INIT_DELETE) {
			var output = "Now that we've found the index to" + "\n" +
				"delete, we'll remove it and shrink" + "\n" +
				"the array.";
			
			this._step_state = this._STEP_DELETING;
			
			this._UI.output.set(output);
			
			return {value:output, done:false};
		}
		
		if (this._step_state === this._STEP_DELETING) {
			var result = this._delete.next();
			
			//if we reach the end of the insert
			if (result.done) {
				if (this._arrow._.index === 0) {
					//...but if the array is empty, then flag DONE, we can't delete from an empty array
					this._state = this._DONE;
				} else {
					//...then reset the lesson for the next lesson
					this._state = this._READY;
				}
				
				//...and cleanup
				this._UI.input.clear();
				this._UI.input.enable();
				this._step_state = undefined;
			}
			return result;
		}
		
		//otherwise if there was some issue above, just return without doing anything
		return false;
	},
	
	//private variables
	_UI :					undefined,	//local pointer to the UI object
	_array : 				undefined,	//reference to the UI array setup in the constructor and registered with the UI
	_arrow : 				undefined,	//reference to the UI arrow setup with the array and registered with the UI
	_input_tmp :			undefined,	//used to hold user input during the lesson
	_search :				undefined,	//holds the instance of the search logic
	_delete :				undefined,	//holds the instance of the delete logic
	_correct_text_output :	false,	//flags if we need to correct the placement of the text output, if we adjust it in the lesson
	
	//keeping track of steps in the lesson
	//_STEP_INSERTING		:	3,
	_STEP_INIT_DELETE	:	2,
	_STEP_SEARCHING		:	1,
	_STEP_INIT_SEARCH	:	0,
	_step_state			:	undefined,
	
	//state and constants associated
	_DONE : 3,			//if we can no longer run the lesson, then set this state which makes the lesson unresponsive
	_RUN : 2,			//currently traversing the lesson
	_READY : 1,			//ready to start the lesson, done with all of the setup, not currently in the lesson
	_INIT : 0,			//initial state, setting up object for lesson, should not be able to interact at this step
	_state : undefined,	//tracks the state of the lesson
};

module.exports = lesson;