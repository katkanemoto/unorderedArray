var check = require('check-types')

function lesson(options) {
	if (!(this instanceof lesson)) return new lesson(options);
	
	//if we don't have a UI object, can't continue, error
	if (!(check.object(options) && check.object(options.UI))) {
		throw new TypeError("Argument 'UI' (object) is required, argument should be object.");
	}
	
	this._UI = options.UI;
	
	//SETUP
	//initial setup state
	this._state = this._INIT;
	
	//setup an array and fill it with random numbers
	var array_setup = require('lib/lesson/util/array_setup');
	var array_size = 4;
	
	this._array = array_setup({size:array_size, fill:array_size});
	this._arrow = this._array._.arrow;
	
	//register the array with the UI
	//	only add the array as the arrow is a child of the array component
	this._UI.stage.add(this._array);
	
	var next = this.next;
	var instance = this;
	//setup event handler on Next button
	//NOTE: had to use call() here, methods were being called with the window assigned to `this` as they were being called from inside an event handler
	this._UI.pub_sub.subscribe("click.next_button", function() {
		//if we're tweening, do nothing that would involve an animation
		var move = require('lib/util/move');
		if (move.is_moving()) return;
		//otherwise either start or continue with a lesson
		next.call(instance);
	});
	
	//all done with initial setup
	this._state = this._READY;
};

lesson.prototype = {
	//METHODS-METHODS-METHODS-METHODS-METHODS-METHODS-METHODS-METHODS-METHODS-METHODS-METHODS-METHODS
	
	//PUBLIC-PUBLIC-PUBLIC-PUBLIC-PUBLIC-PUBLIC-PUBLIC-PUBLIC-PUBLIC-PUBLIC-PUBLIC-PUBLIC-PUBLIC-PUBLIC
	
	//public function to handle calling internal lesson logic
	next : function() {
		//if in the _INIT state, do nothing
		if (this._state === this._INIT) return false;
		
		//get the user input
		if (this._state === this._READY) {
			var pre_lesson_check = require('lib/lesson/util/pre_lesson_check.js');
			this._input_tmp = pre_lesson_check(this._UI);
			
			//if the user input was bad, then do nothing
			if (check.undefined(this._input_tmp)) return false;
			
			//else, we have user input to search with, so allocate a search...
			var array_linear_search = require('lib/lesson/logic/array_linear_search');
			this._search = array_linear_search({UI: this._UI, array:this._array, arrow:this._arrow, value:this._input_tmp});
			
			//...disable the input for the lesson...
			this._UI.input.disable();
			
			//and set the internal state to start the search
			this._state = this._RUN;
			this._step_state = this._STEP_INIT_SEARCH;
		}
		
		//state what we're going to do
		if (this._step_state === this._STEP_INIT_SEARCH) {
			var output = "First we'll search for the value " + String(this._input_tmp) + "\n" +
				"with a linear search, then we'll"  + "\n" +
				"delete that value from the array.";

			this._UI.output.set(output);
			
			this._step_state = this._STEP_SEARCH;
			
			return {value:output, done:false};
		}
		
		//initially traverse a linear search to find the value the student wants to delete
		if (this._step_state === this._STEP_SEARCH) {
			var result = this._search.next();
			
			//once we've traversed through the search...
			if (result.done) {
				this._search = undefined;
				
				//and if we found the value...
				if (check.not.undefined(result.value)) {
					//then introduce the delete phase of the lesson, before traversing the delete logic in a nother state
					this._step_state = this._STEP_INIT_DELETE;
					this._delete_index = result.value;	//save the index to delete, to pass to the delete logic
					
					return {done:false}
				} else {
					//else we didn't find it, so cleanup
					this._UI.input.enable();
					
					this._step_state = undefined;
					this._state = this._READY;
					
					return {done:true};
				}
			}
			
			return result;
		}
		
		//introduce the delete logic + allocate it
		if (this._step_state === this._STEP_INIT_DELETE) {
			var output = "As we found the value at index " + String(this._delete_index) + ",\n" +
				"we will remove the value at that" + "\n" +
				"index.";

			this._UI.output.set(output);
			
			this._step_state = this._STEP_DELETE;
			
			var array_delete = require('lib/lesson/logic/array_delete');
			this._delete = array_delete({UI: this._UI, array:this._array, arrow:this._arrow, index:this._delete_index});
			
			return {value:output, done:false};
		}
		
		//traverse through the delete logic
		if (this._step_state === this._STEP_DELETE) {
			return this._delete.next();
		}
	},
	
	//private variables
	_UI :			undefined,	//local pointer to the UI object
	_array : 		undefined,	//reference to the UI array setup in the constructor and registered with the UI
	_arrow : 		undefined,	//reference to the UI arrow setup with the array and registered with the UI
	_input_tmp :	undefined,	//used to hold user input during the lesson
	_delete_index : undefined,	//holds the index in the array where the item to delete is located, populated in next() -> _step_delete
	_search :		undefined,	//holds a reference to the search logic, when traversing that part of the lesson
	_delete :		undefined,	//holds a reference to the delete logic
	
	//state and constants associated
	_DONE : 3,			//if we can no longer run the lesson, then set this state which makes the lesson unresponsive
	_RUN : 2,			//currently traversing the lesson
	_READY : 1,			//ready to start the lesson, done with all of the setup, not currently in the lesson
	_INIT : 0,			//initial state, setting up object for lesson, should not be able to interact at this step
	_state : undefined,	//tracks the state of the lesson
	
	//states for when stepping through a lesson
	_STEP_DELETE		: 3,
	_STEP_INIT_DELETE	: 2,
	_STEP_SEARCH		: 1,
	_STEP_INIT_SEARCH	: 0,
	_step_state			: undefined,
};

module.exports = lesson;