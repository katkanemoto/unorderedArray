var check = require('check-types')

function lesson(options) {
	if (!(this instanceof lesson)) return new lesson(options);
	
	//if we don't have a UI object, can't continue, error
	if (!(check.object(options) && check.object(options.UI))) {
		throw new TypeError("Argument 'UI' (object) is required, argument should be object.");
	}
	
	this._UI = options.UI;
	
	//SETUP
	//initial setup state
	this._state = this._INIT;
	
	//setup an array and fill it with random numbers
	var array_setup = require('lib/lesson/util/array_setup');
	var array_size = 4;
	
	this._array = array_setup({size:array_size, fill:array_size});
	this._arrow = array._.arrow;
	
	//register the UI elements with the UI
	//	only add the array as the arrow is a child of the array component
	this._UI.stage.add(this._array);
	
	var next = this.next;
	var instance = this;
	//setup event handler on Next button
	//NOTE: had to use call() here, methods were being called with the window assigned to `this` as they were being called from inside an event handler
	this._UI.pub_sub.subscribe("click.next_button", function() {
		//if we're tweening, do nothing that would involve an animation
		var move = require('lib/util/move');
		if (move.is_moving()) return;
		//otherwise either start or continue with a lesson
		next.call(instance);
	});
	
	//get the lesson logic for the search portion of the delete
	var array_linear_search = require('lib/lesson/util/array_linear_search');
	this._search = array_linear_search({UI: this._UI, array:this._array, arrow:this._arrow});
	
	//all done with initial setup
	this._state = this._READY;
};

lesson.prototype = {
	//METHODS-METHODS-METHODS-METHODS-METHODS-METHODS-METHODS-METHODS-METHODS-METHODS-METHODS-METHODS
	
	//PUBLIC-PUBLIC-PUBLIC-PUBLIC-PUBLIC-PUBLIC-PUBLIC-PUBLIC-PUBLIC-PUBLIC-PUBLIC-PUBLIC-PUBLIC-PUBLIC
	
	//public function to handle calling internal lesson logic
	next : function() {
		//initially traverse a linear search to find the value the student wants to try to delete
		if (this._step_state === this._step_searching) {
			var result = this._search.next();
			
			//once we've traversed through the search, then proceed to the part of the lesson that shows the delete algorithm
			if (result.done) {
				this._step_state = this._step_delete;
			}
			
			return result;
		}
		
		if (this._step_state === this._step_delete) {
			//attempte to search for the value in the array
			this._array._.values.findIndex(function(element, index, array) {
				
			});
		}
	},
	
	//private variables
	_UI :			undefined,	//local pointer to the UI object
	_array : 		undefined,	//reference to the UI array setup in the constructor and registered with the UI
	_arrow : 		undefined,	//reference to the UI arrow setup with the array and registered with the UI
	_input_tmp :	undefined,	//used to hold user input during the lesson
	_delete_index : undefined,	//holds the index in the array where the item to delete is located, populated in next() -> _step_delete
	
	//state and constants associated
	_DONE : 3,			//if we can no longer run the lesson, then set this state which makes the lesson unresponsive
	_RUN : 2,			//currently traversing the lesson
	_READY : 1,			//ready to start the lesson, done with all of the setup, not currently in the lesson
	_INIT : 0,			//initial state, setting up object for lesson, should not be able to interact at this step
	_state : undefined,	//tracks the state of the lesson
	
	//states for when stepping through a lesson
	_step_delete		: 1,
	_step_searching		: 0,
	_step_state			: undefined,
};

module.exports = lesson;