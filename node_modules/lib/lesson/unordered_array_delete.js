var check = require('check-types')

function lesson(options) {
	if (!(this instanceof lesson)) return new lesson(options);
	
	//if we don't have a UI object, can't continue, error
	if (!(check.object(options) && check.object(options.UI))) {
		throw new TypeError("Argument 'UI' (object) is required, argument should be object.");
	}
	
	this._UI = options.UI;
	
	//SETUP
	//initial setup state
	this._state = this._INIT;
	
	//setup the UI array used during the lesson
	var array_size = 4;
	var result = this._setup_array(array_size);
	this._array = result;
	this._arrow = result._.arrow;
	
	//insert random values into the array
	this._array = this._populate_array(this._array, this._arrow);
	
	//register the UI elements with the UI
	//	only add the array as the arrow is a child of the array component
	this._UI.stage.add(this._array);
	
	var next = this.next;
	var instance = this;
	//setup event handler on Next button
	//NOTE: had to use call() here, methods were being called with the window assigned to `this` as they were being called from inside an event handler
	this._UI.pub_sub.subscribe("click.next_button", function() {
		//if we're tweening, do nothing that would involve an animation
		var move = require('lib/util/move');
		if (move.is_moving()) return;
		//otherwise either start or continue with a lesson
		next.call(instance);
	});
	
	//all done with initial setup
	this._state = this._READY;
};

lesson.prototype = {
	//METHODS-METHODS-METHODS-METHODS-METHODS-METHODS-METHODS-METHODS-METHODS-METHODS-METHODS-METHODS
	
	//PUBLIC-PUBLIC-PUBLIC-PUBLIC-PUBLIC-PUBLIC-PUBLIC-PUBLIC-PUBLIC-PUBLIC-PUBLIC-PUBLIC-PUBLIC-PUBLIC
	
	//public function to handle calling internal lesson logic
	next : function() {},
	
	//PRIVATE-PRIVATE-PRIVATE-PRIVATE-PRIVATE-PRIVATE-PRIVATE-PRIVATE-PRIVATE-PRIVATE-PRIVATE-PRIVATE
	
	//sets up an array UI component, for registration with the UI during INIT
	_setup_array : function(size) {
		var array_UI = require('lib/UI/array_UI');
		var result = array_UI({length:size});
		
		//TODO: allow config of positioning
		//positioning array
		result.x = 100;
		result.y = 150;
		
		return result;
	},
	
	//populates an UI array with random numbers
	_populate_array : function(array, arrow) {
		var text_factory = require('lib/factory/text_factory');
		var tf = text_factory();
		
		for (var i = 0; i < array._.length; i++) {
			//makes a createjs Text object whose value is a random integer
			var value = tf.get();
			
			array._.push({value:value, tween:false});
			arrow._.next({tween:false});
		}
		
		return array;
	},
	
	//private variables
	_UI :			undefined,	//local pointer to the UI object
	_array : 		undefined,	//reference to the UI array setup in the constructor and registered with the UI
	_arrow : 		undefined,	//reference to the UI arrow setup with the array and registered with the UI
	_input_tmp :	undefined,	//used to hold user input during the lesson
	
	//state and constants associated
	_DONE : 3,			//if we can no longer run the lesson, then set this state which makes the lesson unresponsive
	_RUN : 2,			//currently traversing the lesson
	_READY : 1,			//ready to start the lesson, done with all of the setup, not currently in the lesson
	_INIT : 0,			//initial state, setting up object for lesson, should not be able to interact at this step
	_state : undefined,	//tracks the state of the lesson
	
	//states for when stepping through a lesson
	_step_state : undefined,
};

module.exports = lesson;