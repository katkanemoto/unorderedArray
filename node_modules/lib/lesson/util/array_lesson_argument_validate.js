//validate the common arguments for array lesson logic objects
//	they require a UI to manipulate (that generally conforms to the API outlined in the checks below)
//	they require an array and arrow object (whose validation is validated by static methods on their respective classes)
//the validation function is also decorated with additional validation functions, that check individual argument objects
//	(e.g. _validate_UI, will check that the passed argument is an object with the specified namespaces to access functionality on the UI)

var check = require('check-types');

function validate(options) {
	var ret = {valid:true};
	
	//requires arguments
	ret = _validate_options(options);
	if (!ret.valid) return ret;
	
	ret = _validate_UI(options.UI);
	if (!ret.valid) return ret;

	var array_UI = require('lib/UI/array_UI');
	if (!array_UI.is_array(options.array)){
		ret.valid = false;
		ret.msg = "Required argument: array, should be type array_UI.";
		return ret;
	}

	var array_arrow_UI = require('lib/UI/array_arrow_UI');
	if (!array_arrow_UI.is_arrow(options.arrow)) {
		ret.valid = false;
		ret.msg = "Required argument: arrow, should be type array_arrow_UI";
		return ret;
	}
	
	return ret;
}

function _validate_options(options) {
	var ret = {valid:true};
	
	if (check.undefined(options) || check.not.object(options)) {
		ret.valid = false;
		ret.msg = "Requires argument object."
		return ret;
	}
	
	return ret;
}

function _validate_UI(UI) {
	var ret = {valid:true};
	
	if (check.undefined(UI) || check.not.object(UI)) {
		ret.valid = false;
		ret.msg = "Required argument: UI, should be object (proxy to control the UI)";
		return ret;
	}
	
	//duck-typing UI
	if (check.not.object(UI.input)) {
		ret.valid = false;
		ret.msg = "Required argument: UI, should have namespace 'input' to control user input.";
		return ret;
	}
	
	if (check.not.object(UI.output)) {
		ret.valid = false;
		ret.msg = "Required argument: UI, should have namespace 'output' to display output to the stage.";
		return ret;
	}
	
	if (check.not.object(UI.stage)) {
		ret.valid = false;
		ret.msg = "Required argument: UI, should have namespace 'stage' to control access to the lesson stage.";
		return ret;
	}
	
	if (check.not.object(UI.pub_sub)) {
		ret.valid = false;
		ret.msg = "Required argument: UI, should have namespace 'pub_sub' as a handler for events.";
		return ret;
	}

	return ret;
}

validate._ = {};
validate._.options = _validate_options;
validate._.UI = _validate_UI;

module.exports = validate;