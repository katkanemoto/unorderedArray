//creates an array of size `size` (required argument)
//	optionally takes a `fill` argument to completely or partially fill the array with random values (if an integer)
//	if `fill` is set to an array, extracts and String()s the values from the array to fill the new array
//	(error if there are more values in the argument array than the size of the new array)
//	(error if `fill` is defined, but not set to an integer or array)

//	optionally takes positioning arguments to apply to the array (x, y)
//	(error if the values of x/y are not real numbers)
//	default values: x=100, y=150

//	optionally takes an argument: 'ordered', should be boolean
//	if ordered is truthy, produces an array of integers of increasing size
//	it is an error if the property 'ordered' is defined and not 'fill'
var check = require('check-types');

function array_setup(options) {
	var validate = require('lib/lesson/util/array_lesson_argument_validate.js');
	var v = validate._.options(options);
	if (!v.valid) {
		throw new TypeError(v.msg);
	}
	
	if(check.undefined(options.size) || check.not.integer(options.size) || (options.size <= 0)) {
		throw new TypeError("Required argument: 'size', should be integer > 0");
	}
	
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:options.size});
	
	//positioning array
	var x = 100;
	var y = 150;
	if(check.not.undefined(options.x)) {
		if (check.number(options.x)) {
			x = options.x;
		} else {
			throw new TypeError("Optional argument: 'x', should be number.");
		}
	}
	if(check.not.undefined(options.y)) {
		if (check.number(options.y)) {
			y = options.y;
		} else {
			throw new TypeError("Optional argument: 'y', should be number.");
		}
	}
	
	array.x = x;
	array.y = y;
	
	//fill property checing
	if(check.not.undefined(options.fill)) {
		var valid = false;
		if (check.integer(options.fill)) {
			if ((options.fill > 0) && (options.fill <= options.size)) {
				valid = true;
			}
		}
		
		if (check.array(options.fill) && (options.fill.length <= options.size)) {
			valid = true;
		}
		
		if (!valid) {
			throw new TypeError("Optional argument: 'fill', should be integer (less than or equal to argument 'size' & fill > 0) or array (with length <= 'size').");
		}
	}
	
	//ordered property checking
	if (check.not.undefined(options.ordered)) {
		var valid = false;
		if (check.boolean(options.ordered) && check.not.undefined(options.fill)) valid = true;
		if (!valid) {
			throw new TypeError("Optional argument: 'ordered', should be boolean and, if set, requires optional argument 'fill'.");
		}
	}
	
	if (check.number(options.fill)) {
		var values = [];
		var random_integer = require('lib/util/random_integer');
		
		//generate 'fill' random numbers
		while (values.length < options.fill) {
			values.push(random_integer());
		};
		
		//if we want an ordered array
		if (options.ordered) {
			//then sort them
			//	see the mdn article for why this wacky looking statement is needed:
			//	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort
			values.sort(function(a, b) {
				return a - b;
			});
		}
		
		var text_factory = require('lib/factory/text_factory');
		var tf = text_factory();
		var arrow = array._.arrow;
		
		//then add the values to the UI array for return
		for (var i = 0; i < values.length; i++) {
			tf.text({text:values[i]});
			var value = tf.get();
			
			array._.push({value:value, tween:false});
			arrow._.next({tween:false});
		}
	}
		
	if (check.array(options.fill)) {
		var text_factory = require('lib/factory/text_factory');
		var tf = text_factory();
		var arrow = array._.arrow;
		
		for (var i = 0; i < options.fill.length; i++) {
			//makes a createjs Text object whose value is the String()'d value of what's in the fill array
			tf.text({text:options.fill[i]});
			var value = tf.get();
			
			array._.push({value:value, tween:false});
			arrow._.next({tween:false});
		}
	}	
	
	return array;
};

module.exports = array_setup;