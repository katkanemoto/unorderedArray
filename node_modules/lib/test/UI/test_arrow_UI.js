var arrow_UI = require('lib/UI/arrow_UI');
var test = require('tape');
var check = require('check-types');

function SETUP() {
	var primitives = require("lib/util/primitives");
	primitives.set('createjs', createjs);
	
	var mock_lib = {
		TitleScreen : function() {
			return {
				insert_btn : {
					addEventListener : function() {},
				},
				gotoAndPlay : function() {},
			};
		},
		ArrayScreen : function() {
			return {};
		},
		ArrayElement : function() {
			var ae = new createjs.Shape();
			ae.index_txt = {
				text : '',
			};
			
			return ae;
		},
	};
	
	primitives.set('lib', mock_lib);
	
	var canvas = document.getElementsByTagName('canvas')[0];
	var stage = new createjs.Stage(canvas);
	
	primitives.set('stage', stage);
}

function TEARDOWN() {
	var primitives = require("lib/util/primitives");
	primitives.clear();
}

test("[arrow_UI] incorrect, 'createjs' wrong type", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	var primitives = require("lib/util/primitives");
	primitives.set('createjs', '');
	
	//TEST
	try {
		arrow_UI();
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/createjs/), 'checking for an object in primitives');
		t.ok(message.match(/undefined or not object in primitives object/), 'defined what was wrong');
	}
	
	TEARDOWN();
});

test("[arrow_UI] incorrect, 'createjs' unset", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	var primitives = require("lib/util/primitives");
	primitives.delete('createjs');
	
	//TEST
	try {
		arrow_UI();
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/createjs/), 'checking for an object in primitives');
		t.ok(message.match(/undefined or not object in primitives object/), 'defined what was wrong');
	}
	
	TEARDOWN();
});

test("[arrow_UI] incorrect, no argument", function (t) {
	t.plan(2);
	
	//SETUP
	SETUP();
	
	//TEST
	try {
		arrow_UI();
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Require argument object/), "tells you what's wrong");
	}
	
	TEARDOWN();
});

test("[arrow_UI] incorrect, argument object, but no properties", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	//TEST
	try {
		arrow_UI({});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Require argument object with property 'name'/), "tells you what's wrong");
		t.ok(message.match(/should be String/), "and what type should be");
	}
	
	TEARDOWN();
});

test("[arrow_UI] incorrect, argument object, with name property, but wrong type", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	//TEST
	try {
		arrow_UI({name:0});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Require argument object with property 'name'/), "tells you what's wrong");
		t.ok(message.match(/should be String/), "and what type should be");
	}
	
	TEARDOWN();
});

test("[arrow_UI] incorrect, argument object, name correct, but position undefined", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	//TEST
	try {
		arrow_UI({name:"test"});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Require argument object with property 'position'/), "tells you what's wrong");
		t.ok(message.match(/should be Object with numeric properties x and y/), "and what type should be");
	}
	
	TEARDOWN();
});

test("[arrow_UI] incorrect, argument object, name correct, position defined but no properties", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	//TEST
	try {
		arrow_UI({name:"test", position:{}});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Require argument object with property 'position'/), "tells you what's wrong");
		t.ok(message.match(/should be Object with numeric properties x and y/), "and what type should be");
	}
	
	TEARDOWN();
});

test("[arrow_UI] incorrect, argument object, name correct, position defined, x property wrong type", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	//TEST
	try {
		arrow_UI({name:"test", position:{x:"some bad type"}});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Require argument object with property 'position'/), "tells you what's wrong");
		t.ok(message.match(/should be Object with numeric properties x and y/), "and what type should be");
	}
	
	TEARDOWN();
});

test("[arrow_UI] incorrect, argument object, name correct, position defined, y property wrong type", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	//TEST
	try {
		arrow_UI({name:"test", position:{x:0, y:"some bad type"}});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Require argument object with property 'position'/), "tells you what's wrong");
		t.ok(message.match(/should be Object with numeric properties x and y/), "and what type should be");
	}
	
	TEARDOWN();
});

test("[arrow_UI] incorrect, argument object, name correct, position correct, pointed_at undefined", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	//TEST
	try {
		arrow_UI({name:"test", position:{x:0, y:0}});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Require argument object with property 'pointed_at'/), "tells you what's wrong");
		t.ok(message.match(/should be Object/), "and what type should be");
	}
	
	TEARDOWN();
});

test("[arrow_UI] incorrect, argument object, name correct, position correct, pointed_at wrong type", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	//TEST
	try {
		arrow_UI({name:"test", position:{x:0, y:0}, pointed_at:"some bad type"});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Require argument object with property 'pointed_at'/), "tells you what's wrong");
		t.ok(message.match(/should be Object/), "and what type should be");
	}
	
	TEARDOWN();
});

test("[arrow_UI] incorrect, argument object, name correct, position correct, pointed_at correct, next undefined", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	//TEST
	try {
		arrow_UI({name:"test", position:{x:0, y:0}, pointed_at:{}});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Require argument object with property 'next'/), "tells you what's wrong");
		t.ok(message.match(/should be function/), "and what type should be");
	}
	
	TEARDOWN();
});

test("[arrow_UI] incorrect, argument object, name correct, position correct, pointed_at correct, next wrong type", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	//TEST
	try {
		arrow_UI({name:"test", position:{x:0, y:0}, pointed_at:{}, next:"some bad type"});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Require argument object with property 'next'/), "tells you what's wrong");
		t.ok(message.match(/should be function/), "and what type should be");
	}
	
	TEARDOWN();
});

/* test("[arrow_UI] incorrect, argument object, name correct, position correct, pointed_at correct, next correct, index undefined", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	//TEST
	try {
		arrow_UI({name:"test", position:{x:0, y:0}, pointed_at:{}, next:function(){}});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Require argument object with property 'index'/), "tells you what's wrong");
		t.ok(message.match(/should be integer/), "and what type should be");
	}
	
	TEARDOWN();
});

test("[arrow_UI] incorrect, argument object, name correct, position correct, pointed_at correct, next correct, index wrong type", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	//TEST
	try {
		arrow_UI({name:"test", position:{x:0, y:0}, pointed_at:{}, next:function(){}, index:"some bad type"});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Require argument object with property 'index'/), "tells you what's wrong");
		t.ok(message.match(/should be integer/), "and what type should be");
	}
	
	TEARDOWN();
}); */

test("[arrow_UI] correct", function (t) {
	t.plan(1);
	
	//SETUP
	SETUP();
	
	var args = {name:"test", position:{x:0, y:0}, pointed_at:{}, next:function(){}, index:0}
	
	//TEST
	var result = arrow_UI(args);
	
	t.ok(check.instanceStrict(result, createjs.Container), "got back a container");
	
	TEARDOWN();
});

test('[arrow_UI._make_arrow], correct', function (t) {
	t.plan(4);
	
	//SETUP
	SETUP();
	
	var primitives = require("lib/util/primitives");
	var mock_this = {
		_createjs : primitives.get('createjs'),
	};
	
	//TEST
	var result = arrow_UI.prototype._make_arrow.call(mock_this, "test");
	
	t.ok(check.instanceStrict(result, createjs.Container), "got back a container");
	t.ok(check.instanceStrict(result.children[0], createjs.Container), "first child is the container holding the arrow");
	t.ok(check.instanceStrict(result.children[1], createjs.Text), "second child is the label");
	t.equal(result.children[1].text, "test", "and the label should be the string we passed");
	
	TEARDOWN();
});

test('[arrow_UI._decorate], correct', function (t) {
	//SETUP
	SETUP();
	
	var mock_this = {};
	var mock_arrow = {
		x : undefined,
		y : undefined,
	};
	var mock_options = {
		name: "test",
		position: {x:0, y:0},
		pointed_at:{},
		next:function(){},
	};
	
	//TEST
	var result = arrow_UI.prototype._decorate.call(mock_this, mock_arrow, mock_options);
	
	t.ok(check.object(result), "get back an object");
	t.ok(check.object(result._), "with a _ namespace");
	t.equal(result._.name, "test", "name should be assigned");
	t.equal(result.x, 0, "arrow should be positioned");
	t.equal(result.y, 0, "arrow should be positioned");
	t.deepEqual(mock_options.pointed_at, result._.pointed_at, "arrow should be pointed at something");
	t.ok(check.function(result._.next), "and should have a next() function assigned");
	t.ok(check.object(result._.move), "move should be decorated");
	
	TEARDOWN();
	
	t.end();
});