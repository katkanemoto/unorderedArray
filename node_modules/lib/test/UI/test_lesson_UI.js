var lesson_UI = require('lib/UI/lesson_UI');
var test = require('tape');
var check = require('check-types');

test('[lesson_UI] incorrect, no arguments', function (t) {
	t.plan(4);
	
	try {
		lesson_UI();
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/stage/), 'what argument caused the problem');
		t.ok(message.match(/object/), 'tells you what type needed');
		t.ok(message.match(/argument should be object/), 'tells you about how to pass arguments');
	}
});

test('[lesson_UI] incorrect, bad argument', function (t) {
	t.plan(4);
	
	try {
		lesson_UI("some bad argument");
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/stage/), 'what argument caused the problem');
		t.ok(message.match(/object/), 'tells you what type needed');
		t.ok(message.match(/argument should be object/), 'tells you about how to pass arguments');
	}
});

test("[lesson_UI] incorrect, 'stage' argument wrong type", function (t) {
	t.plan(4);
	
	try {
		lesson_UI({stage: "some bad argument"});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/stage/), 'what argument caused the problem');
		t.ok(message.match(/object/), 'tells you what type needed');
		t.ok(message.match(/argument should be object/), 'tells you about how to pass arguments');
	}
});

test("[lesson_UI] incorrect, 'lib' argument wrong type", function (t) {
	t.plan(4);
	
	try {
		lesson_UI({stage: {}, lib:"some bad argument"});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/lib/), 'what argument caused the problem');
		t.ok(message.match(/object/), 'tells you what type needed');
		t.ok(message.match(/argument should be object/), 'tells you about how to pass arguments');
	}
});

test("[lesson_UI] incorrect, 'createjs' argument wrong type", function (t) {
	t.plan(4);
	
	try {
		lesson_UI({stage: {}, lib:{}, createjs:"some bad argument"});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/createjs/), 'what argument caused the problem');
		t.ok(message.match(/object/), 'tells you what type needed');
		t.ok(message.match(/argument should be object/), 'tells you about how to pass arguments');
	}
});

test('[lesson_UI._setup_title_screen] correct', function (t) {
	t.plan(4);
	
	//SETUP
	var mock_lib = {
		TitleScreen : function() {
			return {};
		},
	};
	
	var add_child_called = false;
	var mock_this = {
		_title_screen : undefined,
		_stage : {
			addChild : function() {
				add_child_called = true;
			}
		},
		_lib : mock_lib,
	};
	
	//TEST
	lesson_UI.prototype._setup_title_screen.call(mock_this);
	
	t.ok(check.object(mock_this._title_screen), 'a title screen object was defined');
	t.ok(check.not.undefined(mock_this._title_screen.x), 'defined the x');
	t.ok(check.not.undefined(mock_this._title_screen.y), 'and the y');
	t.ok(add_child_called, 'added the title screen to the stage');
});

test('[lesson_UI._setup_insert_button] correct', function (t) {
	t.plan(2);
	
	//SETUP
	var addEventListener_called = false;
	var mock_this = {
		_title_screen : {
			insert_btn : {
				addEventListener : function() {
					addEventListener_called = true;
				},
			},
			
		},
	};
	
	//TEST
	lesson_UI.prototype._setup_insert_button.call(mock_this);
	
	t.ok(check.object(mock_this._insert_button), 'made a local reference to the inesrt button on the title screen');
	t.ok(addEventListener_called, 'put an event listener on the insert button');
});

test('[lesson_UI._setup_array_screen] correct', function (t) {
	t.plan(3);
	
	//SETUP
	var mock_lib = {
		ArrayScreen : function() {
			return {};
		},
	};
	
	var mock_this = {
		_lib : mock_lib,
	};
	
	//TEST
	lesson_UI.prototype._setup_array_screen.call(mock_this);
	
	t.ok(check.object(mock_this._array_screen), 'made a new array screen object');
	t.ok(check.not.undefined(mock_this._array_screen.x), 'defined the x');
	t.ok(check.not.undefined(mock_this._array_screen.y), 'and the y');
});

test('[lesson_UI._setup_array] correct', function (t) {
	t.plan(3);
	
	//SETUP
	var mock_this = {
		_make_array : function() {
			return {};
		},
	};
	
	//TEST
	lesson_UI.prototype._setup_array.call(mock_this);
	
	t.ok(check.object(mock_this._array), 'made a new array object');
	t.ok(check.not.undefined(mock_this._array.x), 'defined the x');
	t.ok(check.not.undefined(mock_this._array.y), 'and the y');
});

test('[lesson_UI._make_array] correct', function (t) {
	t.plan(2);
	
	//SETUP
	var addChild_called = false;
	var mock_this = {
		_createjs : {
			Container : function() {
				return {
					addChild : function() {
						addChild_called = true;
					}
				};
			},
		},
		_lib : {
			ArrayElement : function() {
				return {
					x : undefined,
					index_txt : {
						text : undefined,
					},
				};
			},
		},
	};
	
	//TEST
	var result = lesson_UI.prototype._make_array.call(mock_this, 5);
	
	t.ok(check.object(result), 'made a new array object');
	t.ok(addChild_called, 'added a child object to the container');
});

test('[lesson_UI] correct', function (t) {
	//SETUP
	
	var mock_createjs = {
		Container : function() {
			return {
				addChild : function() {},
			};
		},
	};
	var mock_lib = {
		TitleScreen : function() {
			return {
				insert_btn : {
					addEventListener : function() {},
				},
				gotoAndPlay : function() {},
			};
		},
		ArrayScreen : function() {
			return {};
		},
		ArrayElement : function() {
			return {
				x : undefined,
				index_txt : {
					text : undefined,
				},
			};
		},
	};
	var mock_stage = {
		addChild : function() {},
	};
	
	//TEST
	var ui = lesson_UI({stage:mock_stage, lib:mock_lib, createjs:mock_createjs});
	
	for (property in ui) {
		t.ok(check.not.undefined(ui[property]), String(property) + " is defined");
	}
	t.equal(ui._state, ui._PRE_LESSON, 'in the correct state after setup');
	
	t.end();
});

test('[lesson_UI.next] INIT state', function (t) {
	t.plan(6);
	
	//SETUP
	var _title_screen_gotoAndPlay_called = false;
	var _array_screen_gotoAndPlay_called = false;
	var _array_screen_addChild_called = false;
	var _stage_addChild_called = false;
	var next_called = false;
	var mock_this = {
		_INIT : 0,
		_PRE_LESSON : 1,
		_LESSON : 2,
		_state : undefined,
		
		_title_screen : {
			gotoAndPlay : function() {
				_title_screen_gotoAndPlay_called = true;
			},
		},
		next : function() {
			next_called = true;
		},
		_array_screen : {
			gotoAndPlay : function() {
				_array_screen_gotoAndPlay_called = true;
			},
			addChild : function() {
				_array_screen_addChild_called = true;
			},
		},
		_stage : {
			addChild : function() {
				_stage_addChild_called = true;
			},
		},
	};
	mock_this._state = mock_this._INIT;
	
	//TEST
	var result = lesson_UI.prototype.next.call(mock_this);
	
	//should not change state on INIT
	t.notOk(_title_screen_gotoAndPlay_called);
	t.notOk(_array_screen_gotoAndPlay_called);
	t.notOk(_array_screen_addChild_called);
	t.notOk(_stage_addChild_called);
	t.notOk(next_called);
	t.equal(mock_this._state, lesson_UI.prototype._INIT);
});

test('[lesson_UI.next] _PRE_LESSON state', function (t) {
	t.plan(6);
	
	//SETUP
	var _title_screen_gotoAndPlay_called = false;
	var _array_screen_gotoAndPlay_called = false;
	var _array_screen_addChild_called = false;
	var _stage_addChild_called = false;
	var next_called = false;
	var mock_this = {
		_INIT : 0,
		_PRE_LESSON : 1,
		_LESSON : 2,
		_state : undefined,
		
		_title_screen : {
			gotoAndPlay : function() {
				_title_screen_gotoAndPlay_called = true;
			},
		},
		next : function() {
			next_called = true;
		},
		_array_screen : {
			gotoAndPlay : function() {
				_array_screen_gotoAndPlay_called = true;
			},
			addChild : function() {
				_array_screen_addChild_called = true;
			},
		},
		_stage : {
			addChild : function() {
				_stage_addChild_called = true;
			},
		},
	};
	mock_this._state = mock_this._LESSON;
	
	//TEST
	var result = lesson_UI.prototype.next.call(mock_this);
	
	t.notOk(_title_screen_gotoAndPlay_called, 'closing the title screen');
	t.ok(_array_screen_gotoAndPlay_called);
	t.ok(_array_screen_addChild_called);
	t.ok(_stage_addChild_called);
	t.notOk(next_called);
	t.equal(mock_this._state, lesson_UI.prototype._LESSON);
});
