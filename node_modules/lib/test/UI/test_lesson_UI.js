var lesson_UI = require('lib/UI/lesson_UI');
var test = require('tape');
var check = require('check-types');

function SETUP() {
	//checks each required primitive, if unset, then sets it to some mock value
	//	if set, then it was set by the live UI and use that for testing
	var primitives = require("lib/util/primitives");
	
	if (check.undefined(primitives.get('createjs'))) {
		primitives.set('createjs', createjs);
	}
	
	if (check.undefined(primitives.get('stage'))) {
		var canvas = document.getElementsByTagName('canvas')[0];
		var stage = new createjs.Stage(canvas);
		primitives.set('stage', stage);
	}
	
	if (check.undefined(primitives.get('lib'))) {
		var mock_lib = {
			TitleScreen : function() {
				return {
					insert_btn : {
						addEventListener : function() {},
					},
					gotoAndPlay : function() {},
				};
			},
			ArrayScreen : function() {
				return {};
			},
			ArrayElement : function() {
				var ae = new createjs.Shape();
				ae.index_txt = {
					text : '',
				};
				
				return ae;
			},
		};
		
		primitives.set('lib', mock_lib);
	}
}

function TEARDOWN() {
	var primitives = require("lib/util/primitives");
	var stage = primitives.get('stage');
	
	//reset the stage
	stage.clear();
	stage.removeAllChildren();
	
	//delete the text input created by lesson_UI
	var div = document.getElementById('canvas_container');
	//	find the input control
	var input_index;
	for (var i = 0; i < div.children.length; i++) {
		if (div.children[i].type === "text") {
			//don't delete inside the array while iterating over it
			input_index = i;
		}
	};
	//if there was a text input, then delete it
	if (input_index) {
		div.removeChild(div.children[input_index]);
	}
};

test("[lesson_UI] incorrect, 'stage' wrong type", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	var primitives = require("lib/util/primitives");
	var stage_backup = primitives.get('stage');
	primitives.set('stage', '');
	
	//TEST
	try {
		lesson_UI();
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/stage/), 'checking for an object in primitives');
		t.ok(message.match(/undefined or not object in primitives object/), 'defined what was wrong');
	}
	
	//CLEANUP
	primitives.set('stage', stage_backup);
	
	TEARDOWN();
});

test("[lesson_UI] incorrect, 'stage' unset", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	var primitives = require("lib/util/primitives");
	var stage_backup = primitives.get('stage');
	primitives.delete('stage');
	
	//TEST
	try {
		lesson_UI();
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/stage/), 'checking for an object in primitives');
		t.ok(message.match(/undefined or not object in primitives object/), 'defined what was wrong');
	}
	
	//CLEANUP
	primitives.set('stage', stage_backup);
	
	TEARDOWN();
});

test("[lesson_UI] incorrect, 'lib' wrong type", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	var primitives = require("lib/util/primitives");
	var lib_backup = primitives.get('lib');
	primitives.set('lib', '');
	
	//TEST
	try {
		lesson_UI();
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/lib/), 'checking for an object in primitives');
		t.ok(message.match(/undefined or not object in primitives object/), 'defined what was wrong');
	}
	
	//CLEANUP
	primitives.set('lib', lib_backup);
	
	TEARDOWN();
});

test("[lesson_UI] incorrect, 'lib' unset", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	var primitives = require("lib/util/primitives");
	var lib_backup = primitives.get('lib');
	primitives.delete('lib');
	
	//TEST
	try {
		lesson_UI();
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/lib/), 'checking for an object in primitives');
		t.ok(message.match(/undefined or not object in primitives object/), 'defined what was wrong');
	}
	
	//CLEANUP
	primitives.set('lib', lib_backup);
	
	TEARDOWN();
});

test("[lesson_UI] incorrect, 'createjs' wrong type", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	var primitives = require("lib/util/primitives");
	var createjs_backup = primitives.get('createjs');
	primitives.set('createjs', '');
	
	//TEST
	try {
		lesson_UI();
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/createjs/), 'checking for an object in primitives');
		t.ok(message.match(/undefined or not object in primitives object/), 'defined what was wrong');
	}
	
	//CLEANUP
	primitives.set('createjs', createjs_backup);
	
	TEARDOWN();
});

test("[lesson_UI] incorrect, 'createjs' unset", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	var primitives = require("lib/util/primitives");
	var createjs_backup = primitives.get('createjs');
	primitives.delete('createjs');
	
	//TEST
	try {
		lesson_UI();
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/createjs/), 'checking for an object in primitives');
		t.ok(message.match(/undefined or not object in primitives object/), 'defined what was wrong');
	}
	
	//CLEANUP
	primitives.set('createjs', createjs_backup);
	
	TEARDOWN();
});

test("[lesson_UI] incorrect, 'lesson' wrong type", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	//TEST
	try {
		lesson_UI({lesson:"some bad type"});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/lesson/), "tells you what's wrong");
		t.ok(message.match(/should be function/), 'and how to fix it');
	}
	
	//CLEANUP
	TEARDOWN();
});

test('[lesson_UI._setup_title_screen] correct', function (t) {
	//SETUP
	SETUP();
	var primitives = require("lib/util/primitives");
	
	var mock_this = {
		//_title_screen : undefined,
		_lib : primitives.get('lib'),
	};
	
	//TEST
	var result = lesson_UI.prototype._setup_title_screen.call(mock_this);
	
	t.ok(check.object(result), "got back a title screen")
	t.ok(check.number(result.x), 'defined the x');
	t.ok(check.number(result.y), 'and the y');
	
	//CLEANUP
	TEARDOWN();
	t.end();
});

test('[lesson_UI._setup_start_button] correct', function (t) {
	//SETUP
	SETUP();
	
	var addEventListener_called = false;
	var mock_this = {
		_title_screen : {
			insert_btn : {
				addEventListener : function() {
					addEventListener_called = true;
				},
			},
			
		},
	};
	
	//TEST
	var result = lesson_UI.prototype._setup_start_button.call(mock_this);
	
	t.ok(check.object(result), "got back the start button");
	t.ok(addEventListener_called, 'put an event listener on the insert button');
	
	//CLEANUP
	TEARDOWN();
	t.end();
});

test('[lesson_UI.next] INIT state (mock)', function (t) {
	//SETUP
	SETUP();
	var _title_screen_gotoAndPlay_called = false;
	var _array_screen_gotoAndPlay_called = false;
	var _array_screen_addChild_called = false;
	var _stage_addChild_called = false;
	var next_called = false;
	var _setup_array_screen_called = false;
	var _setup_text_input_called = false;
	var _setup_next_button_called = false;
	var _setup_text_output_called = false;
	var _setup_title_screen_called = false;
	var _setup_start_button_called = false;
	
	var mock_this = {
		_INIT : 0,
		_PRE_LESSON : 1,
		_LESSON : 2,
		_state : undefined,
		
		_title_screen : undefined,
		_setup_title_screen : function() {
			_setup_title_screen_called = true;
			return {
				gotoAndPlay : function() {
					_title_screen_gotoAndPlay_called = true;
				},
			}
		},
		_setup_start_button : function() {
			_setup_start_button_called = true;
		},
		next : function() {
			next_called = true;
		},
		_array_screen : undefined,
		_stage : {
			addChild : function() {
				_stage_addChild_called = true;
			},
		},
		_setup_array_screen : function() {
			_setup_array_screen_called = true;
			
			return {
				gotoAndPlay : function() {
					_array_screen_gotoAndPlay_called = true;
				},
				addChild : function() {
					_array_screen_addChild_called = true;
				},
			};
		},
		_setup_text_input : function() {
			_setup_text_input_called = true;
			
			return {
				_ : {
					append_to : function() {},
				},
			};
		},
		_setup_next_button : function() {
			_setup_next_button_called = true;
			
			return {};
		},
		_setup_text_output : function() {
			_setup_text_output_called = true;
			
			return {};
		},
	};
	mock_this._state = mock_this._INIT;
	
	//TEST
	var result = lesson_UI.prototype.next.call(mock_this);
	
	t.notOk(_setup_title_screen_called);
	t.notOk(_setup_start_button_called);
	t.notOk(_title_screen_gotoAndPlay_called);
	t.notOk(_array_screen_gotoAndPlay_called);
	t.notOk(_array_screen_addChild_called);
	t.notOk(_stage_addChild_called);
	t.notOk(next_called);
	t.equal(mock_this._state, lesson_UI.prototype._INIT);
	
	t.notOk(_setup_array_screen_called);
	t.notOk(_setup_text_input_called);
	t.notOk(_setup_next_button_called);
	t.notOk(_setup_text_output_called);
	
	//CLEANUP
	TEARDOWN();
	t.end();
});

test('[lesson_UI] correct', function (t) {
	t.plan(5);
	
	//SETUP
	SETUP();
	
	//TEST
	var ui = lesson_UI();
	
	t.equal(ui._state, ui._PRE_LESSON, 'in pre-lesson after constructor call');
	t.ok(check.not.undefined(ui._title_screen), "title screen setup");
	t.ok(check.not.undefined(ui._start_button), "start button setup");
	
	var primitives = require("lib/util/primitives");
	var stage = primitives.get("stage");
	
	t.ok(stage.contains(ui._title_screen), "title screen is on the stage");
	
	//NOTE: odd behavior, the start button is not added to the title screen at title screen creation time, but rather as the side effect of some other internal method call
	//	so we can't detect the start button in the title screen until some time after the title screen is added to the stage
	
	//NOTE: cannot stub gotoAndPlay on title screen for testing
	setTimeout(function() {
		t.ok(ui._title_screen.contains(ui._start_button), "start button is in the title screen");
		
		//CLEANUP
		TEARDOWN();
	}, 500);
});

test('[lesson_UI] correct, lesson passed', function (t) {
	//SETUP
	SETUP();
	
	function mock_lesson() {};
	
	//TEST
	var ui = lesson_UI({lesson:mock_lesson});
	
	t.deepEqual(ui._lesson, mock_lesson, "saw the lesson set in the UI");
	
	//CLEANUP
	TEARDOWN();
	t.end();
});

test('[lesson_UI.next] _LESSON state (mock)', function (t) {
	//SETUP
	SETUP();
	var _title_screen_gotoAndPlay_called = false;
	var _array_screen_gotoAndPlay_called = false;
	var _array_screen_addChild_called = false;
	var _stage_addChild_called = false;
	var next_called = false;
	var _setup_array_screen_called = false;
	var _setup_text_input_called = false;
	var _setup_next_button_called = false;
	var _setup_text_output_called = false;
	
	var mock_this = {
		_INIT : 0,
		_PRE_LESSON : 1,
		_LESSON : 2,
		_state : undefined,
		
		_title_screen : {
			gotoAndPlay : function() {
				_title_screen_gotoAndPlay_called = true;
			},
		},
		next : function() {
			next_called = true;
		},
		_array_screen : undefined,
		_stage : {
			addChild : function() {
				_stage_addChild_called = true;
			},
		},
		_setup_array_screen : function() {
			_setup_array_screen_called = true;
			
			return {
				gotoAndPlay : function() {
					_array_screen_gotoAndPlay_called = true;
				},
				addChild : function() {
					_array_screen_addChild_called = true;
				},
			};
		},
		_setup_text_input : function() {
			_setup_text_input_called = true;
			
			return {
				_ : {
					append_to : function() {},
				},
			};
		},
		_setup_next_button : function() {
			_setup_next_button_called = true;
			
			return {};
		},
		_setup_text_output : function() {
			_setup_text_output_called = true;
			
			return {};
		},
	};
	mock_this._state = mock_this._LESSON;
	
	//TEST
	var result = lesson_UI.prototype.next.call(mock_this);
	
	t.notOk(_title_screen_gotoAndPlay_called);
	t.ok(_array_screen_gotoAndPlay_called);
	t.ok(_array_screen_addChild_called);
	t.ok(_stage_addChild_called);
	t.notOk(next_called);
	t.equal(mock_this._state, lesson_UI.prototype._LESSON);
	
	t.ok(_setup_array_screen_called);
	t.ok(_setup_text_input_called);
	t.ok(_setup_next_button_called);
	t.ok(_setup_text_output_called);
	
	t.ok(check.object(mock_this._title_screen), "title screen was not touched during this call");
	
	//CLEANUP
	TEARDOWN();
	t.end();
});

test('[lesson_UI.next] _PRE_LESSON state (live) (no lesson)', function (t) {
	//SETUP
	SETUP();
	
	var ui = lesson_UI();
	
	//PRE-TEST
	t.equal(ui._state, ui._PRE_LESSON, "in PRE_LESSON state before next()");
	t.ok(check.object(ui._title_screen), "title screen is still defined");
	t.ok(check.undefined(ui._array_screen), "array screen is not yet defined");
	
	//find out how many children the canvas container has, so we can compare it post-append of the text input
	var canvas_container = document.getElementById('canvas_container');
	var initial_number_children_in_canvas = canvas_container.childNodes.length;
	
	t.ok(ui._stage.contains(ui._title_screen), "title screen is on the stage");
	
	//SETUP
	ui.next();
	
	//POST-TEST
	t.equal(ui._state, ui._LESSON, "now in the LESSON state, after next()");
	t.ok(check.undefined(ui._title_screen), "title screen de-allocated");
	t.ok(check.object(ui._array_screen), "created the array screen");
	t.ok(check.object(ui._text_input), "... the text input");
	t.ok(check.object(ui._next_button), "... the next button");
	t.ok(check.object(ui._text_output), "... and the text output");
	t.ok(ui._array_screen.children.length >= 3, "the text input, text output and next buttons are present on the array screen")
	
	t.equal(canvas_container.childNodes.length, initial_number_children_in_canvas + 1, "text input has been added to the HTML");
	
	t.ok(ui._stage.contains(ui._array_screen), "we can see the array screen on the stage");
	t.notOk(ui._stage.contains(ui._title_screen), "title screen has left the stage");
	
	//CLEANUP
	TEARDOWN();
	t.end();
});

test('[lesson_UI.next] _PRE_LESSON state (live) (with lesson)', function (t) {
	//SETUP
	SETUP();
	
	var mock_lesson_called = false;
	var args_to_mock_lesson;
	function mock_lesson(args) {
		mock_lesson_called = true;
		
		//DEBUG
		//console.log(args);
		
		args_to_mock_lesson = args.UI;
	};
	
	var ui = lesson_UI({lesson:mock_lesson});
	
	ui.next();
	
	//TEST
	t.equal(ui._state, ui._LESSON, "now in the LESSON state, after next()");
	t.ok(mock_lesson_called, "called the lesson");
	t.ok(check.object(args_to_mock_lesson), "and saw the proxy object passed in");
	t.ok(args_to_mock_lesson.input, "and saw the proxy object passed in");
	t.ok(args_to_mock_lesson.output, "and saw the proxy object passed in");
	t.ok(args_to_mock_lesson.next_button, "and saw the proxy object passed in");
	t.ok(args_to_mock_lesson.stage, "and saw the proxy object passed in");
	
	//CLEANUP
	TEARDOWN();
	t.end();
});

test('[lesson_UI._setup_array_screen] correct', function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	var primitives = require("lib/util/primitives");
	
	var mock_this = {
		_lib : primitives.get('lib'),
	};
	
	//TEST
	var result = lesson_UI.prototype._setup_array_screen.call(mock_this);
	
	t.ok(check.object(result), 'made a new array screen object');
	t.ok(check.not.undefined(result.x), 'defined the x');
	t.ok(check.not.undefined(result.y), 'and the y');
	
	//CLEANUP
	TEARDOWN();
});

test('[lesson_UI._setup_text_input] correct', function (t) {
	//SETUP
	SETUP();
	
	//TEST
	var result = lesson_UI.prototype._setup_text_input();
	
	t.ok(result.x !== 0, "positioned, x property");
	t.ok(result.y !== 0, "positioned, y property");
	t.ok(check.object(result._));
	t.ok(check.function(result._.get), "defined get()");
	t.ok(check.function(result._.set), "defined set()");
	t.ok(check.function(result._.clear), "defined clear()");
	
	//CLEANUP
	TEARDOWN();
	t.end();
});

test('[lesson_UI._setup_text_input -> get], correct default', function (t) {
	t.plan(1);
	
	//SETUP
	SETUP();
	
	//TEST
	var result = lesson_UI.prototype._setup_text_input();
	t.ok(Number.isNaN(result._.get()), 'the text input should be empty, so an empty string should be NaN');
	
	TEARDOWN();
});

test('[lesson_UI._setup_text_input -> get], correct, number input', function (t) {
	t.plan(1);
	
	//SETUP
	SETUP();
	
	//TEST
	var result = lesson_UI.prototype._setup_text_input();
	
	result.children[0].htmlElement.value = 2;
	
	t.equal(result._.get(), 2, 'should get back 2');
	
	TEARDOWN();
});

test('[lesson_UI._setup_text_input -> get], incorrect, string', function (t) {
	t.plan(1);
	
	//SETUP
	SETUP();
	
	//TEST
	var result = lesson_UI.prototype._setup_text_input();
	
	result.children[0].htmlElement.value = 'a';
	
	t.ok(Number.isNaN(result._.get()), 'shold get back NaN on non-numeric input');
	
	TEARDOWN();
});

test('[lesson_UI._setup_text_input -> get], incorrect, undefined', function (t) {
	t.plan(1);
	
	//SETUP
	SETUP();
	
	//TEST
	var result = lesson_UI.prototype._setup_text_input();
	
	result.children[0].htmlElement.value = undefined;
	
	t.ok(Number.isNaN(result._.get()), 'shold get back NaN on non-numeric input');
	
	TEARDOWN();
});

test('[lesson_UI._setup_text_input -> set], correct', function (t) {
	t.plan(1);
	
	//SETUP
	SETUP();
	
	//TEST
	var result = lesson_UI.prototype._setup_text_input();
	
	result._.set('some value');
	
	t.equal(result.children[0].htmlElement.value, 'some value', "should see 'some value' as the text in the text input");
	
	TEARDOWN();
});

test('[lesson_UI._setup_text_input -> clear], correct', function (t) {
	t.plan(1);
	
	//SETUP
	SETUP();
	
	//TEST
	var result = lesson_UI.prototype._setup_text_input();
	
	result.children[0].htmlElement.value = "some mock value";
	result._.clear();
	
	t.equal(result.children[0].htmlElement.value, '', "input should be empty after a clear");
	
	TEARDOWN();
});

test('[lesson_UI._setup_next_button], correct', function (t) {
	t.plan(2);
	
	//SETUP
	SETUP();	
	
	//TEST
	var result = lesson_UI.prototype._setup_next_button();
	
	t.ok(check.object(result), "created the next button");
	t.ok(result.children[0].hasEventListener("click"), "attached a 'click' event listener to the shape");
	
	TEARDOWN();
});

test('[lesson_UI._setup_next_button], correct, properties set on _insert_button', function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	//TEST
	var result = lesson_UI.prototype._setup_next_button();
	
	t.ok(result.x !== 0, "x property set");
	t.ok(result.y !== 0, "y property set");
	t.ok(check.object(result._.pub_sub), "decorated pub_sub");
	
	TEARDOWN();
});

test('[lesson_UI._setup_next_button], correct, testing pub_sub', function (t) {
	t.plan(2);
	
	//SETUP
	SETUP();
	
	//TEST
	var result = lesson_UI.prototype._setup_next_button();
	
	var pub_sub = result._.pub_sub;
	
	pub_sub.subscribe("click", function(msg) {
		t.ok(true, "saw a click event");
		t.equal("click.next_button", msg, "click event from the next button");
		
		TEARDOWN();
		pub_sub.clearAllSubscriptions();
	});
	
	result.children[0].dispatchEvent(new createjs.Event("click"));
});

test('[lesson_UI._setup_text_output], correct', function (t) {
	//SETUP
	SETUP();
	
	//TEST
	var result = lesson_UI.prototype._setup_text_output();
	
	//t.ok(called_addChild, "added to array_screen");
	t.ok(check.instanceStrict(result, createjs.Text), "should get back a Text object");
	t.ok(result.x !== 0, "should be positioned, x");
	t.ok(result.y !== 0, "should be positioned, y");
	t.ok(check.object(result._), "should have the '_' namespace");
	t.ok(check.function(result._.set), "decorated convenience method, set");
	t.ok(check.function(result._.get), "decorated convenience method, get");
	t.ok(check.function(result._.clear), "decorated convenience method, clear");
	
	TEARDOWN();
	t.end();
});

test('[lesson_UI._setup_text_output -> methods], correct', function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	//TEST
	var result = lesson_UI.prototype._setup_text_output();
	
	result.text = "some string";
	
	t.equal(result._.get(), "some string", "get() works");
	
	result._.set('some other string');
	
	t.equal(result._.get(), 'some other string', "set() works");
	
	result._.clear();
	
	t.equal(result._.get(), '', "clear() works");
	
	TEARDOWN();
});

test('[lesson_UI._text_input_to_canvas] correct',  function (t) {
	//SETUP
	
	SETUP();
	
	var mock_this = {
		_state : undefined,
		_INIT : 0,
		_PRE_LESSON : 1,
		_LESSON : 2,
		
		_text_input : {
			_ : {
				get : function() {
					return "0";
				},
				clear : function() {},
			},
			x : 0,
			y : 0,
		},
	};
	mock_this._state = mock_this._LESSON;
	
	//TEST
	var result = lesson_UI.prototype._text_input_to_canvas.call(mock_this);
	
	t.ok(check.instanceStrict(result, createjs.Text), "got back a Text object");
	t.equal(result.text, "0", "its value matches what was taken from the text input")
	t.equal(result.x, mock_this._text_input.x, "should be positioned under the text input");
	t.ok(result.y > mock_this._text_input.y, "should be positioned under the text input");
	
	TEARDOWN();
	
	t.end();
});

test('[lesson_UI._text_input_to_canvas] incorrect, bad input', function (t) {
	//SETUP
	
	SETUP();
	
	var mock_this = {
		_state : undefined,
		_INIT : 0,
		_PRE_LESSON : 1,
		_LESSON : 2,
		
		_text_input : {
			_ : {
				get : function() {
					return Number.NaN;
				},
				clear : function() {},
			},
			x : 0,
			y : 0,
		},
	};
	mock_this._state = mock_this._LESSON;
	
	//TEST
	var result = lesson_UI.prototype._text_input_to_canvas.call(mock_this);
	
	t.ok(check.undefined(result), "saw bad input, so does nothing");
	
	TEARDOWN();
	
	t.end();
});

test('[lesson_UI._text_input_to_canvas] incorrect, wrong state', function (t) {
	//SETUP
	
	SETUP();
	
	var mock_this = {
		_state : undefined,
		_INIT : 0,
		_PRE_LESSON : 1,
		_LESSON : 2,
		
		_text_input : {
			_ : {
				get : function() {
					return Number.NaN;
				},
				clear : function() {},
			},
			x : 0,
			y : 0,
		},
	};
	//mock_this._state = mock_this._LESSON;
	
	//TEST
	var result = lesson_UI.prototype._text_input_to_canvas.call(mock_this);
	
	t.ok(check.undefined(result), "wrong state, so does nothing");
	
	TEARDOWN();
	
	t.end();
});

test('[lesson_UI.get_proxy] incorrect, wrong state', function (t) {
	//SETUP
	
	SETUP();
	
	var mock_this = {
		_state : undefined,
		_INIT : 0,
		_PRE_LESSON : 1,
		_LESSON : 2,
	};
	//mock_this._state = mock_this._LESSON;
	
	//TEST
	var result = lesson_UI.prototype.get_proxy.call(mock_this);
	
	t.ok(check.undefined(result), "wrong state, so does nothing");
	
	TEARDOWN();
	
	t.end();
});

test('[lesson_UI.get_proxy] correct', function (t) {
	//SETUP
	SETUP();
	
	var lesson_UI = require('lib/UI/lesson_UI');
	var UI = lesson_UI();
	UI.next();	//get the testing lesson_UI into the LESSON state, so that get_proxy() works
	var ui = UI.get_proxy();
	
	function validate_properties(options) {
		var prefix = "";
		if (!options.prefix) prefix = options.prefix;
		
		for (property in options.obj) {
			t.ok(check.not.undefined(options.obj[property]), String(options.name) + "." + String(property) + " set");
		}
	};
	
	//TEST
	validate_properties({obj:ui, name:"ui"});
	validate_properties({obj:ui.input, name:"ui.input"});
	validate_properties({obj:ui.output, name:"ui.output"});
	validate_properties({obj:ui.stage, name:"ui.stage"});
	validate_properties({obj:ui.pub_sub, name:"ui.pub_sub"});
	
	TEARDOWN();
	t.end();
});

test('[lesson_UI.get_proxy -> stage.add()] correct', function (t) {
	//SETUP
	SETUP();
	
	var lesson_UI = require('lib/UI/lesson_UI');
	var UI = lesson_UI();
	UI.next();	//get the testing lesson_UI into the LESSON state, so that get_proxy() works
	var ui = UI.get_proxy();
		
	//TEST
	var pre_add = UI._array_screen.children.length;
	ui.stage.add(new createjs.Container());
	t.ok(UI._array_screen.children.length > pre_add, "saw the new child in the array screen");
	
	//END
	TEARDOWN();
	t.end();
});

test('[lesson_UI.get_proxy -> stage.add()] incorrect, not right type', function (t) {
	//SETUP
	SETUP();
	
	var lesson_UI = require('lib/UI/lesson_UI');
	var UI = lesson_UI();
	UI.next();	//get the testing lesson_UI into the LESSON state, so that get_proxy() works
	var ui = UI.get_proxy();
		
	//TEST
	try {
		ui.stage.add("some bad object");
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/should be createjs.DisplayObject/), 'tells you how to fix it');
		t.ok(message.match(/Bad argument/), 'defined what was wrong');
	}
	
	//END
	TEARDOWN();
	t.end();
});

test('[lesson_UI.get_proxy -> stage.del()] correct', function (t) {
	//SETUP
	SETUP();
	
	var lesson_UI = require('lib/UI/lesson_UI');
	var UI = lesson_UI();
	UI.next();	//get the testing lesson_UI into the LESSON state, so that get_proxy() works
	var ui = UI.get_proxy();
		
	//TEST
	var new_thing = new createjs.Container()
	UI._array_screen.addChild(new_thing);
	ui.stage.del(new_thing);
	
	t.equal(UI._array_screen.getChildIndex(new_thing), -1, "the new child is no longer in the array screen");
	
	//END
	TEARDOWN();
	t.end();
});

test('[lesson_UI.get_proxy -> stage.del()] incorrect, not found', function (t) {
	//SETUP
	SETUP();
	
	var lesson_UI = require('lib/UI/lesson_UI');
	var UI = lesson_UI();
	UI.next();	//get the testing lesson_UI into the LESSON state, so that get_proxy() works
	var ui = UI.get_proxy();
		
	//TEST
	var new_thing = new createjs.Container()
	t.notOk(ui.stage.del(new_thing), "shows that could not remove child from array screen, as was not present");
	
	//END
	TEARDOWN();
	t.end();
});

test('[lesson_UI.get_proxy -> self variables] correct', function (t) {
	//SETUP
	SETUP();
	
	var lesson_UI = require('lib/UI/lesson_UI');
	var UI = lesson_UI();
	UI.next();	//get the testing lesson_UI into the LESSON state, so that get_proxy() works
	var ui = UI.get_proxy();
		
	//TEST
	t.deepEqual(ui.input.self, UI._text_input, "text input is valid");
	t.deepEqual(ui.output.self, UI._text_output, "text output is valid");
	
	//END
	TEARDOWN();
	t.end();
});

//tail