var lesson_UI = require('lib/UI/lesson_UI');
var test = require('tape');
var check = require('check-types');

function SETUP() {
	//checks each required primitive, if unset, then sets it to some mock value
	//	if set, then it was set by the live UI and use that for testing
	var primitives = require("lib/util/primitives");
	
	if (check.undefined(primitives.get('createjs'))) {
		primitives.set('createjs', createjs);
	}
	
	if (check.undefined(primitives.get('stage'))) {
		var canvas = document.getElementsByTagName('canvas')[0];
		var stage = new createjs.Stage(canvas);
		primitives.set('stage', stage);
	}
	
	if (check.undefined(primitives.get('lib'))) {
		var mock_lib = {
			TitleScreen : function() {
				return {
					insert_btn : {
						addEventListener : function() {},
					},
					gotoAndPlay : function() {},
				};
			},
			ArrayScreen : function() {
				return {};
			},
			ArrayElement : function() {
				var ae = new createjs.Shape();
				ae.index_txt = {
					text : '',
				};
				
				return ae;
			},
		};
		
		primitives.set('lib', mock_lib);
	}
}

function TEARDOWN() {
	var primitives = require("lib/util/primitives");
	var stage = primitives.get('stage');
	
	//reset the stage
	stage.clear();
	stage.removeAllChildren();
	
	//delete the text input created by lesson_UI
	var div = document.getElementById('canvas_container');
	//	find the input control
	var input_index;
	for (var i = 0; i < div.children.length; i++) {
		if (div.children[i].type === "text") {
			//don't delete inside the array while iterating over it
			input_index = i;
		}
	};
	//if there was a text input, then delete it
	if (input_index) {
		div.removeChild(div.children[input_index]);
	}
};

test("[lesson_UI] incorrect, 'stage' wrong type", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	var primitives = require("lib/util/primitives");
	var stage_backup = primitives.get('stage');
	primitives.set('stage', '');
	
	//TEST
	try {
		lesson_UI();
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/stage/), 'checking for an object in primitives');
		t.ok(message.match(/undefined or not object in primitives object/), 'defined what was wrong');
	}
	
	//CLEANUP
	primitives.set('stage', stage_backup);
	
	TEARDOWN();
});

test("[lesson_UI] incorrect, 'stage' unset", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	var primitives = require("lib/util/primitives");
	var stage_backup = primitives.get('stage');
	primitives.delete('stage');
	
	//TEST
	try {
		lesson_UI();
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/stage/), 'checking for an object in primitives');
		t.ok(message.match(/undefined or not object in primitives object/), 'defined what was wrong');
	}
	
	//CLEANUP
	primitives.set('stage', stage_backup);
	
	TEARDOWN();
});

test("[lesson_UI] incorrect, 'lib' wrong type", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	var primitives = require("lib/util/primitives");
	var lib_backup = primitives.get('lib');
	primitives.set('lib', '');
	
	//TEST
	try {
		lesson_UI();
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/lib/), 'checking for an object in primitives');
		t.ok(message.match(/undefined or not object in primitives object/), 'defined what was wrong');
	}
	
	//CLEANUP
	primitives.set('lib', lib_backup);
	
	TEARDOWN();
});

test("[lesson_UI] incorrect, 'lib' unset", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	var primitives = require("lib/util/primitives");
	var lib_backup = primitives.get('lib');
	primitives.delete('lib');
	
	//TEST
	try {
		lesson_UI();
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/lib/), 'checking for an object in primitives');
		t.ok(message.match(/undefined or not object in primitives object/), 'defined what was wrong');
	}
	
	//CLEANUP
	primitives.set('lib', lib_backup);
	
	TEARDOWN();
});

test("[lesson_UI] incorrect, 'createjs' wrong type", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	var primitives = require("lib/util/primitives");
	var createjs_backup = primitives.get('createjs');
	primitives.set('createjs', '');
	
	//TEST
	try {
		lesson_UI();
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/createjs/), 'checking for an object in primitives');
		t.ok(message.match(/undefined or not object in primitives object/), 'defined what was wrong');
	}
	
	//CLEANUP
	primitives.set('createjs', createjs_backup);
	
	TEARDOWN();
});

test("[lesson_UI] incorrect, 'createjs' unset", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	var primitives = require("lib/util/primitives");
	var createjs_backup = primitives.get('createjs');
	primitives.delete('createjs');
	
	//TEST
	try {
		lesson_UI();
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/createjs/), 'checking for an object in primitives');
		t.ok(message.match(/undefined or not object in primitives object/), 'defined what was wrong');
	}
	
	//CLEANUP
	primitives.set('createjs', createjs_backup);
	
	TEARDOWN();
});

test('[lesson_UI._setup_title_screen] correct', function (t) {
	t.plan(4);
	
	//SETUP
	SETUP();
	var primitives = require("lib/util/primitives");
	
	var add_child_called = false;
	var mock_this = {
		_title_screen : undefined,
		_stage : {
			addChild : function() {
				add_child_called = true;
			}
		},
		_lib : primitives.get('lib'),
	};
	
	//TEST
	lesson_UI.prototype._setup_title_screen.call(mock_this);
	
	t.ok(check.object(mock_this._title_screen), 'a title screen object was defined');
	t.ok(check.not.undefined(mock_this._title_screen.x), 'defined the x');
	t.ok(check.not.undefined(mock_this._title_screen.y), 'and the y');
	t.ok(add_child_called, 'added the title screen to the stage');
	
	//CLEANUP
	TEARDOWN();
});

test('[lesson_UI._setup_start_button] correct', function (t) {
	t.plan(2);
	
	//SETUP
	SETUP();
	var addEventListener_called = false;
	var mock_this = {
		_title_screen : {
			insert_btn : {
				addEventListener : function() {
					addEventListener_called = true;
				},
			},
			
		},
	};
	
	//TEST
	lesson_UI.prototype._setup_start_button.call(mock_this);
	
	t.ok(check.object(mock_this._start_button), 'made a local reference to the insert button on the title screen');
	t.ok(addEventListener_called, 'put an event listener on the insert button');
	
	//CLEANUP
	TEARDOWN();
});

test('[lesson_UI._setup_array_screen] correct', function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	var primitives = require("lib/util/primitives");
	
	var mock_this = {
		_lib : primitives.get('lib'),
	};
	
	//TEST
	lesson_UI.prototype._setup_array_screen.call(mock_this);
	
	t.ok(check.object(mock_this._array_screen), 'made a new array screen object');
	t.ok(check.not.undefined(mock_this._array_screen.x), 'defined the x');
	t.ok(check.not.undefined(mock_this._array_screen.y), 'and the y');
	
	//CLEANUP
	TEARDOWN();
});

test('[lesson_UI] correct', function (t) {
	//SETUP
	SETUP();
	
	//TEST
	var ui = lesson_UI();
		
	//state should be pre-lesson, so things that are setup before the lesson should be present
	t.equal(ui._state, ui._PRE_LESSON, 'in pre-lesson after constructor call');
	t.ok(check.not.undefined(ui._title_screen), "title screen setup");
	t.ok(check.not.undefined(ui._start_button), "start button setup");
	t.ok(check.not.undefined(ui._array_screen), "array screen setup");
	t.ok(check.not.undefined(ui._array), "initial array setup");
	t.ok(check.not.undefined(ui._tail_arrow), "tail arrow on the array setup");
	
	//CLEANUP
	TEARDOWN();
	t.end();
});

test('[lesson_UI.next] INIT state', function (t) {
	t.plan(6);
	
	//SETUP
	SETUP();
	var _title_screen_gotoAndPlay_called = false;
	var _array_screen_gotoAndPlay_called = false;
	var _array_screen_addChild_called = false;
	var _stage_addChild_called = false;
	var next_called = false;
	var mock_this = {
		_INIT : 0,
		_PRE_LESSON : 1,
		_LESSON : 2,
		_state : undefined,
		
		_title_screen : {
			gotoAndPlay : function() {
				_title_screen_gotoAndPlay_called = true;
			},
		},
		next : function() {
			next_called = true;
		},
		_array_screen : {
			gotoAndPlay : function() {
				_array_screen_gotoAndPlay_called = true;
			},
			addChild : function() {
				_array_screen_addChild_called = true;
			},
		},
		_stage : {
			addChild : function() {
				_stage_addChild_called = true;
			},
		},
	};
	mock_this._state = mock_this._INIT;
	
	//TEST
	var result = lesson_UI.prototype.next.call(mock_this);
	
	//should not change state on INIT
	t.notOk(_title_screen_gotoAndPlay_called);
	t.notOk(_array_screen_gotoAndPlay_called);
	t.notOk(_array_screen_addChild_called);
	t.notOk(_stage_addChild_called);
	t.notOk(next_called);
	t.equal(mock_this._state, lesson_UI.prototype._INIT);
	
	//CLEANUP
	TEARDOWN();
});

test('[lesson_UI.next] _PRE_LESSON state', function (t) {
	//SETUP
	SETUP();
	
	//TEST
	var _title_screen_gotoAndPlay_called = false;
	var _array_screen_gotoAndPlay_called = false;
	var _array_screen_addChild_called = false;
	var _stage_addChild_called = false;
	var _setup_text_input_called = false;
	var _setup_insert_button_called = false;
	var _setup_next_button_called = false;
	var _setup_text_output_called = false;
	
	var ui = lesson_UI();
	ui._array_screen = {
		gotoAndPlay : function() {
			_array_screen_gotoAndPlay_called = true;
		},
		addChild : function() {
			_array_screen_addChild_called = true;
		},
	};
	ui._stage = {
		addChild : function() {
			_stage_addChild_called = true;
		},
	};
	var _setup_text_input_backup = ui._setup_text_input;
	ui._setup_text_input = function() {
		_setup_text_input_called = true;
		_setup_text_input_backup.call(ui);
	};
	
	var _setup_insert_button_backup = ui._setup_insert_button;
	ui._setup_insert_button = function() {
		_setup_insert_button_called = true;
		_setup_insert_button_backup.call(ui);
	};
	
	var _setup_next_button_backup = ui._setup_next_button;
	ui._setup_next_button = function() {
		_setup_next_button_called = true;
		_setup_next_button_backup.call(ui);
	};
	
	var _setup_text_output_backup = ui._setup_text_output;
	ui._setup_text_output = function() {
		_setup_text_output_called = true;
		_setup_text_output_backup.call(ui);
	};
	
	ui.next();
	
	t.notOk(_title_screen_gotoAndPlay_called, 'NOT closing the title screen on this step');
	t.ok(_array_screen_gotoAndPlay_called);
	t.ok(_array_screen_addChild_called);
	t.ok(_stage_addChild_called);
	t.ok(_setup_text_input_called);
	t.ok(_setup_insert_button_called);
	t.ok(_setup_next_button_called);
	t.ok(_setup_text_output_called);
	t.equal(ui._state, lesson_UI.prototype._LESSON);
	
	//CLEANUP
	TEARDOWN();
	t.end();
});

test('[lesson_UI._setup_text_input] correct', function (t) {
	//SETUP
	SETUP();
	
	var _array_screen_addChild_called = false;
	var mock_this = {
		_array_screen : {
			addChild : function() {
				_array_screen_addChild_called = true;
			},
		},
		_text_input : undefined,
	};
	
	//TEST
	var canvas_container = document.getElementById('canvas_container');
	var initial_number_children_in_canvas = canvas_container.childNodes.length;
	
	lesson_UI.prototype._setup_text_input.call(mock_this);
	
	t.equal(canvas_container.childNodes.length, initial_number_children_in_canvas + 1, "then one larger once we add the text input");
	
	t.ok(_array_screen_addChild_called, "added text input to array screen");
	
	t.ok(check.not.undefined(mock_this._text_input), "saw the refrence to the text input");
	
	t.ok(mock_this._text_input.x !== 0, "positioned, x property");
	t.ok(mock_this._text_input.y !== 0, "positioned, y property");
	
	//CLEANUP
	TEARDOWN();
	t.end();
});

test('[lesson_UI._setup_text_input -> get] correct', function (t) {
	t.plan(1);
	
	//SETUP
	SETUP();
	
	var mock_this = {
		_array_screen : {
			addChild : function() {},
		},
		_text_input : undefined,
	};
	
	//TEST
	lesson_UI.prototype._setup_text_input.call(mock_this);
	t.ok(check.function(mock_this._text_input._.get), 'get value should be set');
	
	//CLEANUP
	TEARDOWN();
});

test('[lesson_UI._setup_text_input -> get], correct default', function (t) {
	t.plan(1);
	
	//SETUP
	SETUP();
	
	var mock_this = {
		_array_screen : {
			addChild : function() {},
		},
		_text_input : undefined,
	};
	
	//TEST
	lesson_UI.prototype._setup_text_input.call(mock_this);
	t.ok(Number.isNaN(mock_this._text_input._.get()), 'the text input should be empty, so an empty string should be NaN');
	
	TEARDOWN();
});

test('[lesson_UI._setup_text_input -> get], correct, number input', function (t) {
	t.plan(1);
	
	//SETUP
	SETUP();
	
	var mock_this = {
		_array_screen : {
			addChild : function() {},
		},
		_text_input : undefined,
	};
	
	//TEST
	lesson_UI.prototype._setup_text_input.call(mock_this);
	
	mock_this._text_input.children[0].htmlElement.value = 2;
	
	t.equal(mock_this._text_input._.get(), 2, 'should get back 2');
	
	TEARDOWN();
});

test('[lesson_UI._setup_text_input -> get], incorrect, string', function (t) {
	t.plan(1);
	
	//SETUP
	SETUP();
	
	var mock_this = {
		_array_screen : {
			addChild : function() {},
		},
		_text_input : undefined,
	};
	
	//TEST
	lesson_UI.prototype._setup_text_input.call(mock_this);
	
	mock_this._text_input.children[0].htmlElement.value = 'a';
	
	t.ok(Number.isNaN(mock_this._text_input._.get()), 'shold get back NaN on non-numeric input');
	
	TEARDOWN();
});

test('[lesson_UI._setup_text_input -> get], incorrect, undefined', function (t) {
	t.plan(1);
	
	//SETUP
	SETUP();
	
	var mock_this = {
		_array_screen : {
			addChild : function() {},
		},
		_text_input : undefined,
	};
	
	//TEST
	lesson_UI.prototype._setup_text_input.call(mock_this);
	
	mock_this._text_input.children[0].htmlElement.value = undefined;
	
	t.ok(Number.isNaN(mock_this._text_input._.get()), 'shold get back NaN on non-numeric input');
	
	TEARDOWN();
});

test('[lesson_UI._setup_text_input -> set], correct', function (t) {
	t.plan(1);
	
	//SETUP
	SETUP();
	
	var mock_this = {
		_array_screen : {
			addChild : function() {},
		},
		_text_input : undefined,
	};
	
	//TEST
	lesson_UI.prototype._setup_text_input.call(mock_this);
	
	mock_this._text_input._.set('some value');
	
	t.equal(mock_this._text_input.children[0].htmlElement.value, 'some value', "should see 'some value' as the text in the text input");
	
	//t.ok(Number.isNaN(mock_this._text_input._.get_text_input_value()), 'shold get back NaN on non-numeric input');
	
	TEARDOWN();
});

test('[lesson_UI._setup_text_input -> clear], correct', function (t) {
	t.plan(1);
	
	//SETUP
	SETUP();
	
	var mock_this = {
		_array_screen : {
			addChild : function() {},
		},
		_text_input : undefined,
	};
	
	//TEST
	lesson_UI.prototype._setup_text_input.call(mock_this);
	
	mock_this._text_input.children[0].htmlElement.value = "some mock value";
	mock_this._text_input._.clear();
	
	t.equal(mock_this._text_input.children[0].htmlElement.value, '', "input should be empty after a clear");
	
	TEARDOWN();
});

test('[lesson_UI._setup_insert_button], correct', function (t) {
	t.plan(2);
	
	//SETUP
	SETUP();
	
	var called_addChild = false;
	var mock_this = {
		_array_screen : {
			addChild : function() {
				called_addChild = true;
			},
		},
		_insert_button : undefined,
	};
	
	//TEST
	lesson_UI.prototype._setup_insert_button.call(mock_this);
	
	t.ok(called_addChild, "added the insert button to the array_screen");
	t.ok(check.object(mock_this._insert_button), "created the insert button");
	
	TEARDOWN();
});

test('[lesson_UI._setup_insert_button], correct, properties set on _insert_button', function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	var called_addChild = false;
	var mock_this = {
		_array_screen : {
			addChild : function() {
				called_addChild = true;
			},
		},
		_insert_button : undefined,
	};
	
	//TEST
	lesson_UI.prototype._setup_insert_button.call(mock_this);
	
	t.ok(mock_this._insert_button.x !== 0, "x property set");
	t.ok(mock_this._insert_button.y !== 0, "y property set");
	t.ok(check.object(mock_this._insert_button._.pub_sub), "decorated pub_sub");
	
	TEARDOWN();
});

test('[lesson_UI._setup_insert_button], correct, testing pub_sub', function (t) {
	t.plan(2);
	
	//SETUP
	SETUP();
	
	var called_addChild = false;
	var mock_this = {
		_array_screen : {
			addChild : function() {
				called_addChild = true;
			},
		},
		_insert_button : undefined,
	};
	
	//TEST
	lesson_UI.prototype._setup_insert_button.call(mock_this);
	
	var pub_sub = mock_this._insert_button._.pub_sub;
	
	pub_sub.subscribe("click", function(msg) {
		t.ok(true, "saw a click event");
		t.equal("click.insert_button", msg, "click event from the insert button");
		
		TEARDOWN();
		pub_sub.clearAllSubscriptions();
	});
	
	mock_this._insert_button.children[0].dispatchEvent(new createjs.Event("click"));
});

test('[lesson_UI._setup_next_button], correct', function (t) {
	t.plan(2);
	
	//SETUP
	SETUP();
	
	var called_addChild = false;
	var mock_this = {
		_array_screen : {
			addChild : function() {
				called_addChild = true;
			},
		},
		_next_button : undefined,
	};
	
	//TEST
	lesson_UI.prototype._setup_next_button.call(mock_this);
	
	t.ok(called_addChild, "added the next button to the array_screen");
	t.ok(check.object(mock_this._next_button), "created the next button");
	
	TEARDOWN();
});

test('[lesson_UI._setup_next_button], correct, properties set on _insert_button', function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	var called_addChild = false;
	var mock_this = {
		_array_screen : {
			addChild : function() {
				called_addChild = true;
			},
		},
		_next_button : undefined,
	};
	
	//TEST
	lesson_UI.prototype._setup_next_button.call(mock_this);
	
	t.ok(mock_this._next_button.x !== 0, "x property set");
	t.ok(mock_this._next_button.y !== 0, "y property set");
	t.ok(check.object(mock_this._next_button._.pub_sub), "decorated pub_sub");
	
	TEARDOWN();
});

test('[lesson_UI._setup_next_button], correct, testing pub_sub', function (t) {
	t.plan(2);
	
	//SETUP
	SETUP();
	
	var called_addChild = false;
	var mock_this = {
		_array_screen : {
			addChild : function() {
				called_addChild = true;
			},
		},
		_next_button : undefined,
	};
	
	//TEST
	lesson_UI.prototype._setup_next_button.call(mock_this);
	
	var pub_sub = mock_this._next_button._.pub_sub;
	
	pub_sub.subscribe("click", function(msg) {
		t.ok(true, "saw a click event");
		t.equal("click.next_button", msg, "click event from the next button");
		
		TEARDOWN();
		pub_sub.clearAllSubscriptions();
	});
	
	mock_this._next_button.children[0].dispatchEvent(new createjs.Event("click"));
});

test('[lesson_UI._setup_text_output], correct', function (t) {
	t.plan(8);
	
	//SETUP
	SETUP();
	
	var called_addChild = false;
	var mock_this = {
		_array_screen : {
			addChild : function() {
				called_addChild = true;
			},
		},
		_next_button : {
			x : 0,
			y : 1,
			getBounds : function() {
				return {
					height : 1,
				};
			}
		},
		_text_output : undefined,
	};
	
	//TEST
	lesson_UI.prototype._setup_text_output.call(mock_this);
	
	t.ok(called_addChild, "added to array_screen");
	t.ok(check.instanceStrict(mock_this._text_output, createjs.Text), "should get back a Text object");
	t.ok(mock_this._text_output.x !== 0, "should be positioned, x");
	t.ok(mock_this._text_output.y !== 0, "should be positioned, y");
	t.ok(check.object(mock_this._text_output._), "should have the '_' namespace");
	t.ok(check.function(mock_this._text_output._.set), "decorated convenience method, set");
	t.ok(check.function(mock_this._text_output._.get), "decorated convenience method, get");
	t.ok(check.function(mock_this._text_output._.clear), "decorated convenience method, clear");
	
	TEARDOWN();
});

test('[lesson_UI._setup_text_output -> methods], correct', function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	var called_addChild = false;
	var mock_this = {
		_array_screen : {
			addChild : function() {
				called_addChild = true;
			},
		},
		_next_button : {
			x : 0,
			y : 1,
			getBounds : function() {
				return {
					height : 1,
				};
			}
		},
		_text_output : undefined,
	};
	
	//TEST
	lesson_UI.prototype._setup_text_output.call(mock_this);
	
	mock_this._text_output.text = "some string";
	
	t.equal(mock_this._text_output._.get(), "some string", "get() works");
	
	mock_this._text_output._.set('some other string');
	
	t.equal(mock_this._text_output._.get(), 'some other string', "set() works");
	
	mock_this._text_output._.clear();
	
	t.equal(mock_this._text_output._.get(), '', "clear() works");
	
	TEARDOWN();
});

test('[lesson_UI._setup_array] correct', function (t) {
	//SETUP
	
	SETUP();
	
	var mock_this = {};
	
	//TEST
	lesson_UI.prototype._setup_array.call(mock_this);
	
	t.ok(check.object(mock_this._array), 'made a new array object');
	t.ok(check.object(mock_this._tail_arrow), 'made a new arrow object');
	t.ok(check.not.undefined(mock_this._array.x), 'defined the x');
	t.ok(check.not.undefined(mock_this._array.y), 'and the y');
	
	TEARDOWN();
	
	t.end();
});

test('[lesson_UI._text_input_to_canvas] correct',  function (t) {
	//SETUP
	
	SETUP();
	
	var mock_this = {
		_state : undefined,
		_INIT : 0,
		_PRE_LESSON : 1,
		_LESSON : 2,
		
		_text_input : {
			_ : {
				get : function() {
					return "0";
				},
				clear : function() {},
			},
			x : 0,
			y : 0,
		},
	};
	mock_this._state = mock_this._LESSON;
	
	//TEST
	var result = lesson_UI.prototype._text_input_to_canvas.call(mock_this);
	
	t.ok(check.instanceStrict(result, createjs.Text), "got back a Text object");
	t.equal(result.text, "0", "its value matches what was taken from the text input")
	t.equal(result.x, mock_this._text_input.x, "should be positioned under the text input");
	t.ok(result.y > mock_this._text_input.y, "should be positioned under the text input");
	
	TEARDOWN();
	
	t.end();
});

test('[lesson_UI._text_input_to_canvas] incorrect, bad input', function (t) {
	//SETUP
	
	SETUP();
	
	var mock_this = {
		_state : undefined,
		_INIT : 0,
		_PRE_LESSON : 1,
		_LESSON : 2,
		
		_text_input : {
			_ : {
				get : function() {
					return Number.NaN;
				},
				clear : function() {},
			},
			x : 0,
			y : 0,
		},
	};
	mock_this._state = mock_this._LESSON;
	
	//TEST
	var result = lesson_UI.prototype._text_input_to_canvas.call(mock_this);
	
	t.ok(check.undefined(result), "saw bad input, so does nothing");
	
	TEARDOWN();
	
	t.end();
});

test('[lesson_UI._text_input_to_canvas] incorrect, wrong state', function (t) {
	//SETUP
	
	SETUP();
	
	var mock_this = {
		_state : undefined,
		_INIT : 0,
		_PRE_LESSON : 1,
		_LESSON : 2,
		
		_text_input : {
			_ : {
				get : function() {
					return Number.NaN;
				},
				clear : function() {},
			},
			x : 0,
			y : 0,
		},
	};
	//mock_this._state = mock_this._LESSON;
	
	//TEST
	var result = lesson_UI.prototype._text_input_to_canvas.call(mock_this);
	
	t.ok(check.undefined(result), "wrong state, so does nothing");
	
	TEARDOWN();
	
	t.end();
});

test('[lesson_UI.get_proxy] incorrect, wrong state', function (t) {
	//SETUP
	
	SETUP();
	
	var mock_this = {
		_state : undefined,
		_INIT : 0,
		_PRE_LESSON : 1,
		_LESSON : 2,
	};
	//mock_this._state = mock_this._LESSON;
	
	//TEST
	var result = lesson_UI.prototype.get_proxy.call(mock_this);
	
	t.ok(check.undefined(result), "wrong state, so does nothing");
	
	TEARDOWN();
	
	t.end();
});

test('[lesson_UI.get_proxy -> stage.add()] correct', function (t) {
	//SETUP
	SETUP();
	
	var lesson_UI = require('lib/UI/lesson_UI');
	var UI = lesson_UI();
	UI.next();	//get the testing lesson_UI into the LESSON state, so that get_proxy() works
	var ui = UI.get_proxy();
		
	//TEST
	var pre_add = UI._array_screen.children.length;
	ui.stage.add(new createjs.Container());
	t.ok(UI._array_screen.children.length > pre_add, "saw the new child in the array screen");
	
	//END
	TEARDOWN();
	t.end();
});

test('[lesson_UI.get_proxy -> stage.add()] incorrect, not right type', function (t) {
	//SETUP
	SETUP();
	
	var lesson_UI = require('lib/UI/lesson_UI');
	var UI = lesson_UI();
	UI.next();	//get the testing lesson_UI into the LESSON state, so that get_proxy() works
	var ui = UI.get_proxy();
		
	//TEST
	try {
		ui.stage.add("some bad object");
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/should be createjs.DisplayObject/), 'tells you how to fix it');
		t.ok(message.match(/Bad argument/), 'defined what was wrong');
	}
	
	//END
	TEARDOWN();
	t.end();
});

test('[lesson_UI.get_proxy -> stage.del()] correct', function (t) {
	//SETUP
	SETUP();
	
	var lesson_UI = require('lib/UI/lesson_UI');
	var UI = lesson_UI();
	UI.next();	//get the testing lesson_UI into the LESSON state, so that get_proxy() works
	var ui = UI.get_proxy();
		
	//TEST
	var new_thing = new createjs.Container()
	UI._array_screen.addChild(new_thing);
	ui.stage.del(new_thing);
	
	t.equal(UI._array_screen.getChildIndex(new_thing), -1, "the new child is no longer in the array screen");
	
	//END
	TEARDOWN();
	t.end();
});

test('[lesson_UI.get_proxy -> stage.del()] incorrect, not found', function (t) {
	//SETUP
	SETUP();
	
	var lesson_UI = require('lib/UI/lesson_UI');
	var UI = lesson_UI();
	UI.next();	//get the testing lesson_UI into the LESSON state, so that get_proxy() works
	var ui = UI.get_proxy();
		
	//TEST
	var new_thing = new createjs.Container()
	t.notOk(ui.stage.del(new_thing), "shows that could not remove child from array screen, as was not present");
	
	//END
	TEARDOWN();
	t.end();
});

//tail