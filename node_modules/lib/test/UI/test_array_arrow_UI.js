var array_arrow_UI = require('lib/UI/array_arrow_UI');
var test = require('tape');
var check = require('check-types');

function SETUP() {
	var lesson_UI = require('lib/UI/lesson_UI');
	var UI = lesson_UI();
	UI.next();	//get the testing lesson_UI into the LESSON state, so that get_proxy() works
	return UI.get_proxy();
}

function TEARDOWN() {
	var primitives = require("lib/util/primitives");
	var stage = primitives.get('stage');
	
	//reset the stage
	stage.clear();
	stage.removeAllChildren();
	
	//delete the text input created by lesson_UI
	var div = document.getElementById('canvas_container');
	//	find the input control
	var input_index;
	for (var i = 0; i < div.children.length; i++) {
		if (div.children[i].type === "text") {
			//don't delete inside the array while iterating over it
			input_index = i;
		}
	};
	
	//if there was a text input, then delete it
	if (input_index) {
		div.removeChild(div.children[input_index]);
	}
	
	//clear the pub sub
	var pub_sub = require('pubsub-js');
	pub_sub.clearAllSubscriptions();
};

TEARDOWN();

test("[array_arrow_UI] incorrect, 'createjs' wrong type", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	var primitives = require("lib/util/primitives");
	var createjs_backup = primitives.get('createjs');
	primitives.set('createjs', '');
	
	//TEST
	try {
		array_arrow_UI();
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/createjs/), 'checking for an object in primitives');
		t.ok(message.match(/undefined or not object in primitives object/), 'defined what was wrong');
	}
	
	//CLEANUP
	primitives.set('createjs', createjs_backup);
	
	TEARDOWN();
});

test("[array_arrow_UI] incorrect, 'createjs' unset", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	var primitives = require("lib/util/primitives");
	var createjs_backup = primitives.get('createjs');
	primitives.delete('createjs');
	
	//TEST
	try {
		array_arrow_UI();
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/createjs/), 'checking for an object in primitives');
		t.ok(message.match(/undefined or not object in primitives object/), 'defined what was wrong');
	}
	
	//CLEANUP
	primitives.set('createjs', createjs_backup);
	
	TEARDOWN();
});

test("[array_arrow_UI] incorrect, no argument", function (t) {
	t.plan(2);
	
	//SETUP
	SETUP();
	
	//TEST
	try {
		array_arrow_UI();
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Require argument object/), "tells you what's wrong");
	}
	
	TEARDOWN();
});

test("[array_arrow_UI] incorrect, argument object, but no properties", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	//TEST
	try {
		array_arrow_UI({});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Require argument object with property 'name'/), "tells you what's wrong");
		t.ok(message.match(/should be String/), "and what type should be");
		
		console.log(error);
	}
	
	TEARDOWN();
});

test("[array_arrow_UI] incorrect, argument object, with name property, but wrong type", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	//TEST
	try {
		array_arrow_UI({name:0});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Require argument object with property 'name'/), "tells you what's wrong");
		t.ok(message.match(/should be String/), "and what type should be");
	}
	
	TEARDOWN();
});

test("[array_arrow_UI] incorrect, argument object, name correct, but array undefined", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	//TEST
	try {
		array_arrow_UI({name:"test"});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Required argument 'array'/), "tells you what's wrong");
		t.ok(message.match(/should be array_UI/), "and what type should be");
	}
	
	TEARDOWN();
});

test("[array_arrow_UI] incorrect, argument object, name correct, but array wrong type", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	//TEST
	try {
		array_arrow_UI({name:"test", array:"some bad type"});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Required argument 'array'/), "tells you what's wrong");
		t.ok(message.match(/should be array_UI/), "and what type should be");
	}
	
	TEARDOWN();
});

test("[array_arrow_UI] incorrect, argument object, name correct, array correct, index wrong type", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:1});
	
	//TEST
	try {
		array_arrow_UI({name:"test", array:array, index:"some bad type"});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Argument 'index'/), "tells you what's wrong");
		t.ok(message.match(/should be integer and in bounds on the array/), "and what type should be");
	}
	
	TEARDOWN();
});

test("[array_arrow_UI] incorrect, argument object, name correct, array correct, index bad value", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:1});
	
	//TEST
	try {
		array_arrow_UI({name:"test", array:array, index:-1});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Argument 'index'/), "tells you what's wrong");
		t.ok(message.match(/should be integer and in bounds on the array/), "and what type should be");
	}
	
	TEARDOWN();
});

test("[array_arrow_UI] incorrect, argument object, name correct, array correct, index bad value", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:1});
	
	//TEST
	try {
		array_arrow_UI({name:"test", array:array, index:2});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Argument 'index'/), "tells you what's wrong");
		t.ok(message.match(/should be integer and in bounds on the array/), "and what type should be");
	}
	
	TEARDOWN();
});

test("[array_arrow_UI] correct, non-default index", function (t) {
	t.plan(1);
	
	//SETUP
	SETUP();
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:1});
	
	//TEST
	var result = array_arrow_UI({name:"test", array:array, index:1});
	
	t.ok(check.instanceStrict(result, createjs.Container), "got back a container");
	
	TEARDOWN();
});

test("[array_arrow_UI] correct, default index", function (t) {
	t.plan(1);
	
	//SETUP
	SETUP();
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:1});
	
	//TEST
	var result = array_arrow_UI({name:"test", array:array});
	
	t.ok(check.instanceStrict(result, createjs.Container), "got back a container");
	
	TEARDOWN();
});

test('[array_arrow_UI._make_arrow], correct', function (t) {
	t.plan(4);
	
	//SETUP
	SETUP();
	
	var primitives = require("lib/util/primitives");
	var mock_this = {
		_createjs : primitives.get('createjs'),
	};
	
	//TEST
	var result = array_arrow_UI.prototype._make_arrow.call(mock_this, "test");
	
	t.ok(check.instanceStrict(result, createjs.Container), "got back a container");
	t.ok(check.instanceStrict(result.children[0], createjs.Container), "first child is the container holding the arrow");
	t.ok(check.instanceStrict(result.children[1], createjs.Text), "second child is the label");
	t.equal(result.children[1].text, "test", "and the label should be the string we passed");
	
	TEARDOWN();
});

test('[array_arrow_UI._decorate_set], correct', function (t) {
	//SETUP
	SETUP();
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:2});
	
	var mock_this = {};
	var mock_options = {
		array : array,
	}
	var mock_arrow = {
		_ : {},
	};
	
	//TEST
	var result = array_arrow_UI.prototype._decorate_set.call(mock_this, mock_arrow, mock_options);
	t.ok(check.function(result._.set));
	
	TEARDOWN();
	t.end();
});

test("[array_arrow_UI -> set()] incorrect, optional argument, tween wrong type", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:2});
	
	var mock_this = {};
	var mock_options = {
		array : array,
	};
	var mock_arrow = {
		_ : {},
		x : undefined,
		y : undefined,
	};
	
	//TEST
	var test_arrow = array_arrow_UI.prototype._decorate_set.call(mock_this, mock_arrow, mock_options);
	
	//TEST
	try {
		test_arrow._.set(0, {tween:"some bad type"});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Optional argument: 'tween'/), "tells you what's wrong");
		t.ok(message.match(/should be true or false/), "and what type should be");
	}
	
	TEARDOWN();
});

test('[array_arrow_UI -> set()], correct', function (t) {
	//SETUP
	SETUP();
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:2});
	
	var mock_this = {};
	var mock_options = {
		array : array,
	};
	var mock_arrow = {
		_ : {},
		x : 0,
		y : 0,
	};
	var move = require('lib/util/move');
	mock_arrow._.move = move(mock_arrow);
	
	//TEST
	var test_arrow = array_arrow_UI.prototype._decorate_set.call(mock_this, mock_arrow, mock_options);
	
	//TEST
	test_arrow._.set(1, {tween:false});
	
	t.equal(test_arrow._.index, 1);
	t.deepEqual(test_arrow._.pointed_at, array.children[1]);
	t.equal(test_arrow.x, 22 + 50);
	t.equal(test_arrow.y, 70);
	
	TEARDOWN();
	t.end();
});

test('[array_arrow_UI -> set()], correct, 0th index case', function (t) {
	//SETUP
	SETUP();
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:2});
	
	var mock_this = {};
	var mock_options = {
		array : array,
	};
	var mock_arrow = {
		_ : {},
		x : 0,
		y : 0,
	};
	var move = require('lib/util/move');
	mock_arrow._.move = move(mock_arrow);
	
	//TEST
	var test_arrow = array_arrow_UI.prototype._decorate_set.call(mock_this, mock_arrow, mock_options);
	
	//TEST
	test_arrow._.set(0, {tween:false});
	
	t.equal(test_arrow._.index, 0);
	t.deepEqual(test_arrow._.pointed_at, array.children[0]);
	t.equal(test_arrow.x, 22);
	t.equal(test_arrow.y, 70);
	
	TEARDOWN();
	t.end();
});

test('[array_arrow_UI -> set()], correct, tail index case', function (t) {
	//SETUP
	SETUP();
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:2});
	
	var mock_this = {};
	var mock_options = {
		array : array,
	};
	var mock_arrow = {
		_ : {},
		x : 0,
		y : 0,
	};
	var move = require('lib/util/move');
	mock_arrow._.move = move(mock_arrow);
	
	//TEST
	var test_arrow = array_arrow_UI.prototype._decorate_set.call(mock_this, mock_arrow, mock_options);
	
	//TEST
	test_arrow._.set(2, {tween:false});
	
	t.equal(test_arrow._.index, 2);
	t.ok(check.undefined(test_arrow._.pointed_at));
	t.equal(test_arrow.x, array.children[1].x + 50 + 22);
	t.equal(test_arrow.y, 70);
	
	TEARDOWN();
	t.end();
});

test('[array_arrow_UI -> set()], correct, tween between indices 0 and 1', function (t) {
	t.plan(4);
	
	//SETUP
	var ui = SETUP();
	
	//setup UI arrow
	var arrow_factory = require('lib/factory/arrow_factory');
	var af = arrow_factory();
	af.arrow({direction: "up"});
	
	var a = af.get();
	
	var arrow = new createjs.Container();
	arrow.addChild(a);
	
	//append the name to the arrow and decorate onto the arrow for reference
	var text_factory = require('lib/factory/text_factory');
	var tf = text_factory();
	tf.text({text:"test"});
	var label = tf.get();
	
	//lifted from 'lib/util/place', below()
	label.x = arrow.x - label.getBounds().x;
	label.y = arrow.y + arrow.getBounds().height - label.getBounds().y;
	
	//slight correction: down and to the left, to be centered under the arrow
	label.y += 5;
	label.x += -10;
	
	arrow.addChild(label);
	
	//DECORATE
	//setup a decoration namespace
	arrow._ = {};
	
	//decorate with the name of the arrow
	arrow._.name = "test";
	
	//for storing a reference of the object the arrow is pointed at
	arrow._.pointed_at = null;
	
	//add move() functionality
	var move = require('lib/util/move');
	arrow._.move = move(arrow);
	
	//store the index in the array where the arrow is pointed at
	arrow._.index = 0;
	
	//setup the array
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:2});
	
	//add the arrow to the array
	array.addChild(arrow);
	
	//position the array
	array.x = 100;
	array.y = 200;
	
	//remove any extra children from the array
	for (var i = 0; i < array.children.length; i++) {
		if (i >= array._.length) {
			array.removeChildAt(i);
		}
	}
	
	//add the array to the stage
	ui.stage.add(array);
	
	var mock_options = {
		array : array,
	};
	
	//TEST
	var test_arrow = array_arrow_UI.prototype._decorate_set(arrow, mock_options);
	
	//TEST
	test_arrow._.set(0, {tween:false});
	
	//tween to next index
	test_arrow._.set(1);
	
	setTimeout(function() {
		t.equal(test_arrow._.index, 1);
		t.deepEqual(test_arrow._.pointed_at, array.children[1]);
		t.equal(test_arrow.x, array.children[0].x + 50 + 22);
		t.equal(test_arrow.y, 70);
		
		TEARDOWN();
		t.end();
	}, 2000);
});

test('[array_arrow_UI -> set()], correct, tween from 1 to 0', function (t) {
	t.plan(4);
	
	//SETUP
	var ui = SETUP();
	
	//setup UI arrow
	var arrow_factory = require('lib/factory/arrow_factory');
	var af = arrow_factory();
	af.arrow({direction: "up"});
	
	var a = af.get();
	
	var arrow = new createjs.Container();
	arrow.addChild(a);
	
	//append the name to the arrow and decorate onto the arrow for reference
	var text_factory = require('lib/factory/text_factory');
	var tf = text_factory();
	tf.text({text:"test"});
	var label = tf.get();
	
	//lifted from 'lib/util/place', below()
	label.x = arrow.x - label.getBounds().x;
	label.y = arrow.y + arrow.getBounds().height - label.getBounds().y;
	
	//slight correction: down and to the left, to be centered under the arrow
	label.y += 5;
	label.x += -10;
	
	arrow.addChild(label);
	
	//DECORATE
	//setup a decoration namespace
	arrow._ = {};
	
	//decorate with the name of the arrow
	arrow._.name = "test";
	
	//for storing a reference of the object the arrow is pointed at
	arrow._.pointed_at = null;
	
	//add move() functionality
	var move = require('lib/util/move');
	arrow._.move = move(arrow);
	
	//store the index in the array where the arrow is pointed at
	arrow._.index = 0;
	
	//setup the array
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:2});
	
	//add the arrow to the array
	array.addChild(arrow);
	
	//position the array
	array.x = 100;
	array.y = 200;
	
	//remove any extra children from the array
	for (var i = 0; i < array.children.length; i++) {
		if (i >= array._.length) {
			array.removeChildAt(i);
		}
	}
	
	//add the array to the stage
	ui.stage.add(array);
	
	var mock_options = {
		array : array,
	};
	
	//TEST
	var test_arrow = array_arrow_UI.prototype._decorate_set(arrow, mock_options);
	
	//TEST
	test_arrow._.set(1, {tween:false});
	
	//tween to next index
	test_arrow._.set(0);
	
	setTimeout(function() {
		t.equal(test_arrow._.index, 0);
		t.deepEqual(test_arrow._.pointed_at, array.children[0]);
		t.equal(test_arrow.x, 22);
		t.equal(test_arrow.y, 70);
		
		TEARDOWN();
		t.end();
	}, 2000);
});

test('[array_arrow_UI -> set()], correct, tween from 0 to tail', function (t) {
	t.plan(4);
	
	//SETUP
	var ui = SETUP();
	
	//setup UI arrow
	var arrow_factory = require('lib/factory/arrow_factory');
	var af = arrow_factory();
	af.arrow({direction: "up"});
	
	var a = af.get();
	
	var arrow = new createjs.Container();
	arrow.addChild(a);
	
	//append the name to the arrow and decorate onto the arrow for reference
	var text_factory = require('lib/factory/text_factory');
	var tf = text_factory();
	tf.text({text:"test"});
	var label = tf.get();
	
	//lifted from 'lib/util/place', below()
	label.x = arrow.x - label.getBounds().x;
	label.y = arrow.y + arrow.getBounds().height - label.getBounds().y;
	
	//slight correction: down and to the left, to be centered under the arrow
	label.y += 5;
	label.x += -10;
	
	arrow.addChild(label);
	
	//DECORATE
	//setup a decoration namespace
	arrow._ = {};
	
	//decorate with the name of the arrow
	arrow._.name = "test";
	
	//for storing a reference of the object the arrow is pointed at
	arrow._.pointed_at = null;
	
	//add move() functionality
	var move = require('lib/util/move');
	arrow._.move = move(arrow);
	
	//store the index in the array where the arrow is pointed at
	arrow._.index = 0;
	
	//setup the array
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:2});
	
	//add the arrow to the array
	array.addChild(arrow);
	
	//position the array
	array.x = 100;
	array.y = 200;
	
	//remove any extra children from the array
	for (var i = 0; i < array.children.length; i++) {
		if (i >= array._.length) {
			array.removeChildAt(i);
		}
	}
	
	//add the array to the stage
	ui.stage.add(array);
	
	var mock_options = {
		array : array,
	};
	
	//TEST
	var test_arrow = array_arrow_UI.prototype._decorate_set(arrow, mock_options);
	
	//TEST
	test_arrow._.set(0, {tween:false});
	
	//tween to next index
	test_arrow._.set(2);
	
	setTimeout(function() {
		t.equal(test_arrow._.index, 2);
		t.ok(check.undefined(test_arrow._.pointed_at));
		t.equal(test_arrow.x, array.children[1].x + 50 + 22);
		t.equal(test_arrow.y, 70);
		
		TEARDOWN();
		t.end();
	}, 2000);
});

test('[array_arrow_UI._decorate], correct', function (t) {
	//SETUP
	SETUP();
	
	var mock_this = {};
	var mock_arrow = {
		x:0,
		y:0,
	};
	var mock_options = {
		name: "test",
		index: -1,
	};
	
	//TEST
	var result = array_arrow_UI.prototype._decorate.call(mock_this, mock_arrow, mock_options);
	
	t.ok(check.object(result), "get back an object");
	t.ok(check.object(result._), "with a _ namespace");
	t.equal(result._.name, "test", "name should be assigned");
	t.equal(result._.pointed_at, null);
	t.ok(check.object(result._.move), "move should be decorated");
	t.equal(result._.index, mock_options.index);
	
	TEARDOWN();
	t.end();
});

test('[array_arrow_UI._decorate_utility_methods], correct', function (t) {
	//SETUP
	SETUP();
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:1});
	
	var mock_arrow = {
		_ : {
			index : 0,
		},
		
	};
	var mock_options = {
		array : array,
	};
	
	//TEST
	var result = array_arrow_UI.prototype._decorate_utility_methods(mock_arrow, mock_options);
	
	t.ok(check.function(result._.next));
	t.ok(check.function(result._.prev));
	
	TEARDOWN();
	t.end();
});

function setup_array(arrow, ui) {
	//setup the array
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:2});
	
	//position the array
	array.x = 100;
	array.y = 200;
	
	//remove any extra children from the array
	for (var i = 0; i < array.children.length; i++) {
		if (i >= array._.length) {
			array.removeChildAt(i);
		}
	}
	
	//add the array to the stage
	ui.stage.add(array);
	
	return array;
};

test('[array_arrow_UI -> next()], correct, 0 to 1', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array = setup_array(arrow, ui);
	var arrow = array_arrow_UI({name:'test', array:array, index:0});
	
	//add the arrow to the array
	array.addChild(arrow);
	
	//TEST
	var result = arrow._.next({tween:false});
	
	t.equal(arrow._.index, 1);
	t.deepEqual(arrow._.pointed_at, array.children[1]);
	t.equal(arrow.x, array.children[0].x + 50 + 22);
	t.equal(arrow.y, 70);
	
	t.notOk(result.done);
	t.ok(check.undefined(result.value));
	
	TEARDOWN();
	t.end();
});

test('[array_arrow_UI -> next()], correct, 0 to 1 (tween)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array = setup_array(arrow, ui);
	var arrow = array_arrow_UI({name:'test', array:array, index:0});
	
	//add the arrow to the array
	array.addChild(arrow);
	
	var mock_options = {
		array : array,
	};
	
	//TEST
	var result = arrow._.next();
	
	t.plan(6);
	setTimeout(function() {
		t.equal(arrow._.index, 1);
		t.deepEqual(arrow._.pointed_at, array.children[1]);
		t.equal(arrow.x, array.children[0].x + 50 + 22);
		t.equal(arrow.y, 70);
		t.notOk(result.done);
		t.ok(check.undefined(result.value));
		
		TEARDOWN();
	}, 2000);
});

test('[array_arrow_UI -> next()], correct, 0 to 1, gets value', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array = setup_array(arrow, ui);
	var arrow = array_arrow_UI({name:'test', array:array, index:0});
	
	//add the arrow to the array
	array.addChild(arrow);
	
	//add values to the array
	array._.push({value: new createjs.Text("0"), tween:false});
	array._.push({value: new createjs.Text("1"), tween:false});
	
	//TEST
	var result = arrow._.next({tween:false});
	
	t.notOk(result.done);
	t.equal(result.value, 1);
	
	TEARDOWN();
	t.end();
});

test('[array_arrow_UI -> next()], correct, to tail', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array = setup_array(arrow, ui);
	var arrow = array_arrow_UI({name:'test', array:array, index:0});
	
	//add the arrow to the array
	array.addChild(arrow);
	
	//set the arrow to the last position
	arrow._.set(2, {tween:false});
	
	//TEST
	var result = arrow._.next({tween:false});
	
	t.equal(arrow._.index, 2, "at the index for the tail");
	t.deepEqual(arrow._.pointed_at, undefined, "pointed at nothing, as beyond the end of the array");
	t.equal(arrow.x, array.children[1].x + 50 + 22, "positioned 50 units beeyond the last array element");
	t.equal(arrow.y, 70, "y value is 70");
	
	t.ok(result.done, "should be done as of this next()");
	t.ok(check.undefined(result.value), "no value at that index to return");
	
	TEARDOWN();
	t.end();
});

test('[array_arrow_UI -> prev()], correct, from tail', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array = setup_array(arrow, ui);
	var arrow = array_arrow_UI({name:'test', array:array, index:0});
	
	//add the arrow to the array
	array.addChild(arrow);
	
	//set the arrow to the last position
	arrow._.set(2, {tween:false});
	
	//TEST
	var result = arrow._.prev({tween:false});
	
	t.equal(arrow._.index, 1);
	t.deepEqual(arrow._.pointed_at, array.children[1]);
	t.equal(arrow.x, array.children[0].x + 50 + 22);
	t.equal(arrow.y, 70, "y value is 70");
	
	t.notOk(result.done);
	t.ok(check.undefined(result.value), "no value at that index to return");
	
	TEARDOWN();
	t.end();
});

test('[array_arrow_UI -> prev()], correct, from tail (tween)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array = setup_array(arrow, ui);
	var arrow = array_arrow_UI({name:'test', array:array, index:0});
	
	//add the arrow to the array
	array.addChild(arrow);
	
	//set the arrow to the last position
	arrow._.set(2, {tween:false});
	
	//TEST
	var result = arrow._.prev();
	
	t.plan(6);
	setTimeout(function() {
		t.equal(arrow._.index, 1);
		t.deepEqual(arrow._.pointed_at, array.children[1]);
		t.equal(arrow.x, array.children[0].x + 50 + 22);
		t.equal(arrow.y, 70, "y value is 70");
		
		t.notOk(result.done);
		t.ok(check.undefined(result.value), "no value at that index to return");
		
		TEARDOWN();
	}, 2000);
});

test('[array_arrow_UI -> prev()], correct, at 0', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array = setup_array(arrow, ui);
	var arrow = array_arrow_UI({name:'test', array:array, index:0});
	
	//add the arrow to the array
	array.addChild(arrow);
	
	//TEST
	var result = arrow._.prev({tween:false});
	
	t.equal(arrow._.index, 0);
	t.deepEqual(arrow._.pointed_at, array.children[0]);
	t.equal(arrow.x, array.children[0].x + 22);
	t.equal(arrow.y, 70, "y value is 70");
	
	t.ok(result.done, "should be done as of this next()");
	t.ok(check.undefined(result.value), "no value at that index to return");
	
	TEARDOWN();
	t.end();
});

test('[array_arrow_UI -> prev()], correct, at 0 (no value returned)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array = setup_array(arrow, ui);
	var arrow = array_arrow_UI({name:'test', array:array, index:0});
	
	//add the arrow to the array
	array.addChild(arrow);
	
	//add values to the array
	array._.push({value: new createjs.Text("0"), tween:false});
	array._.push({value: new createjs.Text("1"), tween:false});
	
	//TEST
	var result = arrow._.prev({tween:false});
	
	t.ok(result.done, "should be done as of this next()");
	t.ok(check.undefined(result.value), "no value at that index to return");
	
	TEARDOWN();
	t.end();
});

test('[array_arrow_UI -> prev()], correct, from tail (value returned)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array = setup_array(arrow, ui);
	var arrow = array_arrow_UI({name:'test', array:array, index:0});
	
	//add the arrow to the array
	array.addChild(arrow);
	
	//set the arrow to the last position
	arrow._.set(2, {tween:false});
	
	//set values in the array
	array._.push({value: new createjs.Text("0"), tween:false});
	array._.push({value: new createjs.Text("1"), tween:false});
	
	//TEST
	var result = arrow._.prev({tween:false});
	
	t.equal(arrow._.index, 1);
	t.deepEqual(arrow._.pointed_at, array.children[1]);
	t.equal(arrow.x, array.children[0].x + 50 + 22);
	t.equal(arrow.y, 70, "y value is 70");
	
	t.notOk(result.done);
	t.equal(result.value, 1);
	
	TEARDOWN();
	t.end();
});

test("[array_arrow_UI.is_arrow] correct", function (t) {
	//SETUP
	SETUP();
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:1});
	
	//TEST
	var arrow = array_arrow_UI({name:"test", array:array});
	
	//TEST
	t.ok(array_arrow_UI.is_arrow(arrow));
	
	TEARDOWN();
	t.end();
});

test("[array_arrow_UI.is_arrow] incorrect", function (t) {
	//SETUP
	SETUP();
	
	//TEST
	t.notOk(array_arrow_UI.is_arrow("some wrong type"));
	
	TEARDOWN();
	t.end();
});

//tail