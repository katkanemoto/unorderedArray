var array_UI = require('lib/UI/array_UI');
var test = require('tape');
var check = require('check-types');

function SETUP() {
	var primitives = require("lib/util/primitives");
	primitives.set('createjs', createjs);
	
	var mock_lib = {
		TitleScreen : function() {
			return {
				insert_btn : {
					addEventListener : function() {},
				},
				gotoAndPlay : function() {},
			};
		},
		ArrayScreen : function() {
			return {};
		},
		ArrayElement : function() {
			var ae = new createjs.Shape();
			ae.index_txt = {
				text : '',
			};
			
			return ae;
		},
	};
	
	primitives.set('lib', mock_lib);
	
	var canvas = document.getElementsByTagName('canvas')[0];
	var stage = new createjs.Stage(canvas);
	
	primitives.set('stage', stage);
}

function TEARDOWN() {
	var primitives = require("lib/util/primitives");
	primitives.clear();
}

test("[array_UI] incorrect, 'lib' wrong type", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	var primitives = require("lib/util/primitives");
	primitives.set('lib', '');
	
	//TEST
	try {
		array_UI();
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/lib/), 'checking for an object in primitives');
		t.ok(message.match(/undefined or not object in primitives object/), 'defined what was wrong');
	}
	
	TEARDOWN();
});

test("[array_UI] incorrect, 'lib' unset", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	var primitives = require("lib/util/primitives");
	primitives.delete('lib');
	
	//TEST
	try {
		array_UI();
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/lib/), 'checking for an object in primitives');
		t.ok(message.match(/undefined or not object in primitives object/), 'defined what was wrong');
	}
	
	TEARDOWN();
});

test("[array_UI] incorrect, 'createjs' wrong type", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	var primitives = require("lib/util/primitives");
	primitives.set('createjs', '');
	
	//TEST
	try {
		array_UI();
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/createjs/), 'checking for an object in primitives');
		t.ok(message.match(/undefined or not object in primitives object/), 'defined what was wrong');
	}
	
	TEARDOWN();
});

test("[array_UI] incorrect, 'createjs' unset", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	var primitives = require("lib/util/primitives");
	primitives.delete('createjs');
	
	//TEST
	try {
		array_UI();
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/createjs/), 'checking for an object in primitives');
		t.ok(message.match(/undefined or not object in primitives object/), 'defined what was wrong');
	}
	
	TEARDOWN();
});

test("[array_UI] incorrect, no argument", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	//TEST
	try {
		array_UI();
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Require argument objet with property 'length'/), "tells you what's wrong");
		t.ok(message.match(/'length' should be an integer > 0/), "and what length should be");
	}
	
	TEARDOWN();
});

test("[array_UI] incorrect, argument object, but no property", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	//TEST
	try {
		array_UI({});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Require argument objet with property 'length'/), "tells you what's wrong");
		t.ok(message.match(/'length' should be an integer > 0/), "and what length should be");
	}
	
	TEARDOWN();
});

test("[array_UI] incorrect, argument object, with length property, but wrong type", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	//TEST
	try {
		array_UI({length:"some bad type"});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Require argument objet with property 'length'/), "tells you what's wrong");
		t.ok(message.match(/'length' should be an integer > 0/), "and what length should be");
	}
	
	TEARDOWN();
});

test("[array_UI] incorrect, argument object, with length property, right type, but invalid value", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	//TEST
	try {
		array_UI({length:0});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Require argument objet with property 'length'/), "tells you what's wrong");
		t.ok(message.match(/'length' should be an integer > 0/), "and what length should be");
	}
	
	TEARDOWN();
});

test("[array_UI] correct", function (t) {
	t.plan(1);
	
	//SETUP
	SETUP();
	
	//TEST
	var result = array_UI({length:1});
	
	t.ok(check.instanceStrict(result, createjs.Container), "got back a container");
	
	TEARDOWN();
});

test('[array_UI._make_array] correct', function (t) {
	//SETUP
	SETUP();
	
	var primitives = require("lib/util/primitives");
	
	var mock_this = {
		_createjs : primitives.get('createjs'),
		_lib : primitives.get('lib'),
		_array : undefined,
	};
	
	//TEST
	var result = array_UI.prototype._make_array.call(mock_this, 1);
	
	t.ok(check.instanceStrict(result, createjs.Container), "got back a container");
	t.equal(result.children.length, 1, "should have only one arrayElement");
	t.ok(check.instanceStrict(result.children[0], createjs.Container), "children are containers");
	t.ok(check.object(result.children[0]._), "each child has a _ namespace for decoration");
	t.ok(check.number(result.children[0]._.index), "each child has an index associated");
	t.equal(result.children[0]._.index, 0, "...and the index matches the arrayElement's position in the array");
	t.ok(check.object(result.getBounds()), "bounds have been set");
	t.ok(check.object(result._), "decorated _ namespace is present");
	//t.ok(check.number(result._.length), "_length is present");
	//t.equal(result._.length, 1, "...and equal to the length of the array");
	
	TEARDOWN();
	
	t.end();
});

test('[array_UI._decorate_coordinates] correct', function (t) {
	//SETUP
	SETUP();
	
	var primitives = require("lib/util/primitives");
	
	var mock_this = {
		/* _createjs : primitives.get('createjs'),
		_lib : primitives.get('lib'),
		_array : undefined, */
	};
	
	var _lib = primitives.get('lib');
	var _createjs = primitives.get('createjs');
	
	var offsetX = 0;
	var outer_container = new _createjs.Container();
	
	for (var i = 0; i < 3; i++) {
		var arrayElement = new _lib.ArrayElement();
		var inner_container = new _createjs.Container();
		inner_container.addChild(arrayElement);
		
		//offset each subcontainer by the size of the array element box
		inner_container.x = offsetX;
		
		inner_container._ = {};
		
		offsetX += 50;
		
		outer_container.addChild(inner_container);
	}
	
	//TEST
	var result = array_UI.prototype._decorate_coordinates.call(mock_this, outer_container);
	
	//initial placement, such that the parent array is at (0, 0)
	//	use this to test that the values of the coordinates update as the parent moves in the next step
	result.x = 0;
	result.y = 0;
	
	//this should increase, as we check arrayElements that are more to the right on the screen (larger x values on their positions)
	var previous_on_x = 0;
	//this should stay the same, as the arrayElements are all in a line (do not vary up or down on the screen)
	var previous_on_y = result.children[0]._.on().y;
	
	//record coordinate values, for comparison later when we change the position of the parent container
	var on_values = [];
	
	//similar characteristics of the values of below.x and below.y
	var previous_below_x = 0;
	var previous_below_y = result.children[0]._.below().y;
	
	var below_values = [];
	
	for (var i = 0; i < result.children.length; i++) {
		t.ok(check.object(result.children[i]._), "child " + String(i) + " has a '_' namepsace");
		t.ok(check.function(result.children[i]._.on), "child " + String(i) + " has a 'on' property");
		t.ok(check.function(result.children[i]._.below), "child " + String(i) + " has a 'below' property");
		
		var on = result.children[i]._.on();
		
		t.ok(check.number(on.x), "child " + String(i) + " has a numeric 'on.x' property");
		t.ok(check.number(on.y), "child " + String(i) + " has a numeric 'on.y' property");
		
		t.ok(on.x > previous_on_x, "child " + String(i) + ", 'on.x' greater than previous");
		previous_on_x = on.x;
		
		t.equal(on.y, previous_on_y, "child " + String(i) + ", 'on.y' equal to previous");
		previous_on_y = on.y;
		
		on_values.push({x:on.x, y:on.y});
		
		var below = result.children[i]._.below();
		
		t.ok(check.number(below.x), "child " + String(i) + " has a numeric 'below.x' property");
		t.ok(check.number(below.y), "child " + String(i) + " has a numeric 'below.y' property");
		
		t.ok(below.x > previous_below_x, "child " + String(i) + ", 'below.x' greater than previous");
		previous_below_x = below.x;
		
		t.equal(below.y, previous_below_y, "child " + String(i) + ", 'below.y' equal to previous");
		previous_below_y = below.y;
		
		below_values.push({x:below.x, y:below.y});
	}
	
	result.x = 100;
	result.y = 100;
	
	for (var i = 0; i < result.children.length; i++) {
		var on = result.children[i]._.on();
		
		t.ok(on.x > on_values[i].x, "should see larger value on current x, since we moved the parent");
		t.ok(on.y > on_values[i].y, "should see larger value on current y, since we moved the parent");
		t.equal(on.x - on_values[i].x, 100, "the difference between the old placement and the new should be how far we moved the parent");
		t.equal(on.y - on_values[i].y, 100, "the difference between the old placement and the new should be how far we moved the parent");
		
		var below = result.children[i]._.below();
		
		t.ok(below.x > below_values[i].x, "should see larger value on current x, since we moved the parent");
		t.ok(below.y > below_values[i].y, "should see larger value on current y, since we moved the parent");
		t.equal(below.x - below_values[i].x, 100, "the difference between the old placement and the new should be how far we moved the parent");
		t.equal(below.y - below_values[i].y, 100, "the difference between the old placement and the new should be how far we moved the parent");
	}
	
	TEARDOWN();
	
	t.end();
});

test('[array_UI._decorate_value_array] correct', function (t) {
	t.plan(1);
	
	//SETUP
	var mock_this = {};
	
	//TEST
	var result = array_UI.prototype._decorate_value_array.call(mock_this, {_:{}});
	
	t.ok(check.array(result._.values), "values array decorated");
});

test('[array_UI._decorate_method_push] correct', function (t) {
	//SETUP
	var mock_this = {};
	var mock_array = {_:{}};
	
	//TEST
	var result = array_UI.prototype._decorate_method_push.call(mock_this, mock_array);
	
	t.ok(check.function(result._.push), "push() is decorated");
	
	t.end();
});

test('[array_UI._decorate_method_push] incorrect, no argument', function (t) {
	t.plan(3);
	
	//SETUP
	var mock_this = {};
	var mock_array = {_:{}};
	
	//TEST
	var result = array_UI.prototype._decorate_method_push.call(mock_this, mock_array);
	
	try {
		result._.push()
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/Requires a createjs.Text object/), 'should be Text');
		t.ok(message.match(/value is a number/), 'should be a number');
	}
});

test('[array_UI._decorate_method_push] incorrect, bad argument', function (t) {
	t.plan(3);
	
	//SETUP
	var mock_this = {};
	var mock_array = {_:{}};
	
	//TEST
	var result = array_UI.prototype._decorate_method_push.call(mock_this, mock_array);
	
	try {
		result._.push("some bad argument")
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/Requires a createjs.Text object/), 'should be Text');
		t.ok(message.match(/value is a number/), 'should be a number');
	}
});

test('[array_UI._decorate_method_push] incorrect, correct argument type, empty value', function (t) {
	t.plan(3);
	
	//SETUP
	var mock_this = {};
	var mock_array = {_:{}};
	
	//TEST
	var result = array_UI.prototype._decorate_method_push.call(mock_this, mock_array);
	var arg = new createjs.Text();
	
	try {
		result._.push(arg)
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/Requires a createjs.Text object/), 'should be Text');
		t.ok(message.match(/value is a number/), 'should be a number');
	}
});

test('[array_UI._decorate_method_push] incorrect, correct argument type, bad value', function (t) {
	t.plan(3);
	
	//SETUP
	var mock_this = {};
	var mock_array = {_:{}};
	
	//TEST
	var result = array_UI.prototype._decorate_method_push.call(mock_this, mock_array);
	var arg = new createjs.Text("some bad value");
	
	try {
		result._.push(arg)
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/Requires a createjs.Text object/), 'should be Text');
		t.ok(message.match(/value is a number/), 'should be a number');
	}
});

test('[array_UI._decorate_method_push] correct, correct argument type, correct value', {skip:true}, function (t) {
	t.plan(3);
	
	//SETUP
	var mock_this = {};
	var mock_array = {_:{}};
	
	//TEST
	var result = array_UI.prototype._decorate_method_push.call(mock_this, mock_array);
	var arg = new createjs.Text("0");
	
	try {
		result._.push(arg)
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Requires a createjs.Text object/), 'should be Text');
		t.ok(message.match(/value is a number/), 'should be a number');
	}
});

test('[array_UI._decorate_method_push] incorrect, array is full', function (t) {
	t.plan(3);
	
	//SETUP
	var mock_this = {};
	var mock_array = {
		_:{
			values : [1, 2, 3],
			length : 3,
		},
	};
	
	//TEST
	var result = array_UI.prototype._decorate_method_push.call(mock_this, mock_array);
	var arg = new createjs.Text("0");
	
	try {
		result._.push(arg)
	} catch(error) {
		t.ok(check.instanceStrict(error, RangeError), 'we should get back a RangeError');
		var message = error.toString();
		t.ok(message.match(/Array is full/), "tells you what's wrong");
		t.ok(message.match(/cannot push\(\) new value/), "cannot push()");
	}
});

//tail