var lesson = require('lib/lesson/logic/array_delete');
var test = require('tape');
var check = require('check-types');

function SETUP() {
	var lesson_UI = require('lib/UI/lesson_UI');
	var UI = lesson_UI();
	UI.next();	//get the testing lesson_UI into the LESSON state, so that get_proxy() works
	return UI.get_proxy();
}

function TEARDOWN() {
	var primitives = require("lib/util/primitives");
	var stage = primitives.get('stage');
	
	//reset the stage
	stage.clear();
	stage.removeAllChildren();
	
	//delete the text input created by lesson_UI
	var div = document.getElementById('canvas_container');
	//	find the input control
	var input_index;
	for (var i = 0; i < div.children.length; i++) {
		if (div.children[i].type === "text") {
			//don't delete inside the array while iterating over it
			input_index = i;
		}
	};
	
	//if there was a text input, then delete it
	if (input_index) {
		div.removeChild(div.children[input_index]);
	}
	
	//clear the pub sub
	var pub_sub = require('pubsub-js');
	pub_sub.clearAllSubscriptions();
};

TEARDOWN();

test('[lesson] incorrect, no arguments', function (t) {
	t.plan(2);
	
	//SETUP
	var ui = SETUP();
	
	//TEST
	try {
		lesson();
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Requires argument object/), 'what argument caused the problem');
	}
	
	TEARDOWN();
});

test('[lesson] incorrect, index undefined', function (t) {
	t.plan(4);
	
	//SETUP
	var ui = SETUP();
	
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:1});
	var arrow = array._.arrow;
	
	//TEST
	try {
		lesson({UI:ui, array:array, arrow:arrow});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Required argument: index/), 'what argument caused the problem');
		t.ok(message.match(/should be an integer index in the array/), 'how to fix it');
		t.ok(message.match(/valid value at that index/), 'how to fix it');
	}
	
	TEARDOWN();
});

test('[lesson] incorrect, index wrong type', function (t) {
	t.plan(4);
	
	//SETUP
	var ui = SETUP();
	
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:1});
	var arrow = array._.arrow;
	
	//TEST
	try {
		lesson({UI:ui, array:array, arrow:arrow, index:"some bad type"});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Required argument: index/), 'what argument caused the problem');
		t.ok(message.match(/should be an integer index in the array/), 'how to fix it');
		t.ok(message.match(/valid value at that index/), 'how to fix it');
	}
	
	TEARDOWN();
});

test('[lesson] incorrect, index < 0', function (t) {
	t.plan(4);
	
	//SETUP
	var ui = SETUP();
	
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:1});
	var arrow = array._.arrow;
	
	//TEST
	try {
		lesson({UI:ui, array:array, arrow:arrow, index:-1});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Required argument: index/), 'what argument caused the problem');
		t.ok(message.match(/should be an integer index in the array/), 'how to fix it');
		t.ok(message.match(/valid value at that index/), 'how to fix it');
	}
	
	TEARDOWN();
});

test('[lesson] incorrect, index > array._.length - 1', function (t) {
	t.plan(4);
	
	//SETUP
	var ui = SETUP();
	
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:1});
	var arrow = array._.arrow;
	
	//TEST
	try {
		lesson({UI:ui, array:array, arrow:arrow, index:1});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Required argument: index/), 'what argument caused the problem');
		t.ok(message.match(/should be an integer index in the array/), 'how to fix it');
		t.ok(message.match(/valid value at that index/), 'how to fix it');
	}
	
	TEARDOWN();
});

test('[lesson] incorrect, no valid value at index', function (t) {
	t.plan(4);
	
	//SETUP
	var ui = SETUP();
	
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:1});
	var arrow = array._.arrow;
	
	//TEST
	try {
		lesson({UI:ui, array:array, arrow:arrow, index:0});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Required argument: index/), 'what argument caused the problem');
		t.ok(message.match(/should be an integer index in the array/), 'how to fix it');
		t.ok(message.match(/valid value at that index/), 'how to fix it');
	}
	
	TEARDOWN();
});

test('[lesson] correct', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0});
	
	//TEST
	t.equal(result._state, result._READY, "in the correct start to start the lesson logic");
	
	TEARDOWN();
	t.end();
});

//tail