var lesson = require('lib/lesson/logic/array_delete');
var test = require('tape');
var check = require('check-types');

function SETUP() {
	var lesson_UI = require('lib/UI/lesson_UI');
	var UI = lesson_UI();
	UI.next();	//get the testing lesson_UI into the LESSON state, so that get_proxy() works
	return UI.get_proxy();
}

function TEARDOWN() {
	var primitives = require("lib/util/primitives");
	var stage = primitives.get('stage');
	
	//reset the stage
	stage.clear();
	stage.removeAllChildren();
	
	//delete the text input created by lesson_UI
	var div = document.getElementById('canvas_container');
	//	find the input control
	var input_index;
	for (var i = 0; i < div.children.length; i++) {
		if (div.children[i].type === "text") {
			//don't delete inside the array while iterating over it
			input_index = i;
		}
	};
	
	//if there was a text input, then delete it
	if (input_index) {
		div.removeChild(div.children[input_index]);
	}
	
	//clear the pub sub
	var pub_sub = require('pubsub-js');
	pub_sub.clearAllSubscriptions();
};

TEARDOWN();

test('[lesson] incorrect, no arguments', function (t) {
	t.plan(2);
	
	//SETUP
	var ui = SETUP();
	
	//TEST
	try {
		lesson();
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Requires argument object/), 'what argument caused the problem');
	}
	
	TEARDOWN();
});

test('[lesson] incorrect, index undefined', function (t) {
	t.plan(4);
	
	//SETUP
	var ui = SETUP();
	
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:1});
	var arrow = array._.arrow;
	
	//TEST
	try {
		lesson({UI:ui, array:array, arrow:arrow});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Required argument: index/), 'what argument caused the problem');
		t.ok(message.match(/should be an integer index in the array/), 'how to fix it');
		t.ok(message.match(/valid value at that index/), 'how to fix it');
	}
	
	TEARDOWN();
});

test('[lesson] correct', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0});
	
	//TEST
	t.equal(result._state, result._READY, "in the correct start to start the lesson logic");
	
	TEARDOWN();
	t.end();
});

test('[lesson.next()] correct, in INIT state', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0});
	result._state = result._INIT;
	
	//TEST
	t.notOk(result.next());
	
	TEARDOWN();
	t.end();
});

test('[lesson.next()] correct, in READY state', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0});
	result._state = result._READY;
	
	//TEST
	var output = result.next();
	t.equal(result._state, result._RUN);
	t.equal(result._step_state, result._STEP_2_STATEMENT);
	
	TEARDOWN();
	t.end();
});

test('[lesson.next()] correct, _STEP_1_STATEMENT', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0});
	result._state = result._READY;
	
	//TEST
	var output = result.next();
	t.ok(output.value.match(/delete a value/));
	t.equal(result._step_state, result._STEP_2_STATEMENT);
	
	TEARDOWN();
	t.end();
});

function step1(lesson) {
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_2_STATEMENT;
	return lesson;
}

test('[lesson.next()] correct, _STEP_2_STATEMENT', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0});
	result = step1(result);
	
	//TEST
	var output = result.next();
	t.ok(output.value.match(/remove the value/));
	t.ok(output.value.match(/index/));	
	t.equal(result._step_state, result._STEP_3_STATEMENT);
	
	TEARDOWN();
	t.end();
});

function step2(lesson) {
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_3_STATEMENT;
	return lesson;
}

test('[lesson.next()] correct, _STEP_3_STATEMENT', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0});
	result = step1(result);
	result = step2(result);
	
	//TEST
	var output = result.next();
	t.ok(output.value.match(/allocate two arrows/));
	t.ok(output.value.match(/move_to/));
	t.ok(output.value.match(/move_from/));
	t.equal(result._step_state, result._STEP_4_STATEMENT);
	
	TEARDOWN();
	t.end();
});

function step3(lesson) {
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_4_STATEMENT;
	return lesson;
}

test('[lesson.next()] correct, _STEP_4_STATEMENT', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0});
	result = step1(result);
	result = step2(result);
	result = step3(result);
	
	//TEST
	var output = result.next();
	t.ok(output.value.match(/move values from/));
	t.ok(output.value.match(/move_from/));
	t.ok(output.value.match(/move_to/));
	t.equal(result._step_state, result._STEP_5_STATEMENT);
	
	TEARDOWN();
	t.end();
});

function step4(lesson) {
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_5_STATEMENT;
	return lesson;
}

test('[lesson.next()] correct, _STEP_5_STATEMENT', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0});
	result = step1(result);
	result = step2(result);
	result = step3(result);
	result = step4(result);
	
	//TEST
	var output = result.next();
	t.ok(output.value.match(/increment both/));
	t.ok(output.value.match(/continue moving/));
	t.ok(output.value.match(/move_from/));
	t.ok(output.value.match(/tail/));
	t.equal(result._step_state, result._STEP_6_STATEMENT);
	
	TEARDOWN();
	t.end();
});

function step5(lesson) {
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_6_STATEMENT;
	return lesson;
}

test('[lesson.next()] correct, _STEP_6_STATEMENT', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0});
	result = step1(result);
	result = step2(result);
	result = step3(result);
	result = step4(result);
	result = step5(result);
	
	//TEST
	var output = result.next();
	t.ok(output.value.match(/remove the/));
	t.ok(output.value.match(/arrows/));
	t.ok(output.value.match(/tail/));
	t.ok(output.value.match(/back one/));
	t.ok(output.value.match(/one smaller/));
	t.ok(output.value.match(/value at index/));
	
	t.equal(result._step_state, result._STEP_7_DELETE);
	
	TEARDOWN();
	t.end();
});

function step6(lesson) {
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_7_DELETE;
	return lesson;
}

test('[lesson.next()] correct, _STEP_7_DELETE', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0});
	result = step1(result);
	result = step2(result);
	result = step3(result);
	result = step4(result);
	result = step5(result);
	result = step6(result);
	
	//TEST
	var output = result.next();
	t.ok(output.value.match(/Removing the value/));
	t.equal(array._.values.length, 1);
	t.equal(array._.values[0], null);
	
	t.equal(result._step_state, result._STEP_8_ALLOCATE_MOVERS);
	
	TEARDOWN();
	t.end();
});

function step7(lesson, array, index) {
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_8_ALLOCATE_MOVERS
	array._.pop({index:index});
	return {lesson:lesson, array:array};
}

test('[lesson.next()] correct, _STEP_8_ALLOCATE_MOVERS', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	var l = lesson({UI:ui, array:array, arrow:arrow, index:0});
	l = step1(l);
	l = step2(l);
	l = step3(l);
	l = step4(l);
	l = step5(l);
	l = step6(l);
	var step7_result = step7(l, array, 0);
	l = step7_result.lesson;
	array = step7_result.array;
	
	//TEST
	var output = l.next();
	t.ok(output.value.match(/Placing/));
	t.ok(output.value.match(/move to/));
	t.ok(output.value.match(/move from/));
	
	t.ok(check.not.undefined(l._move_to_arrow));
	t.equal(l._move_to_arrow._.index, 0);
	t.ok(check.not.undefined(l._move_from_arrow));
	t.equal(l._move_from_arrow._.index, 1);
	
	t.equal(l._step_state, l._STEP_CHECK_IF_DONE);
	
	TEARDOWN();
	t.end();
});

function step8(lesson, array, index) {
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_CHECK_IF_DONE
	
	lesson._move_to_arrow = array._.iterator("move\nto");
	lesson._move_to_arrow._.set(index, {tween:false});
	array.addChild(lesson._move_to_arrow);
	
	lesson._move_from_arrow = array._.iterator("move\nfrom");
	lesson._move_from_arrow._.set(index+1, {tween:false});
	array.addChild(lesson._move_from_arrow);
	
	return {lesson:lesson, array:array};
}

test('[lesson.next()] correct, _STEP_CHECK_IF_DONE', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	var l = lesson({UI:ui, array:array, arrow:arrow, index:0});
	l = step1(l);
	l = step2(l);
	l = step3(l);
	l = step4(l);
	l = step5(l);
	l = step6(l);
	var step7_result = step7(l, array, 0);
	l = step7_result.lesson;
	array = step7_result.array;
	var step8_result = step8(l, array, 0);
	l = step8_result.lesson;
	array = step8_result.array;
	
	//TEST
	var output = l.next();
	t.ok(output.value.match(/move from/));
	t.ok(output.value.match(/same index/));
	t.ok(output.value.match(/tail/));
	t.ok(output.value.match(/done moving/));
	
	t.equal(l._step_state, l._STEP_CLEANUP_1);
	
	TEARDOWN();
	t.end();
});

function step_check_if_done(lesson, arrow) {
	if (lesson._move_from_arrow._.index === arrow._.index) {
		lesson._step_state = lesson._STEP_CLEANUP_1;
	} else {
		lesson._step_state = lesson._STEP_MOVE_VALUE;
	}
	
	return lesson;
}

test('[lesson.next()] correct, _STEP_CLEANUP_1', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	var l = lesson({UI:ui, array:array, arrow:arrow, index:0});
	l = step1(l);
	l = step2(l);
	l = step3(l);
	l = step4(l);
	l = step5(l);
	l = step6(l);
	
	var step7_result = step7(l, array, 0);
	l = step7_result.lesson;
	array = step7_result.array;
	
	var step8_result = step8(l, array, 0);
	l = step8_result.lesson;
	array = step8_result.array;
	
	l = step_check_if_done(l, arrow);
	
	//TEST
	var output = l.next();
	t.ok(output.value.match(/no values left to move/));
	t.ok(output.value.match(/de-allocating/));
	t.ok(output.value.match(/move arrows/));
	
	t.ok(check.undefined(l._move_to_arrow));
	t.ok(check.undefined(l._move_from_arrow));
	
	t.equal(l._step_state, l._STEP_CLEANUP_2);
	
	TEARDOWN();
	t.end();
});

function step_cleanup1(lesson, array) {
	array.removeChild(lesson._move_from_arrow);
	lesson._move_from_arrow = undefined
	array.removeChild(lesson._move_to_arrow);
	lesson._move_to_arrow = undefined;
	
	lesson._step_state = lesson._STEP_CLEANUP_2;
	
	return {lesson:lesson, array:array};
}

test('[lesson.next()] correct, _STEP_CLEANUP_2', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	var l = lesson({UI:ui, array:array, arrow:arrow, index:0});
	l = step1(l);
	l = step2(l);
	l = step3(l);
	l = step4(l);
	l = step5(l);
	l = step6(l);
	
	var step7_result = step7(l, array, 0);
	l = step7_result.lesson;
	array = step7_result.array;
	
	var step8_result = step8(l, array, 0);
	l = step8_result.lesson;
	array = step8_result.array;
	
	l = step_check_if_done(l, arrow);
	
	var step_cleanup1_result = step_cleanup1(l, array);
	l = step_cleanup1_result.lesson;
	array = step_cleanup1_result.array;
	
	//TEST
	var output = l.next();
	setTimeout(function() {
		t.ok(output.value.match(/Moving/));
		t.ok(output.value.match(/tail/));
		t.ok(output.value.match(/back one space/));
		
		t.equal(l._arrow._.index, 0);
		
		t.equal(l._step_state, l._STEP_CLEANUP_3);
		
		TEARDOWN();
		t.end();
	}, 1500);
});

function step_cleanup2(lesson, arrow) {
	arrow._.prev({tween:false});
	
	lesson._step_state = lesson._STEP_CLEANUP_3;
	
	return {lesson:lesson, arrow:arrow};
}

test('[lesson.next()] correct, _STEP_CLEANUP_3', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	var l = lesson({UI:ui, array:array, arrow:arrow, index:0});
	l = step1(l);
	l = step2(l);
	l = step3(l);
	l = step4(l);
	l = step5(l);
	l = step6(l);
	
	var step7_result = step7(l, array, 0);
	l = step7_result.lesson;
	array = step7_result.array;
	
	var step8_result = step8(l, array, 0);
	l = step8_result.lesson;
	array = step8_result.array;
	
	l = step_check_if_done(l, arrow);
	
	var step_cleanup1_result = step_cleanup1(l, array);
	l = step_cleanup1_result.lesson;
	array = step_cleanup1_result.array;
	
	var step_cleanup2_result = step_cleanup2(l, arrow);
	l = step_cleanup2_result.lesson;
	arrow = step_cleanup2_result.arrow;
	
	//TEST
	var output = l.next();
	
	t.ok(output.value.match(/smaller/));
	t.ok(output.value.match(/removing the selected value/));
	
	t.ok(check.undefined(l._step_state), "no longer going through steps");
	t.equal(l._state, l._DONE);
	t.ok(output.done, "done with the current traversal");
	
	TEARDOWN();
	t.end();
});

test('[lesson.next()] correct, _DONE state handling', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	var l = lesson({UI:ui, array:array, arrow:arrow, index:0});
	l._state = l._DONE;
	
	//TEST
	var output = l.next();
	
	t.ok(output.value.match(/Cannot delete/));
	t.ok(output.value.match(/empty array/));
	
	t.ok(check.undefined(l._step_state), "no longer going through steps");
	t.equal(l._state, l._DONE);
	t.ok(output.done);
	
	TEARDOWN();
	t.end();
});

test('[lesson.next()] correct, _STEP_MOVE_VALUE', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:2, fill:2});
	var arrow = array._.arrow;
	
	var l = lesson({UI:ui, array:array, arrow:arrow, index:0});
	l = step1(l);
	l = step2(l);
	l = step3(l);
	l = step4(l);
	l = step5(l);
	l = step6(l);
	
	var step7_result = step7(l, array, 0);
	l = step7_result.lesson;
	array = step7_result.array;
	
	var step8_result = step8(l, array, 0);
	l = step8_result.lesson;
	array = step8_result.array;
	
	l = step_check_if_done(l, arrow);
	
	//PRE-TEST
	t.equal(array._.length, 2);
	t.equal(array._.values[0], null);
	
	var output = l.next();
	
	setTimeout(function() {
		t.ok(check.number(array._.values[0]));
		t.ok(check.null(array._.values[1]));
		
		t.ok(output.value.match(/Moving the value/));
		t.ok(output.value.match(/move from/));
		t.ok(output.value.match(/move to/));
		
		t.equal(l._step_state, l._STEP_INCREMENT_MOVE_1);
		
		TEARDOWN();
		t.end();
	}, 1500);
});

function step_move_value(lesson, array, source, destination) {
	array._.move_within(source, destination, {tween:false});
	
	lesson._step_state = lesson._STEP_INCREMENT_MOVE_1;
	
	return {lesson:lesson, array:array};
}

test('[lesson.next()] correct, _STEP_INCREMENT_MOVE 1 & 2', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:2, fill:2});
	var arrow = array._.arrow;
	
	var l = lesson({UI:ui, array:array, arrow:arrow, index:0});
	l = step1(l);
	l = step2(l);
	l = step3(l);
	l = step4(l);
	l = step5(l);
	l = step6(l);
	
	var step7_result = step7(l, array, 0);
	l = step7_result.lesson;
	array = step7_result.array;
	
	var step8_result = step8(l, array, 0);
	l = step8_result.lesson;
	array = step8_result.array;
	
	l = step_check_if_done(l, arrow);
	
	var step_move_value_result = step_move_value(l, array, 1, 0);
	l = step_move_value_result.lesson;
	array = step_move_value_result.array;
	
	//TEST
	var move_from_index = l._move_from_arrow._.index;
	var move_to_index = l._move_to_arrow._.index;
	
	var output = l.next();
	
	setTimeout(function() {
		t.ok(output.value.match(/Incrementing the move arrows/));
		
		t.equal(move_from_index+1, l._move_from_arrow._.index, "should see the 'from' arrow incremented");
		
		t.equal(l._step_state, l._STEP_INCREMENT_MOVE_2, "should be in step two of the incrementing of the move arrows");
		
		l.next();
		
		setTimeout(function() {
			t.equal(move_to_index+1, l._move_to_arrow._.index, "should see the 'to' arrow incremented");
			
			t.equal(l._step_state, l._STEP_CHECK_IF_DONE, "should be checking if the moving is done");
			
			TEARDOWN();
			t.end();
		}, 1500);
	}, 1500);
});

test('[lesson.next()] correct, integration testing', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:2, fill:2});
	var arrow = array._.arrow;
	
	ui.stage.add(array);
	
	var l = lesson({UI:ui, array:array, arrow:arrow, index:0});
	l._state = l._READY;
	
	var command_queue = [];
	
	function step_1() {
		l.next();
	};
	command_queue.push(step_1);
	
	function step_1_test() {
		console.log("STEP 1, testing");
		var output = ui.output.get();
		
		t.ok(output.match(/delete a value/));
		t.equal(l._step_state, l._STEP_2_STATEMENT);
	};
	command_queue.push(step_1_test);
	
	function step_2() {
		l.next();
	};
	command_queue.push(step_2);
	
	function step_2_test() {
		console.log("STEP 2, testing");
		var output = ui.output.get();
		
		t.ok(output.match(/remove the value/));
		t.ok(output.match(/index/));	
		t.equal(l._step_state, l._STEP_3_STATEMENT);
	};
	command_queue.push(step_2_test);
	
	function step_3() {
		l.next();
	};
	command_queue.push(step_3);
	
	function step_3_test() {
		console.log("STEP 3, testing");
		var output = ui.output.get();
		
		t.ok(output.match(/allocate two arrows/));
		t.ok(output.match(/move_to/));
		t.ok(output.match(/move_from/));
		t.equal(l._step_state, l._STEP_4_STATEMENT);
	};
	command_queue.push(step_3_test);
	
	function step_4() {
		l.next();
	};
	command_queue.push(step_4);
	
	function step_4_test() {
		console.log("STEP 4, testing");
		var output = ui.output.get();
		
		t.ok(output.match(/move values from/));
		t.ok(output.match(/move_from/));
		t.ok(output.match(/move_to/));
		t.equal(l._step_state, l._STEP_5_STATEMENT);
	};
	command_queue.push(step_4_test);
	
	function step_5() {
		l.next();
	};
	command_queue.push(step_5);
	
	function step_5_test() {
		console.log("STEP 5, testing");
		var output = ui.output.get();
		
		t.ok(output.match(/increment both/));
		t.ok(output.match(/continue moving/));
		t.ok(output.match(/move_from/));
		t.ok(output.match(/tail/));
		t.equal(l._step_state, l._STEP_6_STATEMENT);
	};
	command_queue.push(step_5_test);
	
	function step_6() {
		l.next();
	};
	command_queue.push(step_6);
	
	function step_6_test() {
		console.log("STEP 6, testing");
		var output = ui.output.get();
		
		t.ok(output.match(/remove the/));
		t.ok(output.match(/arrows/));
		t.ok(output.match(/tail/));
		t.ok(output.match(/back one/));
		t.ok(output.match(/one smaller/));
		t.ok(output.match(/value at index/));
		
		t.equal(l._step_state, l._STEP_7_DELETE);
	};
	command_queue.push(step_6_test);
	
	function step_7() {
		l.next();
	};
	command_queue.push(step_7);
	
	function step_7_test() {
		console.log("STEP 7, testing");
		var output = ui.output.get();
		
		t.ok(output.match(/Removing the value/));
		t.equal(array._.values.length, 2);
		t.equal(array._.values[0], null);
		
		t.equal(l._step_state, l._STEP_8_ALLOCATE_MOVERS);
	};
	command_queue.push(step_7_test);
	
	function step_8() {
		l.next();
	};
	command_queue.push(step_8);
	
	function step_8_test() {
		console.log("STEP 8, testing");
		var output = ui.output.get();
		
		t.ok(output.match(/Placing/));
		t.ok(output.match(/move to/));
		t.ok(output.match(/move from/));
		
		t.ok(check.not.undefined(l._move_to_arrow));
		t.equal(l._move_to_arrow._.index, 0);
		t.ok(check.not.undefined(l._move_from_arrow));
		t.equal(l._move_from_arrow._.index, 1);
		
		t.equal(l._step_state, l._STEP_CHECK_IF_DONE);
	};
	command_queue.push(step_8_test);
	
	function step_9() {
		l.next();
	};
	command_queue.push(step_9);
	
	function step_9_test() {
		console.log("STEP 9, testing");
		var output = ui.output.get();
		
		t.ok(output.match(/move from/));
		t.ok(output.match(/same index/));
		t.ok(output.match(/tail/));
		t.ok(output.match(/done moving/));
		
		t.equal(l._step_state, l._STEP_MOVE_VALUE);
	};
	command_queue.push(step_9_test);
	
	function step_10() {
		l.next();
	};
	command_queue.push(step_10);
	
	function step_10_test() {
		console.log("STEP 10, testing");
		var output = ui.output.get();
		
		t.ok(check.number(array._.values[0]));
		t.ok(check.null(array._.values[1]));
		
		t.ok(output.match(/Moving the value/));
		t.ok(output.match(/move from/));
		t.ok(output.match(/move to/));
		
		t.equal(l._step_state, l._STEP_INCREMENT_MOVE_1);
	};
	command_queue.push(step_10_test);
	
	//get values of the move arrows before incrementing
	var move_from_index;
	var move_to_index;
	
	function step_11() {
		move_from_index = l._move_from_arrow._.index;
		move_to_index = l._move_to_arrow._.index;
		
		l.next();
	};
	command_queue.push(step_11);
	
	function step_11_test() {
		console.log("STEP 11, testing");
		var output = ui.output.get();
		
		t.ok(output.match(/Incrementing the move arrows/));
		
		t.equal(move_from_index+1, l._move_from_arrow._.index, "should see the 'from' arrow incremented");
		
		t.equal(l._step_state, l._STEP_INCREMENT_MOVE_2, "should be in step two of the incrementing of the move arrows");
		
		move_from_index = undefined;
	};
	command_queue.push(step_11_test);
	
	function step_12() {
		l.next();
	};
	command_queue.push(step_12);
	
	function step_12_test() {
		console.log("STEP 12, testing");
		var output = ui.output.get();
		
		t.equal(move_to_index+1, l._move_to_arrow._.index, "should see the 'to' arrow incremented");
			
		t.equal(l._step_state, l._STEP_CHECK_IF_DONE, "should be checking if the moving is done");
		
		move_to_index = undefined;
	};
	command_queue.push(step_12_test);
	
	function step_13() {
		l.next();
	};
	command_queue.push(step_13);
	
	function step_13_test() {
		console.log("STEP 13, testing");
		var output = ui.output.get();
		
		t.ok(output.match(/move from/));
		t.ok(output.match(/same index/));
		t.ok(output.match(/tail/));
		t.ok(output.match(/done moving/));
		
		t.equal(l._step_state, l._STEP_CLEANUP_1);
	};
	command_queue.push(step_13_test);
	
	function step_14() {
		l.next();
	};
	command_queue.push(step_14);
	
	function step_14_test() {
		console.log("STEP 14, testing");
		var output = ui.output.get();
		
		t.ok(output.match(/no values left to move/));
		t.ok(output.match(/de-allocating/));
		t.ok(output.match(/move arrows/));
		
		t.ok(check.undefined(l._move_to_arrow));
		t.ok(check.undefined(l._move_from_arrow));
		
		t.equal(l._step_state, l._STEP_CLEANUP_2);
	};
	command_queue.push(step_14_test);
	
	function step_15() {
		l.next();
	};
	command_queue.push(step_15);
	
	function step_15_test() {
		console.log("STEP 15, testing");
		var output = ui.output.get();
		
		t.ok(output.match(/Moving/));
		t.ok(output.match(/tail/));
		t.ok(output.match(/back one space/));
		
		t.equal(l._arrow._.index, 1);
		
		t.equal(l._step_state, l._STEP_CLEANUP_3);
	};
	command_queue.push(step_15_test);
	
	function step_16() {
		l.next();
	};
	command_queue.push(step_16);
	
	function step_16_test() {
		console.log("STEP 16, testing");
		var output = ui.output.get();
		
		t.ok(output.match(/smaller/));
		t.ok(output.match(/removing the selected value/));
		
		t.ok(check.undefined(l._step_state), "no longer going through steps");
		t.equal(l._state, l._READY);
	};
	command_queue.push(step_16_test);
	
	//iterate through the next part of the lesson
	function step_17() {
		l.next();
	};
	command_queue.push(step_17);
	command_queue.push(step_17);
	command_queue.push(step_17);
	command_queue.push(step_17);
	command_queue.push(step_17);
	command_queue.push(step_17);
	command_queue.push(step_17);
	command_queue.push(step_17);
	command_queue.push(step_17);
	command_queue.push(step_17);
	command_queue.push(step_17);
	command_queue.push(step_17);
	
	function step_17_test() {
		console.log("STEP 17, testing");
		var output = ui.output.get();
		
		t.ok(check.undefined(l._step_state), "no longer going through steps");
		t.equal(l._state, l._DONE);
	};
	command_queue.push(step_17_test);
	
	var iter = command_queue[Symbol.iterator]();
	
	var intervalID = setInterval(function() {
		var result = iter.next();
		
		if (!result.done) {
			result.value();
		} else {
			console.log("DONE");
			//TEARDOWN();
			t.end();
			clearInterval(intervalID);
		}
	}, 3000);
});

//tail
