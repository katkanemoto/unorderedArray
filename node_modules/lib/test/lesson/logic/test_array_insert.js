var lesson = require('lib/lesson/logic/array_insert');
var test = require('tape');
var check = require('check-types');

function SETUP() {
	var lesson_UI = require('lib/UI/lesson_UI');
	var UI = lesson_UI();
	UI.next();	//get the testing lesson_UI into the LESSON state, so that get_proxy() works
	return UI.get_proxy();
}

function TEARDOWN() {
	var primitives = require("lib/util/primitives");
	var stage = primitives.get('stage');
	
	//reset the stage
	stage.clear();
	stage.removeAllChildren();
	
	//delete the text input created by lesson_UI
	var div = document.getElementById('canvas_container');
	//	find the input control
	var input_index;
	for (var i = 0; i < div.children.length; i++) {
		if (div.children[i].type === "text") {
			//don't delete inside the array while iterating over it
			input_index = i;
		}
	};
	
	//if there was a text input, then delete it
	if (input_index) {
		div.removeChild(div.children[input_index]);
	}
	
	//clear the pub sub
	var pub_sub = require('pubsub-js');
	pub_sub.clearAllSubscriptions();
};

TEARDOWN();

test('[lesson] incorrect, no arguments', function (t) {
	t.plan(2);
	
	//SETUP
	var ui = SETUP();
	
	//TEST
	try {
		lesson();
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Requires argument object/), 'what argument caused the problem');
	}
	
	TEARDOWN();
});

test('[lesson] incorrect, index undefined', function (t) {
	t.plan(4);
	
	//SETUP
	var ui = SETUP();
	
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:1});
	var arrow = array._.arrow;
	
	//TEST
	try {
		lesson({UI:ui, array:array, arrow:arrow});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Required argument: index/), 'what argument caused the problem');
		t.ok(message.match(/integer index/), 'how to fix it');
		t.ok(message.match(/tail/), 'how to fix it');
	}
	
	TEARDOWN();
});

test('[lesson] incorrect, index defined, but wrong value', function (t) {
	t.plan(4);
	
	//SETUP
	var ui = SETUP();
	
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:1});
	var arrow = array._.arrow;
	
	//TEST
	try {
		lesson({UI:ui, array:array, arrow:arrow, index:-1});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Required argument: index/), 'what argument caused the problem');
		t.ok(message.match(/integer index/), 'how to fix it');
		t.ok(message.match(/tail/), 'how to fix it');
	}
	
	TEARDOWN();
});

test('[lesson] incorrect, index defined, but wrong value', function (t) {
	t.plan(4);
	
	//SETUP
	var ui = SETUP();
	
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:1});
	var arrow = array._.arrow;
	
	//TEST
	try {
		lesson({UI:ui, array:array, arrow:arrow, index:2});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Required argument: index/), 'what argument caused the problem');
		t.ok(message.match(/integer index/), 'how to fix it');
		t.ok(message.match(/tail/), 'how to fix it');
	}
	
	TEARDOWN();
});

test('[lesson] incorrect, index defined, but wrong value', function (t) {
	t.plan(4);
	
	//SETUP
	var ui = SETUP();
	
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:2, fill:1});
	var arrow = array._.arrow;
	
	//TEST
	try {
		lesson({UI:ui, array:array, arrow:arrow, index:3});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Required argument: index/), 'what argument caused the problem');
		t.ok(message.match(/integer index/), 'how to fix it');
		t.ok(message.match(/tail/), 'how to fix it');
	}
	
	TEARDOWN();
});

test('[lesson] incorrect, value undefined', function (t) {
	t.plan(3);
	
	//SETUP
	var ui = SETUP();
	
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:1});
	var arrow = array._.arrow;
	
	//TEST
	try {
		lesson({UI:ui, array:array, arrow:arrow, index:0});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Required argument: value/), 'what argument caused the problem');
		t.ok(message.match(/should be a number/), 'how to fix it');
	}
	
	TEARDOWN();
});

test('[lesson] incorrect, value defined, but wrong type', function (t) {
	t.plan(3);
	
	//SETUP
	var ui = SETUP();
	
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:1});
	var arrow = array._.arrow;
	
	//TEST
	try {
		lesson({UI:ui, array:array, arrow:arrow, index:0, value:"some bad type"});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Required argument: value/), 'what argument caused the problem');
		t.ok(message.match(/should be a number/), 'how to fix it');
	}
	
	TEARDOWN();
});

test('[lesson] correct', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1});
	var arrow = array._.arrow;
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0, value:0});
	
	//TEST
	t.equal(result._state, result._READY, "in the correct start to start the lesson logic");
	
	TEARDOWN();
	t.end();
});

test('[lesson.next()] correct, in INIT state', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1});
	var arrow = array._.arrow;
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0, value:0});
	result._state = result._INIT;
	
	//TEST
	t.notOk(result.next());
	
	TEARDOWN();
	t.end();
});

test('[lesson.next()] correct, _DONE state handling', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1});
	var arrow = array._.arrow;
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0, value:0});
	result._state = result._DONE;
	
	//TEST
	var output = result.next();
	
	t.ok(output.value.match(/Cannot insert/));
	t.ok(output.value.match(/into a full array/));
	
	t.ok(check.undefined(result._step_state), "no longer going through steps");
	t.equal(result._state, result._DONE);
	t.ok(output.done);
	
	TEARDOWN();
	t.end();
});

test('[lesson.next()] correct, in READY state', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1});
	var arrow = array._.arrow;
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0, value:0});
	result._state = result._READY;
	
	//TEST
	var output = result.next();
	t.equal(result._state, result._RUN);
	t.equal(result._step_state, result._STEP_2_STATEMENT);
	
	TEARDOWN();
	t.end();
});

test('[lesson.next()] correct, _STEP_1_STATEMENT', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0, value:0});
	result._state = result._READY;
	
	//TEST
	var output = result.next();
	t.ok(output.value.match(/insert a value/));
	t.equal(result._step_state, result._STEP_2_STATEMENT);
	
	TEARDOWN();
	t.end();
});

function step1(lesson, ui) {
	ui.output.self.y -= 60;
	
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_2_STATEMENT;
	return lesson;
}

test('[lesson.next()] correct, _STEP_2_STATEMENT', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1});
	var arrow = array._.arrow;
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0, value:0});
	result = step1(result, ui);
	
	//TEST
	var output = result.next();
	t.ok(output.value.match(/empty spot/));
	t.ok(output.value.match(/move values/));
	t.equal(result._step_state, result._STEP_3_STATEMENT);
	
	TEARDOWN();
	t.end();
});

function step2(lesson) {
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_3_STATEMENT;
	return lesson;
}

test('[lesson.next()] correct, _STEP_3_STATEMENT', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0, value:0});
	result = step1(result, ui);
	result = step2(result);
	
	//TEST
	var output = result.next();
	t.ok(output.value.match(/either case/));
	t.ok(output.value.match(/insert/));
	t.ok(output.value.match(/add/));
	t.ok(output.value.match(/is empty/));
	t.equal(result._step_state, result._STEP_4_STATEMENT);
	
	TEARDOWN();
	t.end();
});

function step3(lesson) {
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_4_STATEMENT;
	return lesson;
}

test('[lesson.next()] correct, _STEP_4_STATEMENT', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0, value:0});
	result = step1(result, ui);
	result = step2(result);
	result = step3(result);
	
	//TEST
	var output = result.next();
	t.ok(output.value.match(/increment/));
	t.ok(output.value.match(/tail/));
	t.equal(result._step_state, result._STEP_5_STATEMENT);
	
	TEARDOWN();
	t.end();
});

function step4(lesson) {
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_5_STATEMENT;
	return lesson;
}

test('[lesson.next()] correct, _STEP_5_STATEMENT', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0, value:0});
	result = step1(result, ui);
	result = step2(result);
	result = step3(result);
	result = step4(result);
	
	//TEST
	var output = result.next();
	t.ok(output.value.match(/allocate two arrows/));
	t.ok(output.value.match(/empty index/));
	t.ok(output.value.match(/index before/));
	t.equal(result._step_state, result._STEP_6_STATEMENT);
	
	TEARDOWN();
	t.end();
});

function step5(lesson) {
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_6_STATEMENT;
	return lesson;
}

test('[lesson.next()] correct, _STEP_6_STATEMENT', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0, value:0});
	result = step1(result, ui);
	result = step2(result);
	result = step3(result);
	result = step4(result);
	result = step5(result);
	
	//TEST
	var output = result.next();
	t.ok(output.value.match(/move values/));
	t.ok(output.value.match(/move_from/));
	t.ok(output.value.match(/move_to/));
	
	t.equal(result._step_state, result._STEP_7_STATEMENT);
	
	TEARDOWN();
	t.end();
});

function step6(lesson) {
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_7_STATEMENT;
	return lesson;
}

test('[lesson.next()] correct, _STEP_7_STATEMENT', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0, value:0});
	result = step1(result, ui);
	result = step2(result);
	result = step3(result);
	result = step4(result);
	result = step5(result);
	result = step6(result);
	
	//TEST
	var output = result.next();
	t.ok(output.value.match(/decrement/));
	t.ok(output.value.match(/index is empty/));
	
	t.equal(result._step_state, result._STEP_8_STATEMENT);
	
	TEARDOWN();
	t.end();
});

function step7(lesson) {
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_8_STATEMENT;
	return lesson;
}

test('[lesson.next()] correct, _STEP_8_STATEMENT', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1});
	var arrow = array._.arrow;
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0, value:0});
	result = step1(result, ui);
	result = step2(result);
	result = step3(result);
	result = step4(result);
	result = step5(result);
	result = step6(result);
	result = step7(result);
	
	//TEST
	var output = result.next();
	t.ok(output.value.match(/remove/));
	t.ok(output.value.match(/move/));
	t.ok(output.value.match(/larger/));
	
	t.equal(result._step_state, result._STEP_SETUP_INSERT_ARROW);
	
	TEARDOWN();
	t.end();
});

function step8(lesson) {
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_SETUP_INSERT_ARROW;
	return lesson;
}

test('[lesson.next()] correct, _STEP_SETUP_INSERT_ARROW', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1});
	var arrow = array._.arrow;
	
	ui.stage.add(array);
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0, value:0});
	result = step1(result, ui);
	result = step2(result);
	result = step3(result);
	result = step4(result);
	result = step5(result);
	result = step6(result);
	result = step7(result);
	result = step8(result);
	
	//TEST
	var output = result.next();
	
	t.ok(output.value.match(/insert/));
	t.ok(output.value.match(/index/));
	
	t.ok(check.not.undefined(result._insert_arrow));
	t.equal(result._insert_arrow._.index, 0);
	
	t.equal(result._step_state, result._STEP_MOVE_TAIL);
	
	TEARDOWN();
	t.end();
});

function _STEP_SETUP_INSERT_ARROW(lesson) {
	lesson._insert_arrow = lesson._array._.iterator("insert");
	lesson._insert_arrow._.set(lesson._index, {tween:false});
	lesson._array.addChild(lesson._insert_arrow);
	
	lesson._step_state = lesson._STEP_MOVE_TAIL;
	
	return lesson;
}

test('[lesson.next()] correct, _STEP_MOVE_TAIL', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1});
	var arrow = array._.arrow;
	
	ui.stage.add(array);
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0, value:0});
	result = step1(result, ui);
	result = step2(result);
	result = step3(result);
	result = step4(result);
	result = step5(result);
	result = step6(result);
	result = step7(result);
	result = step8(result);
	result = _STEP_SETUP_INSERT_ARROW(result);
	
	//TEST
	var arrow_initial_position = arrow._.index;
	
	var output = result.next();
	
	setTimeout(function() {
		t.ok(output.value.match(/Moving/));
		t.ok(output.value.match(/tail/));
		
		t.equal(arrow_initial_position + 1, arrow._.index);
		
		t.equal(result._step_state, result._STEP_ALLOCATE_MOVERS);
		
		TEARDOWN();
		t.end();
	}, 1500);
});

function _STEP_MOVE_TAIL(lesson, arrow) {
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_ALLOCATE_MOVERS;
	
	arrow._.next({tween:false});
	
	return lesson;
}

test('[lesson.next()] correct, _STEP_ALLOCATE_MOVERS', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1});
	var arrow = array._.arrow;
	
	ui.stage.add(array);
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0, value:0});
	result = step1(result, ui);
	result = step2(result);
	result = step3(result);
	result = step4(result);
	result = step5(result);
	result = step6(result);
	result = step7(result);
	result = step8(result);
	result = _STEP_SETUP_INSERT_ARROW(result);
	result = _STEP_MOVE_TAIL(result, arrow);
	
	//TEST
	var output = result.next();
	t.ok(output.value.match(/Placing/));
	t.ok(output.value.match(/move to/));
	t.ok(output.value.match(/move from/));
	
	t.ok(check.not.undefined(result._move_to_arrow));
	t.equal(result._move_to_arrow._.index, 0);
	t.ok(check.not.undefined(result._move_from_arrow));
	t.equal(result._move_from_arrow._.index, -1);
	
	t.equal(result._step_state, result._STEP_CHECK_IF_DONE);
	
	TEARDOWN();
	t.end();
});

function _STEP_ALLOCATE_MOVERS(lesson) {
	lesson._state = lesson._RUN;
	lesson._move_to_arrow = lesson._array._.iterator("move\nto");
	lesson._move_to_arrow._.set(lesson._arrow._.index - 1, {tween:false});
	lesson._array.addChild(lesson._move_to_arrow);
	
	lesson._move_from_arrow = lesson._array._.iterator("move\nfrom");
	lesson._move_from_arrow._.set(lesson._move_to_arrow._.index - 1, {tween:false});
	lesson._array.addChild(lesson._move_from_arrow);
	
	lesson._step_state = lesson._STEP_CHECK_IF_DONE;
	
	return lesson;
}

test('[lesson.next()] correct, _STEP_CHECK_IF_DONE (done moving)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1});
	var arrow = array._.arrow;
	
	ui.stage.add(array);
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0, value:0});
	result = step1(result, ui);
	result = step2(result);
	result = step3(result);
	result = step4(result);
	result = step5(result);
	result = step6(result);
	result = step7(result);
	result = step8(result);
	result = _STEP_SETUP_INSERT_ARROW(result);
	result = _STEP_MOVE_TAIL(result, arrow);
	result = _STEP_ALLOCATE_MOVERS(result);
	
	//TEST
	var output = result.next();
	t.ok(output.value.match(/move to/));
	t.ok(output.value.match(/same index/));
	t.ok(output.value.match(/insert/));
	t.ok(output.value.match(/done moving/));
	
	t.equal(result._step_state, result._STEP_FOUND_IT);
	
	TEARDOWN();
	t.end();
});

function _STEP_CHECK_IF_DONE(lesson) {
	if (lesson._move_to_arrow._.index === lesson._insert_arrow._.index) {
		//if we're done, then cleanup the lesson
		lesson._step_state = lesson._STEP_FOUND_IT;
	} else {
		//if we're not done, then move a value forward in the array one space
		lesson._step_state = lesson._STEP_MOVE_VALUE;
	}
	
	return lesson;
};

test('[lesson.next()] correct, _STEP_FOUND_IT', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1});
	var arrow = array._.arrow;
	
	ui.stage.add(array);
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0, value:0});
	result = step1(result, ui);
	result = step2(result);
	result = step3(result);
	result = step4(result);
	result = step5(result);
	result = step6(result);
	result = step7(result);
	result = step8(result);
	result = _STEP_SETUP_INSERT_ARROW(result);
	result = _STEP_MOVE_TAIL(result, arrow);
	result = _STEP_ALLOCATE_MOVERS(result);
	result = _STEP_CHECK_IF_DONE(result);
	
	//TEST
	var output = result.next();

	t.ok(output.value.match(/insert/));
	
	t.equal(result._step_state, result._STEP_DEALLOCATE_MOVERS);
	
	TEARDOWN();
	t.end();
});

function _STEP_FOUND_IT(lesson) {
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_DEALLOCATE_MOVERS;
	return lesson
};

test('[lesson.next()] correct, _STEP_DEALLOCATE_MOVERS', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1});
	var arrow = array._.arrow;
	
	ui.stage.add(array);
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0, value:0});
	result = step1(result, ui);
	result = step2(result);
	result = step3(result);
	result = step4(result);
	result = step5(result);
	result = step6(result);
	result = step7(result);
	result = step8(result);
	result = _STEP_SETUP_INSERT_ARROW(result);
	result = _STEP_MOVE_TAIL(result, arrow);
	result = _STEP_ALLOCATE_MOVERS(result);
	result = _STEP_CHECK_IF_DONE(result);
	result = _STEP_FOUND_IT(result);
	
	//TEST
	var move_from = result._move_from_arrow;
	var move_to = result._move_to_arrow;
	
	var output = result.next();

	t.ok(output.value.match(/remove/));
	t.ok(output.value.match(/move/));
	t.ok(output.value.match(/declutter/));
	
	t.notOk(array.contains(move_from));
	t.notOk(array.contains(move_to));
	t.ok(check.undefined(result._move_from_arrow));
	t.ok(check.undefined(result._move_to_arrow));
	
	t.equal(result._step_state, result._STEP_INSERT_VALUE);
	
	TEARDOWN();
	t.end();
});

function _STEP_DEALLOCATE_MOVERS(lesson) {
	lesson._array.removeChild(lesson._move_to_arrow);
	lesson._array.removeChild(lesson._move_from_arrow);
	lesson._move_to_arrow = undefined;
	lesson._move_from_arrow = undefined;
	
	lesson._step_state = lesson._STEP_INSERT_VALUE;
	
	return lesson;
};

test('[lesson.next()] correct, _STEP_INSERT_VALUE (single value)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1});
	var arrow = array._.arrow;
	
	ui.stage.add(array);
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0, value:0});
	result = step1(result, ui);
	result = step2(result);
	result = step3(result);
	result = step4(result);
	result = step5(result);
	result = step6(result);
	result = step7(result);
	result = step8(result);
	result = _STEP_SETUP_INSERT_ARROW(result);
	result = _STEP_MOVE_TAIL(result, arrow);
	result = _STEP_ALLOCATE_MOVERS(result);
	result = _STEP_CHECK_IF_DONE(result);
	result = _STEP_FOUND_IT(result);
	result = _STEP_DEALLOCATE_MOVERS(result);
	
	//put some input in the text input
	ui.input.set(0);
	
	//TEST
	var output = result.next();
	setTimeout(function() {
		t.ok(output.value.match(/insert/));
		t.ok(output.value.match(/index/));
		
		t.equal(array.children[0].children.length, 2, "index 0 in the array has the element we inserted");
		t.equal(array._.values.length, 1);
		t.equal(array._.values[0], 0);
		t.equal(Number(array.children[0].children[1].text), 0, "...and the value of that element is 0, as we set");
		
		t.equal(result._step_state, result._STEP_CLEANUP);
		
		TEARDOWN();
		t.end();
	}, 1500);
});

function _STEP_INSERT_VALUE(lesson, value) {
	lesson._array.children[lesson._index].addChild(new createjs.Text(value));
	lesson._step_state = lesson._STEP_CLEANUP;
	return lesson;
};

test('[lesson.next()] correct, _STEP_CLEANUP (array full case)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1});
	var arrow = array._.arrow;
	
	ui.stage.add(array);
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0, value:0});
	result = step1(result, ui);
	result = step2(result);
	result = step3(result);
	result = step4(result);
	result = step5(result);
	result = step6(result);
	result = step7(result);
	result = step8(result);
	result = _STEP_SETUP_INSERT_ARROW(result);
	result = _STEP_MOVE_TAIL(result, arrow);
	result = _STEP_ALLOCATE_MOVERS(result);
	result = _STEP_CHECK_IF_DONE(result);
	result = _STEP_FOUND_IT(result);
	result = _STEP_DEALLOCATE_MOVERS(result);
	result = _STEP_INSERT_VALUE(result, 0);
	
	//TEST
	var insert_arrow = result._insert_arrow;
	
	var output = result.next();
	
	t.ok(output.value.value.match(/removing/));
	t.ok(output.value.value.match(/cleanup/));
	t.ok(output.value.value.match(/full/));
	
	t.equal(result._step_state, undefined);
	t.equal(result._state, result._DONE);
	
	t.ok(check.undefined(result._insert_arrow));
	t.notOk(array.contains(insert_arrow));
	
	t.ok(output.done);
	t.ok(output.value.full);
	
	//TEARDOWN();
	t.end();
});

test('[lesson.next()] correct, _STEP_CLEANUP (array NOT full case)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:2});
	var arrow = array._.arrow;
	
	array._.push({value:new createjs.Text(0), tween:false});
	arrow._.next({tween:false});
	
	ui.stage.add(array);
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:1, value:1});
	result = step1(result, ui);
	result = step2(result);
	result = step3(result);
	result = step4(result);
	result = step5(result);
	result = step6(result);
	result = step7(result);
	result = step8(result);
	result = _STEP_SETUP_INSERT_ARROW(result);
	result = _STEP_MOVE_TAIL(result, arrow);
	result = _STEP_ALLOCATE_MOVERS(result);
	result = _STEP_CHECK_IF_DONE(result);
	result = _STEP_FOUND_IT(result);
	result = _STEP_DEALLOCATE_MOVERS(result);
	result = _STEP_INSERT_VALUE(result, 1);
	
	arrow._.index = 1;
	
	//TEST
	var insert_arrow = result._insert_arrow;
	
	var output = result.next();
	
	t.ok(output.value.value.match(/removing/));
	t.ok(output.value.value.match(/cleanup/));
	
	t.equal(result._step_state, undefined);
	t.equal(result._state, result._READY);
	
	t.ok(check.undefined(result._insert_arrow));
	t.notOk(array.contains(insert_arrow));
	
	t.ok(output.done);
	t.notOk(output.value.full);
	
	TEARDOWN();
	t.end();
});

test('[lesson.next()] correct, _STEP_MOVE_VALUE', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:2});
	var arrow = array._.arrow;
	
	array._.push({value:new createjs.Text(1), tween:false});
	arrow._.next({tween:false});
	
	ui.stage.add(array);
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0, value:0});
	result = step1(result, ui);
	result = step2(result);
	result = step3(result);
	result = step4(result);
	result = step5(result);
	result = step6(result);
	result = step7(result);
	result = step8(result);
	result = _STEP_SETUP_INSERT_ARROW(result);
	result = _STEP_MOVE_TAIL(result, arrow);
	result = _STEP_ALLOCATE_MOVERS(result);
	result = _STEP_CHECK_IF_DONE(result);
	
	//TEST
	var output = result.next();
	
	setTimeout(function() {
		t.ok(output.value.match(/Moving/));
		t.ok(output.value.match(/move from/));
		t.ok(output.value.match(/move to/));
		
		t.equal(array.children[result._move_to_arrow._.index].children.length, 2);
		t.equal(array.children[result._move_to_arrow._.index].children[1].text, 1);
		
		t.equal(array.children[result._move_from_arrow._.index].children.length, 1);
		
		TEARDOWN();
		t.end();
	}, 1500);
});

function _STEP_MOVE_VALUE(lesson) {
	lesson._array._.move_within(lesson._move_from_arrow._.index, lesson._move_to_arrow._.index, {tween:false});
	lesson._step_state = lesson._STEP_DECREMENT_MOVE_1;
	
	return lesson;
};

test('[lesson.next()] correct, _STEP_DECREMENT_MOVE_1', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:2});
	var arrow = array._.arrow;
	
	array._.push({value:new createjs.Text(1), tween:false});
	arrow._.next({tween:false});
	
	ui.stage.add(array);
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0, value:0});
	result = step1(result, ui);
	result = step2(result);
	result = step3(result);
	result = step4(result);
	result = step5(result);
	result = step6(result);
	result = step7(result);
	result = step8(result);
	result = _STEP_SETUP_INSERT_ARROW(result);
	result = _STEP_MOVE_TAIL(result, arrow);
	result = _STEP_ALLOCATE_MOVERS(result);
	result = _STEP_CHECK_IF_DONE(result);
	result = _STEP_MOVE_VALUE(result);
	
	//TEST
	var init_position = result._move_from_arrow._.index;
	
	var output = result.next();
	
	setTimeout(function() {
		t.ok(output.value.match(/Decrementing/));
		t.ok(output.value.match(/move arrows/));
		
		t.equal(result._move_from_arrow._.index, init_position - 1);
		
		t.equal(result._step_state, result._STEP_DECREMENT_MOVE_2);
		
		TEARDOWN();
		t.end();
	}, 1500);
});

function _STEP_DECREMENT_MOVE_1(lesson) {
	lesson._move_from_arrow._.set(lesson._move_from_arrow._.index-1, {tween:false});
			
	lesson._step_state = lesson._STEP_DECREMENT_MOVE_2;
	
	return lesson;
}

test('[lesson.next()] correct, _STEP_DECREMENT_MOVE_2', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:2});
	var arrow = array._.arrow;
	
	array._.push({value:new createjs.Text(1), tween:false});
	arrow._.next({tween:false});
	
	ui.stage.add(array);
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0, value:0});
	result = step1(result, ui);
	result = step2(result);
	result = step3(result);
	result = step4(result);
	result = step5(result);
	result = step6(result);
	result = step7(result);
	result = step8(result);
	result = _STEP_SETUP_INSERT_ARROW(result);
	result = _STEP_MOVE_TAIL(result, arrow);
	result = _STEP_ALLOCATE_MOVERS(result);
	result = _STEP_CHECK_IF_DONE(result);
	result = _STEP_MOVE_VALUE(result);
	result = _STEP_DECREMENT_MOVE_1(result);
	
	//TEST
	var init_position = result._move_to_arrow._.index;
	
	var output = result.next();
	
	setTimeout(function() {
		t.ok(output.value.match(/Decrementing/));
		t.ok(output.value.match(/move arrows/));
		
		t.equal(result._move_to_arrow._.index, init_position - 1);
		
		t.equal(result._step_state, result._STEP_CHECK_IF_DONE);
		
		TEARDOWN();
		t.end();
	}, 1500);
});

function _STEP_DECREMENT_MOVE_2(lesson) {
	lesson._move_to_arrow._.set(lesson._move_to_arrow._.index-1, {tween:false});
			
	//loop from here, until we've moved all the values in the array back one
	lesson._step_state = lesson._STEP_CHECK_IF_DONE;
	
	return lesson;
}

test('[lesson.next()] correct, _STEP_INSERT_VALUE (beginning of array)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:2, fill:1});
	var arrow = array._.arrow;
	
	ui.stage.add(array);
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:0, value:0});
	result = step1(result, ui);
	result = step2(result);
	result = step3(result);
	result = step4(result);
	result = step5(result);
	result = step6(result);
	result = step7(result);
	result = step8(result);
	result = _STEP_SETUP_INSERT_ARROW(result);
	result = _STEP_MOVE_TAIL(result, arrow);
	result = _STEP_ALLOCATE_MOVERS(result);
	result = _STEP_CHECK_IF_DONE(result);
	result = _STEP_MOVE_VALUE(result);
	result = _STEP_DECREMENT_MOVE_1(result);
	result = _STEP_DECREMENT_MOVE_2(result);
	result = _STEP_CHECK_IF_DONE(result);
	result = _STEP_FOUND_IT(result);
	result = _STEP_DEALLOCATE_MOVERS(result);
	
	//put some input in the text input
	ui.input.set(0);
	
	//TEST
	var output = result.next();
	setTimeout(function() {
		t.ok(output.value.match(/insert/));
		t.ok(output.value.match(/index/));
		
		t.equal(array.children[0].children.length, 2, "index 0 in the array has the element we inserted");
		t.equal(array._.values.length, 2);
		t.equal(array._.values[0], 0);
		t.equal(Number(array.children[0].children[1].text), 0, "...and the value of that element is 0, as we set");
		
		t.equal(result._step_state, result._STEP_CLEANUP);
		
		TEARDOWN();
		t.end();
	}, 1500);
});

test('[lesson.next()] correct, _STEP_INSERT_VALUE (end of array)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:2, fill:1});
	var arrow = array._.arrow;
	
	ui.stage.add(array);
	
	var result = lesson({UI:ui, array:array, arrow:arrow, index:1, value:0});
	result = step1(result, ui);
	result = step2(result);
	result = step3(result);
	result = step4(result);
	result = step5(result);
	result = step6(result);
	result = step7(result);
	result = step8(result);
	result = _STEP_SETUP_INSERT_ARROW(result);
	result = _STEP_MOVE_TAIL(result, arrow);
	result = _STEP_ALLOCATE_MOVERS(result);
	result = _STEP_CHECK_IF_DONE(result);
	result = _STEP_FOUND_IT(result);
	result = _STEP_DEALLOCATE_MOVERS(result);
	
	//put some input in the text input
	ui.input.set(0);
	
	//TEST
	var output = result.next();
	setTimeout(function() {
		t.ok(output.value.match(/insert/));
		t.ok(output.value.match(/index/));
		
		t.equal(array.children[1].children.length, 2, "index 0 in the array has the element we inserted");
		t.equal(array._.values.length, 2);
		t.equal(array._.values[1], 0);
		t.equal(Number(array.children[1].children[1].text), 0, "...and the value of that element is 0, as we set");
		
		t.equal(result._step_state, result._STEP_CLEANUP);
		
		TEARDOWN();
		t.end();
	}, 1500);
});

test('[lesson.next()] correct, integration testing (insert at end of array)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:2, fill:1});
	var arrow = array._.arrow;
	
	ui.stage.add(array);
	
	var l = lesson({UI:ui, array:array, arrow:arrow, index:1, value:0});
	l._state = l._READY;
	
	//TODO: change this so that the logic is passed in an object the lesson creates, that is setup to be tweened to the array, instead of having the logic grab the value itself
	ui.input.set(0);
	
	var command_queue = [];
	
	var intervalID = setInterval(function() {
		var result = l.next();
		
		if (result.done) {
			console.log("DONE");
			
			t.ok(result.value.full);
			
			t.equal(array._.values.length, 2);
			t.equal(array._.values[1], 0);
			t.equal(array.children[1].children[1].text, "0");
			
			TEARDOWN();
			t.end();
			clearInterval(intervalID);
		}
	}, 1500);
});

test('[lesson.next()] correct, integration testing (insert at beginning of array)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:2, fill:1});
	var arrow = array._.arrow;
	
	ui.stage.add(array);
	
	var l = lesson({UI:ui, array:array, arrow:arrow, index:0, value:0});
	l._state = l._READY;
	
	//TODO: change this so that the logic is passed in an object the lesson creates, that is setup to be tweened to the array, instead of having the logic grab the value itself
	ui.input.set(0);
	
	var command_queue = [];
	
	var intervalID = setInterval(function() {
		var result = l.next();
		
		if (result.done) {
			console.log("DONE");
			
			t.ok(result.value.full);
			
			t.equal(array._.values.length, 2);
			t.equal(array._.values[0], 0);
			t.equal(array.children[0].children[1].text, "0");
			
			TEARDOWN();
			t.end();
			clearInterval(intervalID);
		}
	}, 1500);
});

test('[lesson.next()] correct, integration testing (insert in the middle)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:4, fill:2});
	var arrow = array._.arrow;
	
	ui.stage.add(array);
	
	var l = lesson({UI:ui, array:array, arrow:arrow, index:1, value:0});
	l._state = l._READY;
	
	//TODO: change this so that the logic is passed in an object the lesson creates, that is setup to be tweened to the array, instead of having the logic grab the value itself
	ui.input.set(0);
	
	var command_queue = [];
	
	var intervalID = setInterval(function() {
		var result = l.next();
		
		if (result.done) {
			console.log("DONE");
			
			t.notOk(result.value.full);
			
			t.equal(array._.values.length, 3);
			t.equal(array._.values[1], 0);
			t.equal(array.children[1].children[1].text, "0");
			
			TEARDOWN();
			t.end();
			clearInterval(intervalID);
		}
	}, 1500);
});

test('[lesson.next()] correct, integration testing (multiple inserts)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:4, fill:1});
	var arrow = array._.arrow;
	
	ui.stage.add(array);
	
	var l = lesson({UI:ui, array:array, arrow:arrow, index:0, value:0});
	l._state = l._READY;
	
	var number_of_inserts = 0;
	
	//TODO: change this so that the logic is passed in an object the lesson creates, that is setup to be tweened to the array, instead of having the logic grab the value itself
	ui.input.set(0);
	
	var intervalID = setInterval(function() {
		var result = l.next();
		
		if (result.done && number_of_inserts === 2) {
			t.ok(result.value.full);
			
			t.equal(array._.values.length, 4, "should see the fourth value in the array");
			t.equal(array._.values[1], 2, "the third value should be 2");
			t.equal(array.children[1].children[1].text, "2", "and we should see 2 in the UI array");
			
			TEARDOWN();
			t.end();
			clearInterval(intervalID);
		}
		
		if (result.done && number_of_inserts === 1) {
			t.notOk(result.value.full);
			
			t.equal(array._.values.length, 3, "should see the third value in the array");
			t.equal(array._.values[2], 1, "the third value should be 1");
			t.equal(array.children[2].children[1].text, "1", "and we should see 1 in the UI array");
			
			number_of_inserts += 1;
			ui.input.set(2);
			l = lesson({UI:ui, array:array, arrow:arrow, index:1, value:2});
		}
		
		if (result.done && number_of_inserts === 0) {
			t.notOk(result.value.full);
			
			t.equal(array._.values.length, 2, "should see the second value in the array");
			t.equal(array._.values[0], 0, "the second value should be 0");
			t.equal(array.children[0].children[1].text, "0", "and should see 0 in the UI array");
			
			number_of_inserts += 1;
			ui.input.set(1);
			l = lesson({UI:ui, array:array, arrow:arrow, index:2, value:1});
		}
	}, 1500);
});

//tail
