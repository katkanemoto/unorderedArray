var lesson = require('lib/lesson/logic/array_binary_search');
var test = require('tape');
var check = require('check-types');

function SETUP() {
	var lesson_UI = require('lib/UI/lesson_UI');
	var UI = lesson_UI();
	UI.next();	//get the testing lesson_UI into the LESSON state, so that get_proxy() works
	return UI.get_proxy();
}

function TEARDOWN() {
	var primitives = require("lib/util/primitives");
	var stage = primitives.get('stage');
	
	//reset the stage
	stage.clear();
	stage.removeAllChildren();
	
	//delete the text input created by lesson_UI
	var div = document.getElementById('canvas_container');
	//	find the input control
	var input_index;
	for (var i = 0; i < div.children.length; i++) {
		if (div.children[i].type === "text") {
			//don't delete inside the array while iterating over it
			input_index = i;
		}
	};
	
	//if there was a text input, then delete it
	if (input_index) {
		div.removeChild(div.children[input_index]);
	}
	
	//clear the pub sub
	var pub_sub = require('pubsub-js');
	pub_sub.clearAllSubscriptions();
};

TEARDOWN();

test('[lesson] incorrect, no arguments', function (t) {
	t.plan(2);
	
	//SETUP
	var ui = SETUP();
	
	//TEST
	try {
		lesson();
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Requires argument object/), 'what argument caused the problem');
	}
	
	TEARDOWN();
});

test('[lesson] incorrect, value undefined', function (t) {
	t.plan(3);
	
	//SETUP
	var ui = SETUP();
	
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:1});
	var arrow = array._.arrow;
	
	//TEST
	try {
		lesson({UI:ui, array:array, arrow:arrow});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Required argument: value/), 'what argument caused the problem');
		t.ok(message.match(/a value possible/), 'how to fix it');
	}
	
	TEARDOWN();
});

test('[lesson] correct', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	var result = lesson({UI:ui, array:array, arrow:arrow, value:0});
	
	//TEST
	t.equal(result._state, result._READY, "in the correct start to start the lesson logic");
	
	TEARDOWN();
	t.end();
});

test('[lesson.next()] correct, in INIT state', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	var result = lesson({UI:ui, array:array, arrow:arrow, value:0});
	result._state = result._INIT;
	
	//TEST
	t.notOk(result.next());
	
	TEARDOWN();
	t.end();
});

test('[lesson.next()] correct, empty array', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	arrow._.index = 0;
	
	var result = lesson({UI:ui, array:array, arrow:arrow, value:0});
	result._state = result._READY;
	
	//TEST
	var output = result.next();
	t.ok(output.value.match(/Cannot search/));
	t.ok(output.value.match(/empty array/));
	
	TEARDOWN();
	t.end();
});

test('[lesson.next()] correct, _STEP_1_STATEMENT', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	var result = lesson({UI:ui, array:array, arrow:arrow, value:0});
	result._state = result._READY;
	
	//TEST
	var output = result.next();
	
	t.equal(result._state, result._RUN);
	t.equal(result._step_state, result._STEP_2_STATEMENT);
	
	t.ok(output.value.match(/low/));
	t.ok(output.value.match(/high/));
	t.ok(output.value.match(/mid/));
	
	TEARDOWN();
	t.end();
});

function _STEP_1_STATEMENT(lesson, ui) {
	ui.output.self.y -= 80;
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_2_STATEMENT;
	return lesson;
};

test('[lesson.next()] correct, _STEP_2_STATEMENT', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	var result = lesson({UI:ui, array:array, arrow:arrow, value:0});
	result = _STEP_1_STATEMENT(result, ui);
	
	//TEST
	var output = result.next();
	
	t.equal(result._state, result._RUN);
	t.equal(result._step_state, result._STEP_3_STATEMENT);
	
	t.ok(output.value.match(/found the value/));
	t.ok(output.value.match(/check 'mid'/));
	t.ok(output.value.match(/examine the rest of the array/));
	
	TEARDOWN();
	t.end();
});

function _STEP_2_STATEMENT(lesson) {
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_3_STATEMENT;
	return lesson;
};

test('[lesson.next()] correct, _STEP_3_STATEMENT', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	var result = lesson({UI:ui, array:array, arrow:arrow, value:0});
	result = _STEP_1_STATEMENT(result, ui);
	result = _STEP_2_STATEMENT(result);
	
	//TEST
	var output = result.next();
	
	t.equal(result._state, result._RUN);
	t.equal(result._step_state, result._STEP_4_STATEMENT);
	
	t.ok(output.value.match(/array is ordered/));
	t.ok(output.value.match(/subarray that is larger/));
	t.ok(output.value.match(/values less than 'mid'/));
	
	TEARDOWN();
	t.end();
});

function _STEP_3_STATEMENT(lesson) {
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_4_STATEMENT;
	return lesson;
};

test('[lesson.next()] correct, _STEP_4_STATEMENT', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	var result = lesson({UI:ui, array:array, arrow:arrow, value:0});
	result = _STEP_1_STATEMENT(result, ui);
	result = _STEP_2_STATEMENT(result);
	result = _STEP_3_STATEMENT(result);
	
	//TEST
	var output = result.next();
	
	t.equal(result._state, result._RUN);
	t.equal(result._step_state, result._STEP_5_STATEMENT);
	
	t.ok(output.value.match(/move 'low'/));
	t.ok(output.value.match(/show the bounds/));
	
	TEARDOWN();
	t.end();
});

function _STEP_4_STATEMENT(lesson, ui) {
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_5_STATEMENT;
	return lesson;
};

test('[lesson.next()] correct, _STEP_5_STATEMENT', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	var result = lesson({UI:ui, array:array, arrow:arrow, value:0});
	result = _STEP_1_STATEMENT(result, ui);
	result = _STEP_2_STATEMENT(result);
	result = _STEP_3_STATEMENT(result);
	result = _STEP_4_STATEMENT(result, ui);
	
	//TEST
	var output = result.next();
	
	t.equal(result._state, result._RUN);
	t.equal(result._step_state, result._STEP_ALLOCATE_ARROWS);
	
	t.ok(output.value.match(/continue shrinking/));
	t.ok(output.value.match(/searching for/));
	t.ok(output.value.match(/new subarray/));
	
	TEARDOWN();
	t.end();
});

function _STEP_5_STATEMENT(lesson, ui) {
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_ALLOCATE_ARROWS;
	return lesson;
};

test('[lesson.next()] correct, _STEP_ALLOCATE_ARROWS', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:7, fill:7, ordered:true, x:30, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	var result = lesson({UI:ui, array:array, arrow:arrow, value:0});
	result = _STEP_1_STATEMENT(result, ui);
	result = _STEP_2_STATEMENT(result);
	result = _STEP_3_STATEMENT(result);
	result = _STEP_4_STATEMENT(result, ui);
	result = _STEP_5_STATEMENT(result, ui);
	
	//TEST
	var output = result.next();
	
	t.equal(result._state, result._RUN);
	t.equal(result._step_state, result._STEP_CONSIDER_SUBARRAY);
	
	t.ok(output.value.match(/low/));
	t.ok(output.value.match(/high/));
	t.ok(output.value.match(/mid/));
	
	t.ok(check.not.undefined(result._low));
	t.equal(result._low._.index, 0);
	t.ok(check.not.undefined(result._mid));
	t.ok(result._mid._.index > 0 && result._mid._.index < 6);
	t.ok(check.not.undefined(result._high));
	t.equal(result._high._.index, 6);
	
	TEARDOWN();
	t.end();
});

function _STEP_ALLOCATE_ARROWS(lesson, array, ui) {
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_CONSIDER_SUBARRAY;
	
	ui.output.self.y += 40;
	
	lesson._low = array._.iterator("low");
	lesson._low._.set(0, {tween:false});
	array.addChild(lesson._low);
	
	lesson._high = array._.iterator("high");
	lesson._high._.set(array._.values.length - 1, {tween:false});
	array.addChild(lesson._high);
	
	lesson._mid = array._.iterator("mid");
	var mid_index = Math.floor((array._.values.length - 1) / 2);
	lesson._mid._.set(mid_index, {tween:false});
	array.addChild(lesson._mid);
	
	return {lesson:lesson, array:array};
};

test('[lesson.next()] correct, _STEP_CONSIDER_SUBARRAY (valid subarray)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:7, fill:[0, 1, 2, 3, 4, 5, 6], x:30, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	//test finding the value on the first step
	var result = lesson({UI:ui, array:array, arrow:arrow, value:0});
	result = _STEP_1_STATEMENT(result, ui);
	result = _STEP_2_STATEMENT(result);
	result = _STEP_3_STATEMENT(result);
	result = _STEP_4_STATEMENT(result, ui);
	result = _STEP_5_STATEMENT(result, ui);
	var a = _STEP_ALLOCATE_ARROWS(result, array, ui);
	result = a.lesson;
	array = a.array;
	
	//TEST
	var output = result.next();
	
	t.equal(result._state, result._RUN);
	t.equal(result._step_state, result._STEP_MOVE_MID);
	
	t.ok(output.value.match(/examine values/));
	t.ok(output.value.match(/low/));
	t.ok(output.value.match(/high/));
	t.ok(output.value.match(/mid/));
	
	TEARDOWN();
	t.end();
});

test('[lesson.next()] correct, _STEP_CONSIDER_SUBARRAY (invalid subarray)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:7, fill:[0, 1, 2, 3, 4, 5, 6], x:30, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	//test finding the value on the first step
	var result = lesson({UI:ui, array:array, arrow:arrow, value:0});
	result = _STEP_1_STATEMENT(result, ui);
	result = _STEP_2_STATEMENT(result);
	result = _STEP_3_STATEMENT(result);
	result = _STEP_4_STATEMENT(result, ui);
	result = _STEP_5_STATEMENT(result, ui);
	var a = _STEP_ALLOCATE_ARROWS(result, array, ui);
	result = a.lesson;
	array = a.array;
	
	result._low._.index = 1;
	result._high._.index = 0;
	
	//TEST
	var output = result.next();
	
	t.equal(result._state, result._RUN);
	t.equal(result._step_state, result._STEP_CLEANUP);
	
	t.ok(output.value.match(/not in the array/));
	t.ok(output.value.match(/low/));
	t.ok(output.value.match(/high/));
	t.ok(output.value.match(/it would be at index/));
	
	t.notOk(result._found);
	t.ok(check.number(result._index));
	
	TEARDOWN();
	t.end();
});

function _STEP_CONSIDER_SUBARRAY(lesson, index) {
	lesson._state = lesson._RUN;
	
	if (lesson._low._.index <= lesson._high._.index) {
		lesson._step_state = lesson._STEP_MOVE_MID;
	} else {
		lesson._index = index;
		lesson._found = false;
		
		lesson._step_state = lesson._STEP_CLEANUP;
	}
	
	return lesson;
}

test('[lesson.next()] correct, _STEP_MOVE_MID (init)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:7, fill:[0, 1, 2, 3, 4, 5, 6], x:30, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	//test finding the value on the first step
	var result = lesson({UI:ui, array:array, arrow:arrow, value:0});
	result = _STEP_1_STATEMENT(result, ui);
	result = _STEP_2_STATEMENT(result);
	result = _STEP_3_STATEMENT(result);
	result = _STEP_4_STATEMENT(result, ui);
	result = _STEP_5_STATEMENT(result, ui);
	var a = _STEP_ALLOCATE_ARROWS(result, array, ui);
	result = a.lesson;
	array = a.array;
	result = _STEP_CONSIDER_SUBARRAY(result);
	
	//TEST
	var output = result.next();
	
	t.equal(result._state, result._RUN);
	t.equal(result._step_state, result._STEP_CHECK_FOUND);
	
	t.ok(output.value.match(/initial/));
	t.ok(output.value.match(/value/));
	t.ok(output.value.match(/instead of moving/));
	
	TEARDOWN();
	t.end();
});

test('[lesson.next()] correct, _STEP_MOVE_MID (low == high)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:7, fill:[0, 1, 2, 3, 4, 5, 6], x:30, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	//test finding the value on the first step
	var result = lesson({UI:ui, array:array, arrow:arrow, value:0});
	result = _STEP_1_STATEMENT(result, ui);
	result = _STEP_2_STATEMENT(result);
	result = _STEP_3_STATEMENT(result);
	result = _STEP_4_STATEMENT(result, ui);
	result = _STEP_5_STATEMENT(result, ui);
	var a = _STEP_ALLOCATE_ARROWS(result, array, ui);
	result = a.lesson;
	array = a.array;
	result = _STEP_CONSIDER_SUBARRAY(result);
	
	result._low._.set(0, {tween:false});
	result._high._.set(0, {tween:false});
	
	//TEST
	var output = result.next();
	
	setTimeout(function() {
		t.equal(result._state, result._RUN);
		t.equal(result._step_state, result._STEP_CHECK_FOUND);
		
		t.ok(output.value.match(/Moving/));
		t.ok(output.value.match(/mid/));
		t.ok(output.value.match(/last/));
		t.ok(output.value.match(/index we can search/));
		
		t.equal(result._mid._.index, 0);
		
		TEARDOWN();
		t.end();
	}, 1500);
});

test('[lesson.next()] correct, _STEP_MOVE_MID (low != high)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:7, fill:[0, 1, 2, 3, 4, 5, 6], x:30, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	//test finding the value on the first step
	var result = lesson({UI:ui, array:array, arrow:arrow, value:0});
	result = _STEP_1_STATEMENT(result, ui);
	result = _STEP_2_STATEMENT(result);
	result = _STEP_3_STATEMENT(result);
	result = _STEP_4_STATEMENT(result, ui);
	result = _STEP_5_STATEMENT(result, ui);
	var a = _STEP_ALLOCATE_ARROWS(result, array, ui);
	result = a.lesson;
	array = a.array;
	result = _STEP_CONSIDER_SUBARRAY(result);
	
	result._low._.set(0, {tween:false});
	result._high._.set(2, {tween:false});
	
	//TEST
	var output = result.next();
	
	setTimeout(function() {
		t.equal(result._state, result._RUN);
		t.equal(result._step_state, result._STEP_CHECK_FOUND);
		
		t.ok(output.value.match(/Moving/));
		t.ok(output.value.match(/mid/));
		
		t.equal(result._mid._.index, 1);
		
		TEARDOWN();
		t.end();
	}, 1500);
});

function _STEP_MOVE_MID(lesson) {
	var needs_move = true;
	var new_index = Math.floor((lesson._low._.index + lesson._high._.index) / 2);
	if (lesson._mid._.index === new_index) {
		output = "During this initial step, we'll check" + "\n" + 
		"the value at 'mid' instead of moving.";
		
		//...but in the initial case, it doesn't need to move
		needs_move = false;
	}
	
	if (needs_move) {
		lesson._mid._.set(new_index);
	}
	
	lesson._step_state = lesson._STEP_CHECK_FOUND;
	
	return lesson;
}

test('[lesson.next()] correct, _STEP_CHECK_FOUND (equal)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:7, fill:[0, 1, 2, 3, 4, 5, 6], x:30, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	//test finding the value on the first step
	var result = lesson({UI:ui, array:array, arrow:arrow, value:3});
	result = _STEP_1_STATEMENT(result, ui);
	result = _STEP_2_STATEMENT(result);
	result = _STEP_3_STATEMENT(result);
	result = _STEP_4_STATEMENT(result, ui);
	result = _STEP_5_STATEMENT(result, ui);
	var a = _STEP_ALLOCATE_ARROWS(result, array, ui);
	result = a.lesson;
	array = a.array;
	result = _STEP_CONSIDER_SUBARRAY(result);
	result = _STEP_MOVE_MID(result);
	
	//TEST
	var output = result.next();
	
	t.equal(result._state, result._RUN);
	t.equal(result._step_state, result._STEP_FOUND_EQUAL);
	
	t.ok(output.value.match(/mid/));
	t.ok(output.value.match(/equal to/));
	
	TEARDOWN();
	t.end();
});

test('[lesson.next()] correct, _STEP_CHECK_FOUND (less than)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:7, fill:[0, 1, 2, 3, 4, 5, 6], x:30, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	//test finding the value on the first step
	var result = lesson({UI:ui, array:array, arrow:arrow, value:0});
	result = _STEP_1_STATEMENT(result, ui);
	result = _STEP_2_STATEMENT(result);
	result = _STEP_3_STATEMENT(result);
	result = _STEP_4_STATEMENT(result, ui);
	result = _STEP_5_STATEMENT(result, ui);
	var a = _STEP_ALLOCATE_ARROWS(result, array, ui);
	result = a.lesson;
	array = a.array;
	result = _STEP_CONSIDER_SUBARRAY(result);
	result = _STEP_MOVE_MID(result);
	
	//TEST
	var output = result.next();
	
	t.equal(result._state, result._RUN);
	t.equal(result._step_state, result._STEP_NOT_FOUND_LESS_THAN);
	
	t.ok(output.value.match(/mid/));
	t.ok(output.value.match(/equal to/));
	
	TEARDOWN();
	t.end();
});

test('[lesson.next()] correct, _STEP_CHECK_FOUND (greater than)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:7, fill:[0, 1, 2, 3, 4, 5, 6], x:30, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	//test finding the value on the first step
	var result = lesson({UI:ui, array:array, arrow:arrow, value:6});
	result = _STEP_1_STATEMENT(result, ui);
	result = _STEP_2_STATEMENT(result);
	result = _STEP_3_STATEMENT(result);
	result = _STEP_4_STATEMENT(result, ui);
	result = _STEP_5_STATEMENT(result, ui);
	var a = _STEP_ALLOCATE_ARROWS(result, array, ui);
	result = a.lesson;
	array = a.array;
	result = _STEP_CONSIDER_SUBARRAY(result);
	result = _STEP_MOVE_MID(result);
	
	//TEST
	var output = result.next();
	
	t.equal(result._state, result._RUN);
	t.equal(result._step_state, result._STEP_NOT_FOUND_GREATER_THAN);
	
	t.ok(output.value.match(/mid/));
	t.ok(output.value.match(/equal to/));
	
	TEARDOWN();
	t.end();
});

function _STEP_CHECK_FOUND(lesson, array, value) {
	lesson._state = lesson._RUN;
	
	var value_at_mid = array._.values[lesson._mid._.index];
	
	if (value_at_mid === value) {
		console.log("check found: equal");
		lesson._step_state = lesson._STEP_FOUND_EQUAL;
	}
	
	if (value < value_at_mid) {
		console.log("check found: less than");
		lesson._step_state = lesson._STEP_NOT_FOUND_LESS_THAN;
	}
	
	if (value > value_at_mid) {
		console.log("check found: greater than");
		lesson._step_state = lesson._STEP_NOT_FOUND_GREATER_THAN;
	}
	
	return lesson;
};

test('[lesson.next()] correct, _STEP_FOUND_EQUAL', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:7, fill:[0, 1, 2, 3, 4, 5, 6], x:30, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	//test finding the value on the first step
	var result = lesson({UI:ui, array:array, arrow:arrow, value:3});
	result = _STEP_1_STATEMENT(result, ui);
	result = _STEP_2_STATEMENT(result);
	result = _STEP_3_STATEMENT(result);
	result = _STEP_4_STATEMENT(result, ui);
	result = _STEP_5_STATEMENT(result, ui);
	var a = _STEP_ALLOCATE_ARROWS(result, array, ui);
	result = a.lesson;
	array = a.array;
	result = _STEP_CONSIDER_SUBARRAY(result);
	result = _STEP_MOVE_MID(result);
	result = _STEP_CHECK_FOUND(result, array, 3);
	
	result._mid._.index = 0;
	
	//TEST
	var output = result.next();
	
	t.equal(result._state, result._RUN);
	t.equal(result._step_state, result._STEP_CLEANUP);
	
	t.equal(result._index, 0);
	t.ok(result._found);
	
	TEARDOWN();
	t.end();
});

function _STEP_FOUND_EQUAL(lesson, index) {
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_CLEANUP;
	lesson._found_index = index;
	
	lesson._index = lesson._mid._.index;
	lesson._found = true;
	
	return lesson;
};

test('[lesson.next()] correct, _STEP_CLEANUP (found)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:7, fill:[0, 1, 2, 3, 4, 5, 6], x:30, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	//test finding the value on the first step
	var result = lesson({UI:ui, array:array, arrow:arrow, value:3});
	result = _STEP_1_STATEMENT(result, ui);
	result = _STEP_2_STATEMENT(result);
	result = _STEP_3_STATEMENT(result);
	result = _STEP_4_STATEMENT(result, ui);
	result = _STEP_5_STATEMENT(result, ui);
	var a = _STEP_ALLOCATE_ARROWS(result, array, ui);
	result = a.lesson;
	array = a.array;
	result = _STEP_CONSIDER_SUBARRAY(result);
	result = _STEP_MOVE_MID(result);
	result = _STEP_CHECK_FOUND(result, array, 3);
	result = _STEP_FOUND_EQUAL(result, 3);
	
	//TEST
	var low = result._low;
	var high = result._high;
	var mid = result._mid;
	
	var output = result.next();
	
	t.equal(result._state, result._READY);
	t.ok(check.undefined(result._step_state));
	
	t.ok(check.undefined(result._low));
	t.ok(check.undefined(result._mid));
	t.ok(check.undefined(result._high));
	
	t.notOk(array.contains(low));
	t.notOk(array.contains(high));
	t.notOk(array.contains(mid));
	
	t.ok(check.undefined(result._index));
	t.notOk(result._found);
	
	t.equal(output.value.index, 3);
	t.ok(output.value.found);
	
	TEARDOWN();
	t.end();
});

test('[lesson.next()] correct, _STEP_NOT_FOUND_LESS_THAN', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:7, fill:[0, 1, 2, 3, 4, 5, 6], x:30, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	//test finding the value on the first step
	var result = lesson({UI:ui, array:array, arrow:arrow, value:0});
	result = _STEP_1_STATEMENT(result, ui);
	result = _STEP_2_STATEMENT(result);
	result = _STEP_3_STATEMENT(result);
	result = _STEP_4_STATEMENT(result, ui);
	result = _STEP_5_STATEMENT(result, ui);
	var a = _STEP_ALLOCATE_ARROWS(result, array, ui);
	result = a.lesson;
	array = a.array;
	result = _STEP_CONSIDER_SUBARRAY(result);
	result = _STEP_MOVE_MID(result);
	result = _STEP_CHECK_FOUND(result, array, 0);
	
	//TEST
	var output = result.next();
	
	t.equal(result._state, result._RUN);
	t.equal(result._step_state, result._STEP_MOVE_LOW);
	
	t.ok(output.value.match(/\!\=/));
	t.ok(output.value.match(/\</));
	t.ok(output.value.match(/to the left/));
	
	t.ok(check.number(result._subarray_low));
	t.equal(result._subarray_low, 0);
	t.ok(check.number(result._subarray_high));
	t.equal(result._subarray_high, 2);
	
	TEARDOWN();
	t.end();
});

function _STEP_NOT_FOUND_LESS_THAN(lesson) {
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_MOVE_LOW;
	
	lesson._subarray_low = lesson._low._.index;
	lesson._subarray_high = lesson._mid._.index - 1;
	
	return lesson
};

test('[lesson.next()] correct, _STEP_NOT_FOUND_GREATER_THAN', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:7, fill:[0, 1, 2, 3, 4, 5, 6], x:30, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	//test finding the value on the first step
	var result = lesson({UI:ui, array:array, arrow:arrow, value:6});
	result = _STEP_1_STATEMENT(result, ui);
	result = _STEP_2_STATEMENT(result);
	result = _STEP_3_STATEMENT(result);
	result = _STEP_4_STATEMENT(result, ui);
	result = _STEP_5_STATEMENT(result, ui);
	var a = _STEP_ALLOCATE_ARROWS(result, array, ui);
	result = a.lesson;
	array = a.array;
	result = _STEP_CONSIDER_SUBARRAY(result);
	result = _STEP_MOVE_MID(result);
	result = _STEP_CHECK_FOUND(result, array, 6);
	
	//TEST
	var output = result.next();
	
	t.equal(result._state, result._RUN);
	t.equal(result._step_state, result._STEP_MOVE_LOW);
	
	t.ok(output.value.match(/\!\=/));
	t.ok(output.value.match(/\>/));
	t.ok(output.value.match(/to the right/));
	
	t.ok(check.number(result._subarray_low));
	t.equal(result._subarray_low, 4);
	t.ok(check.number(result._subarray_high));
	t.equal(result._subarray_high, 6);
	
	TEARDOWN();
	t.end();
});

function _STEP_NOT_FOUND_GREATER_THAN(lesson) {
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_MOVE_LOW;
	
	lesson._subarray_low = lesson._mid._.index + 1;
	lesson._subarray_high = lesson._high._.index;
	
	return lesson
};

test('[lesson.next()] correct, _STEP_MOVE_LOW (low at correct index)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:7, fill:[0, 1, 2, 3, 4, 5, 6], x:30, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	//test finding the value on the first step
	var result = lesson({UI:ui, array:array, arrow:arrow, value:0});
	result = _STEP_1_STATEMENT(result, ui);
	result = _STEP_2_STATEMENT(result);
	result = _STEP_3_STATEMENT(result);
	result = _STEP_4_STATEMENT(result, ui);
	result = _STEP_5_STATEMENT(result, ui);
	var a = _STEP_ALLOCATE_ARROWS(result, array, ui);
	result = a.lesson;
	array = a.array;
	result = _STEP_CONSIDER_SUBARRAY(result);
	result = _STEP_MOVE_MID(result);
	result = _STEP_CHECK_FOUND(result, array, 6);
	result = _STEP_NOT_FOUND_LESS_THAN(result);
	
	result._subarray_low = 0;
	result._low._.index = 0;
	
	//TEST
	var output = result.next();
	
	t.equal(result._state, result._RUN);
	t.equal(result._step_state, result._STEP_MOVE_HIGH);
	
	t.ok(output.value.match(/don't need to move/));
	t.ok(output.value.match(/correct index/));
	t.ok(output.value.match(/low/));
	
	TEARDOWN();
	t.end();
});

test('[lesson.next()] correct, _STEP_MOVE_LOW (low needs to move)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:7, fill:[0, 1, 2, 3, 4, 5, 6], x:30, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	//test finding the value on the first step
	var result = lesson({UI:ui, array:array, arrow:arrow, value:0});
	result = _STEP_1_STATEMENT(result, ui);
	result = _STEP_2_STATEMENT(result);
	result = _STEP_3_STATEMENT(result);
	result = _STEP_4_STATEMENT(result, ui);
	result = _STEP_5_STATEMENT(result, ui);
	var a = _STEP_ALLOCATE_ARROWS(result, array, ui);
	result = a.lesson;
	array = a.array;
	result = _STEP_CONSIDER_SUBARRAY(result);
	result = _STEP_MOVE_MID(result);
	result = _STEP_CHECK_FOUND(result, array, 6);
	result = _STEP_NOT_FOUND_GREATER_THAN(result);
	
	result._subarray_low = 1;
	result._low._.index = 0;
	
	//TEST
	var output = result.next();
	
	setTimeout(function() {
		t.equal(result._state, result._RUN);
		t.equal(result._step_state, result._STEP_MOVE_HIGH);
		
		t.ok(output.value.match(/Moving/));
		t.ok(output.value.match(/low/));
		
		t.equal(result._low._.index, 1);
		
		TEARDOWN();
		t.end();
	}, 1500);
});

function _STEP_MOVE_LOW(lesson) {
	if (lesson._subarray_low !== lesson._low._.index) {
		lesson._low._.set(lesson._subarray_low, {tween:false});
	}
	
	lesson._step_state = lesson._STEP_MOVE_HIGH;
	
	return lesson;
};

test('[lesson.next()] correct, _STEP_MOVE_HIGH (at correct index)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:7, fill:[0, 1, 2, 3, 4, 5, 6], x:30, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	//test finding the value on the first step
	var result = lesson({UI:ui, array:array, arrow:arrow, value:0});
	result = _STEP_1_STATEMENT(result, ui);
	result = _STEP_2_STATEMENT(result);
	result = _STEP_3_STATEMENT(result);
	result = _STEP_4_STATEMENT(result, ui);
	result = _STEP_5_STATEMENT(result, ui);
	var a = _STEP_ALLOCATE_ARROWS(result, array, ui);
	result = a.lesson;
	array = a.array;
	result = _STEP_CONSIDER_SUBARRAY(result);
	result = _STEP_MOVE_MID(result);
	result = _STEP_CHECK_FOUND(result, array, 6);
	result = _STEP_NOT_FOUND_GREATER_THAN(result);
	result = _STEP_MOVE_LOW(result);
	
	result._subarray_high = 0;
	result._high._.index = 0;
	
	//TEST
	var output = result.next();
	
	t.equal(result._state, result._RUN);
	t.equal(result._step_state, result._STEP_CONSIDER_SUBARRAY);
	
	t.ok(output.value.match(/don't need to move/));
	t.ok(output.value.match(/correct index/));
	t.ok(output.value.match(/high/));
	
	TEARDOWN();
	t.end();
});

test('[lesson.next()] correct, _STEP_MOVE_HIGH (needs to move)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:7, fill:[0, 1, 2, 3, 4, 5, 6], x:30, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	//test finding the value on the first step
	var result = lesson({UI:ui, array:array, arrow:arrow, value:0});
	result = _STEP_1_STATEMENT(result, ui);
	result = _STEP_2_STATEMENT(result);
	result = _STEP_3_STATEMENT(result);
	result = _STEP_4_STATEMENT(result, ui);
	result = _STEP_5_STATEMENT(result, ui);
	var a = _STEP_ALLOCATE_ARROWS(result, array, ui);
	result = a.lesson;
	array = a.array;
	result = _STEP_CONSIDER_SUBARRAY(result);
	result = _STEP_MOVE_MID(result);
	result = _STEP_CHECK_FOUND(result, array, 6);
	result = _STEP_NOT_FOUND_GREATER_THAN(result);
	result = _STEP_MOVE_LOW(result);
	
	result._subarray_high = 2;
	result._high._.index = 6;
	
	//TEST
	var output = result.next();
	
	setTimeout(function() {
		t.equal(result._state, result._RUN);
		t.equal(result._step_state, result._STEP_CONSIDER_SUBARRAY);
		
		t.ok(output.value.match(/Moving/));
		t.ok(output.value.match(/high/));
		
		t.equal(result._high._.index, 2);
		
		TEARDOWN();
		t.end();
	}, 1500);
});

function _STEP_MOVE_HIGH(lesson) {
	if (lesson._subarray_high !== lesson._high._.index) {
		lesson._high._.set(lesson._subarray_high, {tween:false});
	}
	
	lesson._step_state = lesson._STEP_CONSIDER_SUBARRAY;
	
	return lesson;
};

test('[lesson.next()] correct, _STEP_CLEANUP (not found)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:7, fill:[0, 1, 2, 3, 4, 5, 6], x:30, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	//test finding the value on the first step
	var result = lesson({UI:ui, array:array, arrow:arrow, value:-1});
	result = _STEP_1_STATEMENT(result, ui);
	result = _STEP_2_STATEMENT(result);
	result = _STEP_3_STATEMENT(result);
	result = _STEP_4_STATEMENT(result, ui);
	result = _STEP_5_STATEMENT(result, ui);
	var a = _STEP_ALLOCATE_ARROWS(result, array, ui);
	result = a.lesson;
	array = a.array;
	result = _STEP_CONSIDER_SUBARRAY(result);
	result = _STEP_MOVE_MID(result);
	result = _STEP_CHECK_FOUND(result, array, -1);
	result = _STEP_NOT_FOUND_LESS_THAN(result);
	result = _STEP_MOVE_LOW(result);
	result = _STEP_MOVE_HIGH(result);
	
	result._high._.set(-1, {tween:false});
	result._mid._.set(0, {tween:false});
	result._low._.set(0, {tween:false});
	
	result = _STEP_CONSIDER_SUBARRAY(result, 0);
	
	//TEST
	var low = result._low;
	var high = result._high;
	var mid = result._mid;
	
	var output = result.next();
	
	t.equal(result._state, result._READY);
	t.ok(check.undefined(result._step_state));
	
	t.ok(check.undefined(result._low));
	t.ok(check.undefined(result._mid));
	t.ok(check.undefined(result._high));
	
	t.notOk(array.contains(low));
	t.notOk(array.contains(high));
	t.notOk(array.contains(mid));
	
	t.ok(check.undefined(result._index));
	t.notOk(result._found);
	
	t.equal(output.value.index, 0);
	t.notOk(output.value.found);
	
	TEARDOWN();
	t.end();
});

test('[lesson.next()] correct, integration testing (found first step)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:7, fill:[0, 1, 2, 3, 4, 5, 6], x:30, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	var search_value = 3;
	var l = lesson({UI:ui, array:array, arrow:arrow, value:search_value});
	l._state = l._READY;
	
	var command_queue = [];
	
	function step_1() {
		l.next();
	};
	command_queue.push(step_1);
	
	function step_1_test() {
		console.log("STEP 1, testing");
		var output = ui.output.get();
		
		t.equal(l._state, l._RUN);
		t.equal(l._step_state, l._STEP_2_STATEMENT);		
	};
	command_queue.push(step_1_test);
	
	function step_2() {
		l.next();
	};
	command_queue.push(step_2);
	
	function step_2_test() {
		console.log("STEP 2, testing");
		var output = ui.output.get();
		
		t.equal(l._step_state, l._STEP_3_STATEMENT);
	};
	command_queue.push(step_2_test);
	
	function step_3() {
		l.next();
	};
	command_queue.push(step_3);
	
	function step_3_test() {
		console.log("STEP 3, testing");
		var output = ui.output.get();
		
		t.equal(l._step_state, l._STEP_4_STATEMENT);
	};
	command_queue.push(step_3_test);
	
	function step_4() {
		l.next();
	};
	command_queue.push(step_4);
	
	function step_4_test() {
		console.log("STEP 4, testing");
		var output = ui.output.get();
		
		t.equal(l._step_state, l._STEP_5_STATEMENT);
	};
	command_queue.push(step_4_test);
	
	function step_5() {
		l.next();
	};
	command_queue.push(step_5);
	
	function step_5_test() {
		console.log("STEP 5, testing");
		var output = ui.output.get();
		
		t.equal(l._step_state, l._STEP_ALLOCATE_ARROWS);
	};
	command_queue.push(step_5_test);
	
	function step_6() {
		l.next();
	};
	command_queue.push(step_6);
	
	function step_6_test() {
		console.log("STEP 6, testing");
		var output = ui.output.get();
		
		t.equal(l._step_state, l._STEP_CONSIDER_SUBARRAY);
	};
	command_queue.push(step_6_test);
	
	function step_7() {
		l.next();
	};
	command_queue.push(step_7);
	
	function step_7_test() {
		console.log("STEP 7, testing");
		var output = ui.output.get();
		
		t.equal(l._step_state, l._STEP_MOVE_MID);
	};
	command_queue.push(step_7_test);
	
	function step_8() {
		l.next();
	};
	command_queue.push(step_8);
	
	function step_8_test() {
		console.log("STEP 8, testing");
		var output = ui.output.get();
		
		t.equal(l._step_state, l._STEP_CHECK_FOUND);
	};
	command_queue.push(step_8_test);
	
	function step_9() {
		l.next();
	};
	command_queue.push(step_9);
	
	function step_9_test() {
		console.log("STEP 9, testing");
		var output = ui.output.get();
		
		t.equal(l._step_state, l._STEP_FOUND_EQUAL);
	};
	command_queue.push(step_9_test);
	
	function step_10() {
		l.next();
	};
	command_queue.push(step_10);
	
	function step_10_test() {
		console.log("STEP 10, testing");
		var output = ui.output.get();
		
		t.equal(l._step_state, l._STEP_CLEANUP);
	};
	command_queue.push(step_10_test);
	
	var ret;
	function step_11() {
		ret = l.next();
	};
	command_queue.push(step_11);
	
	function step_11_test() {
		console.log("STEP 11, testing");
		var output = ui.output.get();
		
		t.equal(l._state, l._READY);
		t.ok(check.undefined(l._step_state));
				
		t.ok(ret.value.found);
		t.equal(ret.value.index, 3);
	};
	command_queue.push(step_11_test);
	
	var iter = command_queue[Symbol.iterator]();
	
	var intervalID = setInterval(function() {
		var result = iter.next();
		
		if (!result.done) {
			result.value();
		} else {
			console.log("DONE");
			TEARDOWN();
			t.end();
			clearInterval(intervalID);
		}
	}, 1500);
});

test('[lesson.next()] correct, integration testing (found second step)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:7, fill:[0, 1, 2, 3, 4, 5, 6], x:30, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	var search_value = 1;
	var l = lesson({UI:ui, array:array, arrow:arrow, value:search_value});
	l._state = l._READY;
	
	var command_queue = [];
	
	function step_next() {
		l.next();
	};
	command_queue.push(step_next);
	
	function step_1_test() {
		console.log("STEP 1, testing");
		var output = ui.output.get();
		
		t.equal(l._state, l._RUN);
		t.equal(l._step_state, l._STEP_2_STATEMENT);		
	};
	command_queue.push(step_1_test);
	
	command_queue.push(step_next);
	
	function step_2_test() {
		console.log("STEP 2, testing");
		var output = ui.output.get();
		
		t.equal(l._step_state, l._STEP_3_STATEMENT);
	};
	command_queue.push(step_2_test);
	
	command_queue.push(step_next);
	
	function step_3_test() {
		console.log("STEP 3, testing");
		var output = ui.output.get();
		
		t.equal(l._step_state, l._STEP_4_STATEMENT);
	};
	command_queue.push(step_3_test);
	
	command_queue.push(step_next);
	
	function step_4_test() {
		console.log("STEP 4, testing");
		var output = ui.output.get();
		
		t.equal(l._step_state, l._STEP_5_STATEMENT);
	};
	command_queue.push(step_4_test);
	
	command_queue.push(step_next);
	
	function step_5_test() {
		console.log("STEP 5, testing");
		var output = ui.output.get();
		
		t.equal(l._step_state, l._STEP_ALLOCATE_ARROWS);
	};
	command_queue.push(step_5_test);
	
	command_queue.push(step_next);
	
	function step_6_test() {
		console.log("STEP 6, testing");
		var output = ui.output.get();
		
		t.equal(l._step_state, l._STEP_CONSIDER_SUBARRAY);
	};
	command_queue.push(step_6_test);
	
	command_queue.push(step_next);
	
	function step_7_test() {
		console.log("STEP 7, testing");
		var output = ui.output.get();
		
		t.equal(l._step_state, l._STEP_MOVE_MID);
	};
	command_queue.push(step_7_test);
	
	command_queue.push(step_next);
	
	function step_8_test() {
		console.log("STEP 8, testing");
		var output = ui.output.get();
		
		t.equal(l._step_state, l._STEP_CHECK_FOUND);
	};
	command_queue.push(step_8_test);
	
	command_queue.push(step_next);
	
	function step_9_test() {
		console.log("STEP 9, testing");
		var output = ui.output.get();
		
		t.equal(l._step_state, l._STEP_NOT_FOUND_LESS_THAN);
	};
	command_queue.push(step_9_test);
	
	command_queue.push(step_next);
	
	function step_10_test() {
		console.log("STEP 10, testing");
		var output = ui.output.get();
		
		t.equal(l._step_state, l._STEP_MOVE_LOW);
	};
	command_queue.push(step_10_test);
	
	command_queue.push(step_next);
	
	function step_11_test() {
		console.log("STEP 11, testing");
		var output = ui.output.get();
		
		t.equal(l._step_state, l._STEP_MOVE_HIGH);
	};
	command_queue.push(step_11_test);
	
	command_queue.push(step_next);
	
	function step_12_test() {
		console.log("STEP 12, testing");
		var output = ui.output.get();
		
		t.equal(l._step_state, l._STEP_CONSIDER_SUBARRAY);
	};
	command_queue.push(step_12_test);
	
	command_queue.push(step_next);
	
	function step_13_test() {
		console.log("STEP 13, testing");
		var output = ui.output.get();
		
		t.equal(l._step_state, l._STEP_MOVE_MID);
	};
	command_queue.push(step_13_test);
	
	command_queue.push(step_next);
	
	function step_14_test() {
		console.log("STEP 14, testing");
		var output = ui.output.get();
		
		t.equal(l._step_state, l._STEP_CHECK_FOUND);
	};
	command_queue.push(step_14_test);
	
	command_queue.push(step_next);
	
	function step_15_test() {
		console.log("STEP 15, testing");
		var output = ui.output.get();
		
		t.equal(l._step_state, l._STEP_FOUND_EQUAL);
	};
	command_queue.push(step_15_test);
	
	command_queue.push(step_next);
	
	function step_16_test() {
		console.log("STEP 16, testing");
		var output = ui.output.get();
		
		t.equal(l._step_state, l._STEP_CLEANUP);
	};
	command_queue.push(step_16_test);
	
	var ret;
	function step_last() {
		ret = l.next();
	};
	command_queue.push(step_last);
	
	function step_17_test() {
		console.log("STEP 17, testing");
		var output = ui.output.get();
		
		t.equal(l._state, l._READY);
		t.ok(check.undefined(l._step_state));
				
		t.ok(ret.value.found);
		t.equal(ret.value.index, 1);
	};
	command_queue.push(step_17_test);
	
	var iter = command_queue[Symbol.iterator]();
	
	var intervalID = setInterval(function() {
		var result = iter.next();
		
		if (!result.done) {
			result.value();
		} else {
			console.log("DONE");
			TEARDOWN();
			t.end();
			clearInterval(intervalID);
		}
	}, 1500);
});

test('[lesson.next()] correct, integration testing (found last step)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:7, fill:[0, 1, 2, 3, 4, 5, 6], x:30, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	var search_value = 0;
	var l = lesson({UI:ui, array:array, arrow:arrow, value:search_value});
	l._state = l._READY;
	
	var intervalID = setInterval(function() {
		var result = l.next();
		
		if (result.done) {
			console.log("DONE");
			
			t.ok(result.value.found);
			t.equal(result.value.index, 0);
			
			TEARDOWN();
			t.end();
			clearInterval(intervalID);
		}
	}, 1500);
});

test('[lesson.next()] correct, integration testing (not found, -1)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:6, fill:[0, 1, 2, 3, 4, 5], x:50, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	var search_value = -1;
	var l = lesson({UI:ui, array:array, arrow:arrow, value:search_value});
	l._state = l._READY;
	
	var intervalID = setInterval(function() {
		var result = l.next();
		
		if (result.done) {
			console.log("DONE");
			
			t.notOk(result.value.found);
			t.equal(result.value.index, 0);
			
			TEARDOWN();
			t.end();
			clearInterval(intervalID);
		}
	}, 1500);
});

test('[lesson.next()] correct, integration testing (5)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:6, fill:[0, 1, 2, 3, 4, 5], x:50, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	var search_value = 5;
	var l = lesson({UI:ui, array:array, arrow:arrow, value:search_value});
	l._state = l._READY;
	
	var intervalID = setInterval(function() {
		var result = l.next();
		
		if (result.done) {
			console.log("DONE");
			
			t.ok(result.value.found);
			t.equal(result.value.index, 5);
			
			TEARDOWN();
			t.end();
			clearInterval(intervalID);
		}
	}, 1500);
});

test('[lesson.next()] correct, integration testing (6, not found)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:6, fill:[0, 1, 2, 3, 4, 5], x:50, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	var search_value = 6;
	var l = lesson({UI:ui, array:array, arrow:arrow, value:search_value});
	l._state = l._READY;
	
	var intervalID = setInterval(function() {
		var result = l.next();
		
		if (result.done) {
			console.log("DONE");
			
			t.notOk(result.value.found);
			t.equal(result.value.index, 5);
			
			TEARDOWN();
			t.end();
			clearInterval(intervalID);
		}
	}, 1500);
});

test('[lesson.next()] correct, integration testing (4)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:6, fill:[0, 1, 2, 3, 4, 5], x:50, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	var search_value = 4;
	var l = lesson({UI:ui, array:array, arrow:arrow, value:search_value});
	l._state = l._READY;
	
	var intervalID = setInterval(function() {
		var result = l.next();
		
		if (result.done) {
			console.log("DONE");
			
			t.ok(result.value.found);
			t.equal(result.value.index, 4);
			
			TEARDOWN();
			t.end();
			clearInterval(intervalID);
		}
	}, 1500);
});

test('[lesson.next()] correct, integration testing (1)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:6, fill:[0, 1, 2, 3, 4, 5], x:50, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	var search_value = 1;
	var l = lesson({UI:ui, array:array, arrow:arrow, value:search_value});
	l._state = l._READY;
	
	var intervalID = setInterval(function() {
		var result = l.next();
		
		if (result.done) {
			console.log("DONE");
			
			t.ok(result.value.found);
			t.equal(result.value.index, 1);
			
			TEARDOWN();
			t.end();
			clearInterval(intervalID);
		}
	}, 1500);
});

test('[lesson.next()] correct, integration testing (1, not found)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:6, fill:[0, 2, 4, 6, 8, 10], x:50, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	var search_value = 1;
	var l = lesson({UI:ui, array:array, arrow:arrow, value:search_value});
	l._state = l._READY;
	
	var intervalID = setInterval(function() {
		var result = l.next();
		
		if (result.done) {
			console.log("DONE");
			
			t.notOk(result.value.found);
			t.equal(result.value.index, 1);
			
			TEARDOWN();
			t.end();
			clearInterval(intervalID);
		}
	}, 1500);
});

test('[lesson.next()] correct, integration testing (3, not found)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:6, fill:[0, 2, 4, 6, 8, 10], x:50, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	var search_value = 3;
	var l = lesson({UI:ui, array:array, arrow:arrow, value:search_value});
	l._state = l._READY;
	
	var intervalID = setInterval(function() {
		var result = l.next();
		
		if (result.done) {
			console.log("DONE");
			
			t.notOk(result.value.found);
			t.equal(result.value.index, 2);
			
			TEARDOWN();
			t.end();
			clearInterval(intervalID);
		}
	}, 1500);
});

test('[lesson.next()] correct, integration testing (7, not found)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:6, fill:[0, 2, 4, 6, 8, 10], x:50, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	var search_value = 7;
	var l = lesson({UI:ui, array:array, arrow:arrow, value:search_value});
	l._state = l._READY;
	
	var intervalID = setInterval(function() {
		var result = l.next();
		
		if (result.done) {
			console.log("DONE");
			
			t.notOk(result.value.found);
			t.equal(result.value.index, 4);
			
			TEARDOWN();
			t.end();
			clearInterval(intervalID);
		}
	}, 1500);
});

test('[lesson.next()] correct, integration testing (9, not found)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:6, fill:[0, 2, 4, 6, 8, 10], x:50, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	var search_value = 9;
	var l = lesson({UI:ui, array:array, arrow:arrow, value:search_value});
	l._state = l._READY;
	
	var intervalID = setInterval(function() {
		var result = l.next();
		
		if (result.done) {
			console.log("DONE");
			
			t.notOk(result.value.found);
			t.equal(result.value.index, 5);
			
			TEARDOWN();
			t.end();
			clearInterval(intervalID);
		}
	}, 1500);
});


test('[lesson.next()] correct, integration testing (0, found, in array values smaller than the array)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:7, fill:[0, 2, 4, 6, 8, 10], x:50, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	var search_value = 0;
	var l = lesson({UI:ui, array:array, arrow:arrow, value:search_value});
	l._state = l._READY;
	
	var intervalID = setInterval(function() {
		var result = l.next();
		
		if (result.done) {
			console.log("DONE");
			
			t.ok(result.value.found);
			t.equal(result.value.index, 0);
			
			TEARDOWN();
			t.end();
			clearInterval(intervalID);
		}
	}, 1500);
});

test('[lesson.next()] correct, integration testing (11, not found, in array values smaller than the array)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:7, fill:[0, 2, 4, 6, 8, 10], x:50, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	var search_value = 11;
	var l = lesson({UI:ui, array:array, arrow:arrow, value:search_value});
	l._state = l._READY;
	
	var intervalID = setInterval(function() {
		var result = l.next();
		
		if (result.done) {
			console.log("DONE");
			
			t.notOk(result.value.found);
			t.equal(result.value.index, 6);
			
			TEARDOWN();
			t.end();
			clearInterval(intervalID);
		}
	}, 1500);
});


test('[lesson.next()] correct, integration testing (9, not found, in array values smaller than the array)', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	//setup some test values on the array
	var array = array_setup({size:7, fill:[0, 2, 4, 6, 8, 10], x:50, y:145});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	var search_value = 9;
	var l = lesson({UI:ui, array:array, arrow:arrow, value:search_value});
	l._state = l._READY;
	
	var intervalID = setInterval(function() {
		var result = l.next();
		
		if (result.done) {
			console.log("DONE");
			
			t.notOk(result.value.found);
			t.equal(result.value.index, 5);
			
			TEARDOWN();
			t.end();
			clearInterval(intervalID);
		}
	}, 1500);
});
//tail