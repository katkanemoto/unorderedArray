var lesson = require('lib/lesson/logic/array_binary_search');
var test = require('tape');
var check = require('check-types');

function SETUP() {
	var lesson_UI = require('lib/UI/lesson_UI');
	var UI = lesson_UI();
	UI.next();	//get the testing lesson_UI into the LESSON state, so that get_proxy() works
	return UI.get_proxy();
}

function TEARDOWN() {
	var primitives = require("lib/util/primitives");
	var stage = primitives.get('stage');
	
	//reset the stage
	stage.clear();
	stage.removeAllChildren();
	
	//delete the text input created by lesson_UI
	var div = document.getElementById('canvas_container');
	//	find the input control
	var input_index;
	for (var i = 0; i < div.children.length; i++) {
		if (div.children[i].type === "text") {
			//don't delete inside the array while iterating over it
			input_index = i;
		}
	};
	
	//if there was a text input, then delete it
	if (input_index) {
		div.removeChild(div.children[input_index]);
	}
	
	//clear the pub sub
	var pub_sub = require('pubsub-js');
	pub_sub.clearAllSubscriptions();
};

TEARDOWN();

test('[lesson] incorrect, no arguments', function (t) {
	t.plan(2);
	
	//SETUP
	var ui = SETUP();
	
	//TEST
	try {
		lesson();
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Requires argument object/), 'what argument caused the problem');
	}
	
	TEARDOWN();
});

test('[lesson] incorrect, value undefined', function (t) {
	t.plan(3);
	
	//SETUP
	var ui = SETUP();
	
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:1});
	var arrow = array._.arrow;
	
	//TEST
	try {
		lesson({UI:ui, array:array, arrow:arrow});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Required argument: value/), 'what argument caused the problem');
		t.ok(message.match(/a value possible/), 'how to fix it');
	}
	
	TEARDOWN();
});

test('[lesson] correct', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	var result = lesson({UI:ui, array:array, arrow:arrow, value:0});
	
	//TEST
	t.equal(result._state, result._READY, "in the correct start to start the lesson logic");
	
	TEARDOWN();
	t.end();
});

test('[lesson.next()] correct, in INIT state', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	var result = lesson({UI:ui, array:array, arrow:arrow, value:0});
	result._state = result._INIT;
	
	//TEST
	t.notOk(result.next());
	
	TEARDOWN();
	t.end();
});

test('[lesson.next()] correct, empty array', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	arrow._.index = 0;
	
	var result = lesson({UI:ui, array:array, arrow:arrow, value:0});
	result._state = result._READY;
	
	//TEST
	var output = result.next();
	t.ok(output.value.match(/Cannot search/));
	t.ok(output.value.match(/empty array/));
	
	TEARDOWN();
	t.end();
});

test('[lesson.next()] correct, _STEP_1_STATEMENT', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	var result = lesson({UI:ui, array:array, arrow:arrow, value:0});
	result._state = result._READY;
	
	//TEST
	var output = result.next();
	
	t.equal(result._state, result._RUN);
	t.equal(result._step_state, result._STEP_2_STATEMENT);
	
	t.ok(output.value.match(/low/));
	t.ok(output.value.match(/high/));
	t.ok(output.value.match(/mid/));
	
	TEARDOWN();
	t.end();
});

function _STEP_1_STATEMENT(lesson) {
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_2_STATEMENT;
	return lesson;
};

test('[lesson.next()] correct, _STEP_2_STATEMENT', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	var result = lesson({UI:ui, array:array, arrow:arrow, value:0});
	result = _STEP_1_STATEMENT(result);
	
	//TEST
	var output = result.next();
	
	t.equal(result._state, result._RUN);
	t.equal(result._step_state, result._STEP_3_STATEMENT);
	
	t.ok(output.value.match(/found the value/));
	t.ok(output.value.match(/check 'mid'/));
	t.ok(output.value.match(/examine the rest of the array/));
	
	TEARDOWN();
	t.end();
});

function _STEP_2_STATEMENT(lesson) {
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_3_STATEMENT;
	return lesson;
};

test('[lesson.next()] correct, _STEP_3_STATEMENT', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	var result = lesson({UI:ui, array:array, arrow:arrow, value:0});
	result = _STEP_1_STATEMENT(result);
	result = _STEP_2_STATEMENT(result);
	
	//TEST
	var output = result.next();
	
	t.equal(result._state, result._RUN);
	t.equal(result._step_state, result._STEP_4_STATEMENT);
	
	t.ok(output.value.match(/array is ordered/));
	t.ok(output.value.match(/subarray that is larger/));
	t.ok(output.value.match(/values less than 'mid'/));
	
	TEARDOWN();
	t.end();
});

function _STEP_3_STATEMENT(lesson, ui) {
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_4_STATEMENT;
	ui.output.self.y -= 40;
	return lesson;
};

test('[lesson.next()] correct, _STEP_4_STATEMENT', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	var result = lesson({UI:ui, array:array, arrow:arrow, value:0});
	result = _STEP_1_STATEMENT(result);
	result = _STEP_2_STATEMENT(result);
	result = _STEP_3_STATEMENT(result, ui);
	
	//TEST
	var output = result.next();
	
	t.equal(result._state, result._RUN);
	t.equal(result._step_state, result._STEP_5_STATEMENT);
	
	t.ok(output.value.match(/move 'low'/));
	t.ok(output.value.match(/show the bounds/));
	
	TEARDOWN();
	t.end();
});

function _STEP_4_STATEMENT(lesson, ui) {
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_5_STATEMENT;
	ui.output.self.y += 40;
	return lesson;
};

test('[lesson.next()] correct, _STEP_5_STATEMENT', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_setup = require('lib/lesson/util/array_setup');
	var array = array_setup({size:1, fill:1});
	var arrow = array._.arrow;
	
	//add the array to the stage
	ui.stage.add(array);
	
	var result = lesson({UI:ui, array:array, arrow:arrow, value:0});
	result = _STEP_1_STATEMENT(result);
	result = _STEP_2_STATEMENT(result);
	result = _STEP_3_STATEMENT(result, ui);
	result = _STEP_4_STATEMENT(result, ui);
	
	//TEST
	var output = result.next();
	
	t.equal(result._state, result._RUN);
	t.equal(result._step_state, result._STEP_6_STATEMENT);
	
	t.ok(output.value.match(/continue shrinking/));
	t.ok(output.value.match(/searching for/));
	t.ok(output.value.match(/new subarray/));
	
	TEARDOWN();
	t.end();
});

function _STEP_5_STATEMENT(lesson, ui) {
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_6_STATEMENT;
	ui.output.self.y -= 40;
	return lesson;
};

//tail