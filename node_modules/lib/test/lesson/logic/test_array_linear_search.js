var lesson = require('lib/lesson/logic/array_linear_search');
var test = require('tape');
var check = require('check-types');

function SETUP() {
	var lesson_UI = require('lib/UI/lesson_UI');
	var UI = lesson_UI();
	UI.next();	//get the testing lesson_UI into the LESSON state, so that get_proxy() works
	return UI.get_proxy();
}

function TEARDOWN() {
	var primitives = require("lib/util/primitives");
	var stage = primitives.get('stage');
	
	//reset the stage
	stage.clear();
	stage.removeAllChildren();
	
	//delete the text input created by lesson_UI
	var div = document.getElementById('canvas_container');
	//	find the input control
	var input_index;
	for (var i = 0; i < div.children.length; i++) {
		if (div.children[i].type === "text") {
			//don't delete inside the array while iterating over it
			input_index = i;
		}
	};
	
	//if there was a text input, then delete it
	if (input_index) {
		div.removeChild(div.children[input_index]);
	}
	
	//clear the pub sub
	var pub_sub = require('pubsub-js');
	pub_sub.clearAllSubscriptions();
};

TEARDOWN();

test('[lesson.next] correct', function (t) {
	//SETUP
	var next_called = false;
	var args_called_with;
	var mock_this = {
		_next : function(options) {
			next_called = true;
			args_called_with = options;
		},
		_UI : {UI:true},
		_array : {array:true},
		_arrow : {arrow:true},
	}
	
	lesson.prototype.next.call(mock_this);
	
	//TEST	
	t.ok(next_called);
	t.deepEqual(args_called_with.UI, mock_this._UI, "saw the UI object");
	t.deepEqual(args_called_with.array, mock_this._array, "saw the array object");
	t.deepEqual(args_called_with.arrow, mock_this._arrow, "saw the ARROW object");
	
	//CLEANUP
	TEARDOWN();
	t.end();
});

test('[lesson] incorrect, no arguments', function (t) {
	t.plan(2);
	
	//SETUP
	var ui = SETUP();
	
	//TEST
	try {
		lesson();
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Requires argument object/), 'what argument caused the problem');
	}
	
	TEARDOWN();
});

test('[lesson] incorrect, argument object, no properties', function (t) {
	t.plan(3);
	
	//SETUP
	var ui = SETUP();
	
	//TEST
	try {
		lesson({});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Required argument: UI/), "tells you what's wrong");
		t.ok(message.match(/should be object/), "how to fix it");
	}
	
	TEARDOWN();
});

test('[lesson] incorrect, argument object, UI property set, bad type', function (t) {
	t.plan(3);
	
	//SETUP
	var ui = SETUP();
		
	//TEST
	try {
		lesson({UI:"some bad type"});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Required argument: UI/), "tells you what's wrong");
		t.ok(message.match(/should be object/), "how to fix it");
	}
	
	TEARDOWN();
});

test('[lesson] incorrect, argument object, UI property right type, array property not set', function (t) {
	t.plan(3);
	
	//SETUP
	var ui = SETUP();
	
	//TEST
	try {
		lesson({UI:ui});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Required argument: array/), "tells you what's wrong");
		t.ok(message.match(/should be type array_UI/), "how to fix it");
	}
	
	TEARDOWN();
});

test('[lesson] incorrect, argument object, UI property right type, array wrong type', function (t) {
	t.plan(3);
	
	//SETUP
	var ui = SETUP();
	
	//TEST
	try {
		lesson({UI:ui, array:"some bad type"});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Required argument: array/), "tells you what's wrong");
		t.ok(message.match(/should be type array_UI/), "how to fix it");
	}
	
	TEARDOWN();
});

test('[lesson] incorrect, argument object, UI property right type, array right type, arrow not set', function (t) {
	t.plan(3);
	
	//SETUP
	var ui = SETUP();
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:1});
	
	//TEST
	try {
		lesson({UI:ui, array:array});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Required argument: arrow/), "tells you what's wrong");
		t.ok(message.match(/should be type array_arrow_UI/), "how to fix it");
	}
	
	TEARDOWN();
});

test('[lesson] incorrect, argument object, UI property right type, array right type, arrow wrong type', function (t) {
	t.plan(3);
	
	//SETUP
	var ui = SETUP();
	
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:1});
	
	//TEST
	try {
		lesson({UI:ui, array:array, arrow:"some bad type"});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Required argument: arrow/), "tells you what's wrong");
		t.ok(message.match(/should be type array_arrow_UI/), "how to fix it");
	}
	
	TEARDOWN();
});

test('[lesson] incorrect, argument object, UI property right type, array right type, value not set', function (t) {
	t.plan(3);
	
	//SETUP
	var ui = SETUP();
	
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:1});
	var arrow = array._.arrow;
	
	//TEST
	try {
		lesson({UI:ui, array:array, arrow:arrow});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Required argument: value/), "tells you what's wrong");
		t.ok(message.match(/should be number/), "how to fix it");
	}
	
	TEARDOWN();
});

test('[lesson] incorrect, argument object, UI property right type, array right type, value wrong type', function (t) {
	t.plan(3);
	
	//SETUP
	var ui = SETUP();
	
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:1});
	var arrow = array._.arrow;
	
	//TEST
	try {
		lesson({UI:ui, array:array, arrow:arrow, value:"some bad type"});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Required argument: value/), "tells you what's wrong");
		t.ok(message.match(/should be number/), "how to fix it");
	}
	
	TEARDOWN();
});

test('[lesson] correct', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:1});
	var arrow = array._.arrow;
	
	var result = lesson({UI:ui, array:array, arrow:arrow, value:0});
	
	//TEST
	t.ok(check.function(result.next), "correctly setup the object");
	
	TEARDOWN();
	t.end();
});

test('[lesson._next] correct, STEP 1', function (t) {
	//SETUP
	var ui = SETUP();
	
	//put in some input to start the lesson
	//ui.input.set(0);
	
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:4});
	var arrow = array._.arrow;
	
	var l = lesson({UI:ui, array:array, arrow:arrow, value:0});
	l._state = l._READY;	//setup correct state
	
	//TEST
	var result = l._next({UI: ui, array:l._array, arrow:l._arrow, value:0});
	
	//TEST
	t.ok(result.value.match(/allocate a find arrow/));
	t.ok(result.value.match(/look through each item in the array/));
	t.ok(result.value.match(/if we found it/));
	t.ok(result.value.match(/report which index/));
	t.ok(result.value.match(/report an error/));
	t.equal(l._state, l._RUN);
	t.equal(l._step_state, l._STEP_2);
	t.ok(check.undefined(l._found_index), "the found index property should be set to undefined by this call");
	
	TEARDOWN();
	t.end();
});

/* function step_0(UI, value) {
	UI.input.set(value);
	return UI;
}; */

function step_1(UI, lesson) {
	//populate the test array with value 1...n, where n is the length of the array
	for (var i = 0; i < lesson._array._.length; i++) {
		var value = new createjs.Text(i+1);
		lesson._array._.push({value:value, tween:false});
		lesson._arrow._.next({tween:false});
	}
	
	lesson._input_tmp = UI.input.get();
	
	var original_y = UI.output.self.y;
	
	UI.output.self.y -= 20;
	
	UI.output.set("lesson instructions");
	
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_2;
	
	UI.output.self.y = original_y;
	
	return {UI:UI, lesson:lesson}
};

test('[lesson._next] correct, STEP 2', function (t) {
	//SETUP
	var ui = SETUP();
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:4});
	var arrow = array._.arrow;
	
	var l = lesson({UI:ui, array:array, arrow:arrow, value:0});
	
	//ui = step_0(ui, 0);
	
	var ret = step_1(ui, l);
	ui = ret.UI;
	l = ret.lesson;
	
	//TEST
	var result = l._next({UI: ui, array:l._array, arrow:l._arrow, value:0});
	
	//TEST
	t.ok(result.value.match(/Allocating a 'find' arrow/));
	t.ok(result.value.match(/pointing at the start/));
	
	t.equal(l._state, l._RUN);
	t.equal(l._step_state, l._STEP_SEARCHING_1);
	
	TEARDOWN();
	t.end();
});

function step_2(UI, lesson) {
	UI.output.set("setup find arrow");
	
	lesson._find_arrow = lesson._array._.iterator("find");
	lesson._array.addChild(lesson._find_arrow);
	
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_SEARCHING_1;
	
	return {UI:UI, lesson:lesson}
};

test('[lesson._next] correct, STEP SEARCHING 1, not found at current index & not at end of array', function (t) {
	//SETUP
	var ui = SETUP();
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:4});
	var arrow = array._.arrow;
	
	var l = lesson({UI:ui, array:array, arrow:arrow, value:0});
	
	//ui = step_0(ui, 0);
	
	var ret = step_1(ui, l);
	ui = ret.UI;
	l = ret.lesson;
	
	ret = step_2(ui, l);
	ui = ret.UI;
	l = ret.lesson;
	
	//TEST
	var result = l._next({UI: ui, array:l._array, arrow:l._arrow, value:0});
	
	//TEST
	t.ok(result.value.match(/value at the index/));
	t.ok(result.value.match(/equal to what we're/));
	t.ok(result.value.match(/searching for/));
	
	t.equal(l._state, l._RUN);
	//not found, continuing to search
	t.equal(l._step_state, l._STEP_SEARCHING_2);
	
	TEARDOWN();
	t.end();
});

test('[lesson._next] correct, STEP SEARCHING 1, found at current index', function (t) {
	//SETUP
	var ui = SETUP();
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:4});
	var arrow = array._.arrow;
	
	var l = lesson({UI:ui, array:array, arrow:arrow, value:1});
	
	//ui = step_0(ui, 1);
	
	var ret = step_1(ui, l);
	ui = ret.UI;
	l = ret.lesson;
	
	ret = step_2(ui, l);
	ui = ret.UI;
	l = ret.lesson;
	
	//TEST
	var result = l._next({UI: ui, array:l._array, arrow:l._arrow, value:1});
	
	//TEST
	t.ok(result.value.match(/value at the index/));
	t.ok(result.value.match(/equal to what we're/));
	t.ok(result.value.match(/searching for/));
	
	t.equal(l._state, l._RUN);
	//found the value, ending
	t.equal(l._step_state, l._STEP_END_FOUND);
	
	TEARDOWN();
	t.end();
});

test('[lesson._next] correct, STEP SEARCHING 1, end of the array', function (t) {
	//SETUP
	var ui = SETUP();
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:4});
	var arrow = array._.arrow;
	
	var l = lesson({UI:ui, array:array, arrow:arrow, value:0});
	
	//ui = step_0(ui, 0);
	
	var ret = step_1(ui, l);
	ui = ret.UI;
	l = ret.lesson;
	
	ret = step_2(ui, l);
	ui = ret.UI;
	l = ret.lesson;
	
	//find arrow is at the end of the array, pointing at the tail arrow
	l._find_arrow._.index = l._array._.length;
	
	//TEST
	var result = l._next({UI: ui, array:l._array, arrow:l._arrow, value:0});
	
	//TEST
	t.ok(result.value.match(/The 'find' arrow/));
	t.ok(result.value.match(/same place as the 'tail' arrow/));
	t.ok(result.value.match(/did not find/));
	
	t.equal(l._state, l._RUN);
	//at the end of the array, ending, not found
	t.equal(l._step_state, l._STEP_END_NOT_FOUND);
	
	TEARDOWN();
	t.end();
});

function step_3_not_found(UI, lesson) {
	UI.output.set("found it yet?");
	
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_SEARCHING_2;
	
	return {UI:UI, lesson:lesson}
};

test('[lesson._next] correct, STEP SEARCHING 2', function (t) {
	//SETUP
	var ui = SETUP();
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:4});
	var arrow = array._.arrow;
	
	var l = lesson({UI:ui, array:array, arrow:arrow, value:0});
	
	//ui = step_0(ui, 0);
	
	var ret = step_1(ui, l);
	ui = ret.UI;
	l = ret.lesson;
	
	ret = step_2(ui, l);
	ui = ret.UI;
	l = ret.lesson;
	
	ret = step_3_not_found(ui, l);
	ui = ret.UI;
	l = ret.lesson;
	
	//TEST
	var result = l._next({UI: ui, array:l._array, arrow:l._arrow, value:0});
	
	//TEST
	t.ok(result.value.match(/increment the 'find' arrow/));
	t.ok(result.value.match(/next index and check/));
	t.ok(result.value.match(/found the value/));
	
	t.equal(l._state, l._RUN);
	t.equal(l._step_state, l._STEP_SEARCHING_1);
	
	setTimeout(function() {
		var move = require('lib/util/move');
		t.notOk(move.is_moving(), "finished tween");
		
		TEARDOWN();
		t.end();
	}, 1500);
});

function step_3_found(UI, lesson) {
	UI.output.set("found it yet?");
	
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_END_FOUND;
	
	return {UI:UI, lesson:lesson}
};

test('[lesson._next] correct, STEP END FOUND', function (t) {
	//SETUP
	var ui = SETUP();
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:4});
	var arrow = array._.arrow;
	
	var l = lesson({UI:ui, array:array, arrow:arrow, value:1});
	
	//ui = step_0(ui, 1);
	
	var ret = step_1(ui, l);
	ui = ret.UI;
	l = ret.lesson;
	
	ret = step_2(ui, l);
	ui = ret.UI;
	l = ret.lesson;
	
	ret = step_3_found(ui, l);
	ui = ret.UI;
	l = ret.lesson;
	
	//TEST
	var result = l._next({UI: ui, array:l._array, arrow:l._arrow, value:1});
	
	//TEST
	t.ok(result.value.match(/We found it/));
	t.ok(result.value.match(/found the value/));
	t.ok(result.value.match(/at index/));
	
	t.equal(l._state, l._RUN);
	t.equal(l._step_state, l._STEP_CLEANUP);
	
	t.equal(l._found_index, 0, "found index was populated by this call, to return later");
	
	TEARDOWN();
	t.end();
});

function step_3_end_of_array(UI, lesson) {
	UI.output.set("found it yet?");
	
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_END_NOT_FOUND;
	
	return {UI:UI, lesson:lesson}
};

test('[lesson._next] correct, STEP END NOT FOUND', function (t) {
	//SETUP
	var ui = SETUP();
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:4});
	var arrow = array._.arrow;
	
	var l = lesson({UI:ui, array:array, arrow:arrow, value:0});
	
	//ui = step_0(ui, 0);
	
	var ret = step_1(ui, l);
	ui = ret.UI;
	l = ret.lesson;
	
	ret = step_2(ui, l);
	ui = ret.UI;
	l = ret.lesson;
	
	ret = step_3_end_of_array(ui, l);
	ui = ret.UI;
	l = ret.lesson;
	
	//TEST
	var result = l._next({UI: ui, array:l._array, arrow:l._arrow, value:0});
	
	//TEST
	t.ok(result.value.match(/could not find it/));
	t.ok(result.value.match(/report an error/));
	
	t.equal(l._state, l._RUN);
	t.equal(l._step_state, l._STEP_CLEANUP);
	
	TEARDOWN();
	t.end();
});

function step_4_cleanup(UI, lesson) {
	UI.output.set("found it / didn't find it / end of the array");
	
	lesson._state = lesson._RUN;
	lesson._step_state = lesson._STEP_CLEANUP;
	
	return {UI:UI, lesson:lesson}
};

test('[lesson._next] correct, STEP CLEANUP', function (t) {
	//SETUP
	var ui = SETUP();
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:4});
	var arrow = array._.arrow;
	
	var l = lesson({UI:ui, array:array, arrow:arrow, value:0});
	
	//ui = step_0(ui, 0);
	
	var ret = step_1(ui, l);
	ui = ret.UI;
	l = ret.lesson;
	
	ret = step_2(ui, l);
	ui = ret.UI;
	l = ret.lesson;
	
	ret = step_3_end_of_array(ui, l);
	ui = ret.UI;
	l = ret.lesson;
	
	ret = step_4_cleanup(ui, l);
	ui = ret.UI;
	l = ret.lesson;
	
	//TEST
	var result = l._next({UI: ui, array:l._array, arrow:l._arrow, value:0});
	
	//TEST
	var output = ui.output.get();
	t.ok(output.match(/Deallocating the 'find' arrow/));
	t.ok(output.match(/clean up before the next search/));
	
	t.equal(l._state, l._READY);
	t.ok(check.undefined(l._step_state));
	
	//text input has been re-enabled
	t.notOk(ui.input.self._.htmlElement.disabled);
	
	t.ok(result.done);
	t.ok(check.object(result.value), "should have something returned at the end of iteration");
	t.ok(check.undefined(result.value.index), "but index undefined, as this was a NOT FOUND case");
	
	TEARDOWN();
	t.end();
});

test('[lesson] integration testing, not found case', function(t) {
	var ui = SETUP();
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:4});
	var arrow = array._.arrow;
	
	var l = lesson({UI:ui, array:array, arrow:arrow, value:0});
	
	for (var i = 0; i < l._array._.length; i++) {
		var value = new createjs.Text(i+1);
		l._array._.push({value:value, tween:false});
		l._arrow._.next({tween:false});
	}
	
	var command_queue = [];
	
	function step_1() {
		//ui.input.set(0);
		
		l.next();
	};
	command_queue.push(step_1);
	
	function step_1_test() {
		console.log("STEP 1, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/allocate a find arrow/));
		t.ok(result.match(/look through each item in the array/));
		t.ok(result.match(/if we found it/));
		t.ok(result.match(/report which index/));
		t.ok(result.match(/report an error/));
		t.equal(l._state, l._RUN);
		t.equal(l._step_state, l._STEP_2);
	};
	command_queue.push(step_1_test);
	
	function step_2() {
		l.next();
	};
	command_queue.push(step_2);
	
	function step_2_test() {
		console.log("STEP 2, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/Allocating a 'find' arrow/));
		t.ok(result.match(/pointing at the start/));
		
		t.equal(l._state, l._RUN);
		t.equal(l._step_state, l._STEP_SEARCHING_1);
	};
	command_queue.push(step_2_test);
	
	function step_3() {
		l.next();
	};
	command_queue.push(step_3);
	
	function step_3_test() {
		console.log("STEP 3, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/value at the index/));
		t.ok(result.match(/equal to what we're/));
		t.ok(result.match(/searching for/));
		
		t.equal(l._state, l._RUN);
		//not found, continuing to search
		t.equal(l._step_state, l._STEP_SEARCHING_2);
	};
	command_queue.push(step_3_test);
	
	function step_4() {
		l.next();
	};
	command_queue.push(step_4);
	
	function step_4_test() {
		console.log("STEP 4, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/increment the 'find' arrow/));
		t.ok(result.match(/next index and check/));
		t.ok(result.match(/found the value/));
		
		t.equal(l._state, l._RUN);
		t.equal(l._step_state, l._STEP_SEARCHING_1);
	};
	command_queue.push(step_4_test);
	
	function step_5() {
		l.next();
	};
	command_queue.push(step_5);
	
	function step_5_test() {
		console.log("STEP 5, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/value at the index/));
		t.ok(result.match(/equal to what we're/));
		t.ok(result.match(/searching for/));
		
		t.equal(l._state, l._RUN);
		//not found, continuing to search
		t.equal(l._step_state, l._STEP_SEARCHING_2);
	};
	command_queue.push(step_5_test);
	
	function step_6() {
		l.next();
	};
	command_queue.push(step_6);
	
	function step_6_test() {
		console.log("STEP 6, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/increment the 'find' arrow/));
		t.ok(result.match(/next index and check/));
		t.ok(result.match(/found the value/));
		
		t.equal(l._state, l._RUN);
		t.equal(l._step_state, l._STEP_SEARCHING_1);
	};
	command_queue.push(step_6_test);
	
	function step_7() {
		l.next();
	};
	command_queue.push(step_7);
	
	function step_7_test() {
		console.log("STEP 7, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/value at the index/));
		t.ok(result.match(/equal to what we're/));
		t.ok(result.match(/searching for/));
		
		t.equal(l._state, l._RUN);
		//not found, continuing to search
		t.equal(l._step_state, l._STEP_SEARCHING_2);
	};
	command_queue.push(step_7_test);
	
	function step_8() {
		l.next();
	};
	command_queue.push(step_8);
	
	function step_8_test() {
		console.log("STEP 8, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/increment the 'find' arrow/));
		t.ok(result.match(/next index and check/));
		t.ok(result.match(/found the value/));
		
		t.equal(l._state, l._RUN);
		t.equal(l._step_state, l._STEP_SEARCHING_1);
	};
	command_queue.push(step_8_test);
	
	function step_9() {
		l.next();
	};
	command_queue.push(step_9);
	
	function step_9_test() {
		console.log("STEP 9, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/value at the index/));
		t.ok(result.match(/equal to what we're/));
		t.ok(result.match(/searching for/));
		
		t.equal(l._state, l._RUN);
		//not found, continuing to search
		t.equal(l._step_state, l._STEP_SEARCHING_2);
	};
	command_queue.push(step_9_test);
	
	function step_10() {
		l.next();
	};
	command_queue.push(step_10);
	
	function step_10_test() {
		console.log("STEP 10, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/increment the 'find' arrow/));
		t.ok(result.match(/next index and check/));
		t.ok(result.match(/found the value/));
		
		t.equal(l._state, l._RUN);
		t.equal(l._step_state, l._STEP_SEARCHING_1);
	};
	command_queue.push(step_10_test);
	
	function step_11() {
		l.next();
	};
	command_queue.push(step_11);
	
	function step_11_test() {
		console.log("STEP 11, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/The 'find' arrow/));
		t.ok(result.match(/same place as the 'tail' arrow/));
		t.ok(result.match(/did not find/));
		
		t.equal(l._state, l._RUN);
		//at the end of the array, ending, not found
		t.equal(l._step_state, l._STEP_END_NOT_FOUND);
	};
	command_queue.push(step_11_test);
	
	function step_12() {
		l.next();
	};
	command_queue.push(step_12);
	
	function step_12_test() {
		console.log("STEP 12, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/could not find it/));
		t.ok(result.match(/report an error/));
		
		t.equal(l._state, l._RUN);
		t.equal(l._step_state, l._STEP_CLEANUP);
	};
	command_queue.push(step_12_test);
	
	function step_13() {
		l.next();
	};
	command_queue.push(step_13);
	
	function step_13_test() {
		console.log("STEP 13, testing");

		var result = ui.output.get();
		t.ok(result.match(/Deallocating the 'find' arrow/));
		t.ok(result.match(/clean up before the next search/));
		
		t.equal(l._state, l._READY);
		t.ok(check.undefined(l._step_state));
		
		t.ok(check.undefined(l._found_index), "found index undefined, as this was a NOT FOUND case");
	};
	command_queue.push(step_13_test);
	
	var iter = command_queue[Symbol.iterator]();
	
	var intervalID = setInterval(function() {
		var result = iter.next();
		
		if (!result.done) {
			result.value();
		} else {
			console.log("DONE");
			TEARDOWN();
			t.end();
			clearInterval(intervalID);
		}
	}, 3000);
});

test('[lesson] integration testing, found case', function(t) {
	var ui = SETUP();
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:4});
	var arrow = array._.arrow;
	
	var l = lesson({UI:ui, array:array, arrow:arrow, value:2});
	
	for (var i = 0; i < l._array._.length; i++) {
		var value = new createjs.Text(i+1);
		l._array._.push({value:value, tween:false});
		l._arrow._.next({tween:false});
	}
	
	var command_queue = [];
	
	function step_1() {
		//ui.input.set(2);
		
		l.next();
	};
	command_queue.push(step_1);
	
	function step_1_test() {
		console.log("STEP 1, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/allocate a find arrow/));
		t.ok(result.match(/look through each item in the array/));
		t.ok(result.match(/if we found it/));
		t.ok(result.match(/report which index/));
		t.ok(result.match(/report an error/));
		t.equal(l._state, l._RUN);
		t.equal(l._step_state, l._STEP_2);
	};
	command_queue.push(step_1_test);
	
	function step_2() {
		l.next();
	};
	command_queue.push(step_2);
	
	function step_2_test() {
		console.log("STEP 2, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/Allocating a 'find' arrow/));
		t.ok(result.match(/pointing at the start/));
		
		t.equal(l._state, l._RUN);
		t.equal(l._step_state, l._STEP_SEARCHING_1);
	};
	command_queue.push(step_2_test);
	
	function step_3() {
		l.next();
	};
	command_queue.push(step_3);
	
	function step_3_test() {
		console.log("STEP 3, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/value at the index/));
		t.ok(result.match(/equal to what we're/));
		t.ok(result.match(/searching for/));
		
		t.equal(l._state, l._RUN);
		//not found, continuing to search
		t.equal(l._step_state, l._STEP_SEARCHING_2);
	};
	command_queue.push(step_3_test);
	
	function step_4() {
		l.next();
	};
	command_queue.push(step_4);
	
	function step_4_test() {
		console.log("STEP 4, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/increment the 'find' arrow/));
		t.ok(result.match(/next index and check/));
		t.ok(result.match(/found the value/));
		
		t.equal(l._state, l._RUN);
		t.equal(l._step_state, l._STEP_SEARCHING_1);
	};
	command_queue.push(step_4_test);
	
	function step_5() {
		l.next();
	};
	command_queue.push(step_5);
	
	function step_5_test() {
		console.log("STEP 5, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/value at the index/));
		t.ok(result.match(/equal to what we're/));
		t.ok(result.match(/searching for/));
		
		t.equal(l._state, l._RUN);
		//found the value, stop searching and report
		t.equal(l._step_state, l._STEP_END_FOUND);
	};
	command_queue.push(step_5_test);
	
	function step_6() {
		l.next();
	};
	command_queue.push(step_6);
	
	function step_6_test() {
		console.log("STEP 6, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/We found it/));
		t.ok(result.match(/found the value/));
		t.ok(result.match(/at index/));
		
		t.equal(l._state, l._RUN);
		t.equal(l._step_state, l._STEP_CLEANUP);
	};
	command_queue.push(step_6_test);
	
	function step_13() {
		l.next();
	};
	command_queue.push(step_13);
	
	function step_13_test() {
		console.log("STEP 13, testing");

		var result = ui.output.get();
		t.ok(result.match(/Deallocating the 'find' arrow/));
		t.ok(result.match(/clean up before the next search/));
		
		t.equal(l._state, l._READY);
		t.ok(check.undefined(l._step_state));
		
		t.ok(check.number(l._found_index), "found index is a number, which matches the index of where we found the input in the array");
		t.equal(l._array._.values[l._found_index], 2, "which matches the value we input in step 1");
	};
	command_queue.push(step_13_test);
	
	var iter = command_queue[Symbol.iterator]();
	
	var intervalID = setInterval(function() {
		var result = iter.next();
		
		if (!result.done) {
			result.value();
		} else {
			console.log("DONE");
			TEARDOWN();
			t.end();
			clearInterval(intervalID);
		}
	}, 3000);
});


//tail