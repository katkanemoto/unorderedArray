var lesson = require('lib/lesson/unordered_array_linear_search');
var test = require('tape');
var check = require('check-types');

function SETUP() {
	var lesson_UI = require('lib/UI/lesson_UI');
	var UI = lesson_UI();
	UI.next();	//get the testing lesson_UI into the LESSON state, so that get_proxy() works
	return UI.get_proxy();
}

function TEARDOWN() {
	var primitives = require("lib/util/primitives");
	var stage = primitives.get('stage');
	
	//reset the stage
	stage.clear();
	stage.removeAllChildren();
	
	//delete the text input created by lesson_UI
	var div = document.getElementById('canvas_container');
	//	find the input control
	var input_index;
	for (var i = 0; i < div.children.length; i++) {
		if (div.children[i].type === "text") {
			//don't delete inside the array while iterating over it
			input_index = i;
		}
	};
	
	//if there was a text input, then delete it
	if (input_index) {
		div.removeChild(div.children[input_index]);
	}
	
	//clear the pub sub
	var pub_sub = require('pubsub-js');
	pub_sub.clearAllSubscriptions();
};

TEARDOWN();

//NOTE: when tweening on the UI, be sure to add a test that verifies the UI is done tweening before moving on to a new test
//	move() will cause some tests to fail, as it does not execute a tween if there is already an existing tween running
//something like this:
/* setTimeout(function() {
	var move = require('lib/util/move');
	t.notOk(move.is_moving(), "finished tween");
	
	TEARDOWN();
}, 1500); */

//NOTE: when using pub/sub there is a small delay when publishing an event (~1 ms) to its reciept
//	so if there is some tween scheduled to start directly after it, the tween may get precendence and prevent the event handler from behaving properly
//	so creating tweens has been offset in functions that test with them

test('[lesson] incorrect, no arguments', function (t) {
	t.plan(4);
	
	try {
		lesson();
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/UI/), 'what argument caused the problem');
		t.ok(message.match(/object/), 'tells you what type needed');
		t.ok(message.match(/argument should be object/), 'tells you about how to pass arguments');
	}
});

test('[lesson] incorrect, bad argument', function (t) {
	t.plan(4);
	
	try {
		lesson("some bad argument");
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/UI/), 'what argument caused the problem');
		t.ok(message.match(/object/), 'tells you what type needed');
		t.ok(message.match(/argument should be object/), 'tells you about how to pass arguments');
	}
});

test('[lesson] incorrect, UI argument wrong type', function (t) {
	t.plan(4);
	
	try {
		lesson({UI: "some bad argument"});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/UI/), 'what argument caused the problem');
		t.ok(message.match(/object/), 'tells you what type needed');
		t.ok(message.match(/argument should be object/), 'tells you about how to pass arguments');
	}
});

test('[lesson] correct', function (t) {
	t.plan(4);
	//SETUP
	var ui = SETUP();
	var stage_add_called = false;
	ui.stage.add = function() {
		stage_add_called = true;
	};
	var l = lesson({UI: ui});
	
	//TEST
	t.ok(check.object(l._array), "setup the array");
	t.ok(check.object(l._arrow), "populated the arrow reference, from setting up the array");
	t.ok(stage_add_called, "added the array to the stage");
	//t.ok(check.object(l._search), "setup the search logic");
	
	//avoid calling _next() on click
	l._next = function() {};
	
	ui.pub_sub.subscribe("click.next_button", function() {
		t.ok(true, "saw click event published");
		
		TEARDOWN();
		//t.end();
	});
	ui.pub_sub.publish("click.next_button");
});

test('[lesson] correct, next button, click event handler', function (t) {
	t.plan(1);
	
	//SETUP
	var ui = SETUP();
	
	//setup mock function on lesson prototype for event handler to call, BEFORE allocating object
	var next_backup = lesson.prototype.next;
	lesson.prototype.next = function() {
		//TEST
		t.ok(true, "saw click event from 'next' button");
		
		//CLEANUP
		lesson.prototype.next = next_backup;
		TEARDOWN();
	}
	
	var l = lesson({UI: ui});
	ui.pub_sub.publish("click.next_button");
});

test('[lesson] correct, next button event handler, does nothing when tweening', function (t) {
	t.plan(5);
	
	//SETUP
	var ui = SETUP();
	
	//setup mock function on lesson prototype for event handler to call, BEFORE allocating object
	var next_backup = lesson.prototype.next;
	lesson.prototype.next = function() {
		//TEST
		t.ok(true, "saw click event from 'next' button");
	}
	
	var l = lesson({UI: ui});
	
	//in live code may start a tween
	//any other clicks (simulated below) should be ignored until the tween is complete
	ui.pub_sub.publish("click.next_button");
	
	//setup a tween
	var move = require('lib/util/move');
	var source = {x:0, y:0};
	var source_mover = move(source);
	var destination = {x:100, y:100};
	
	setTimeout(function() {
		source_mover.to(destination);	//default tween time ~1 sec
	}, 1);
	
	setTimeout(function() {
		t.ok(move.is_moving(), "should return true during a tween");
		t.ok(source.x > 0 && source.x < 100, 'value should be on the way to 100, but not equal');
		t.ok(source.y > 0 && source.y < 100, 'value should be on the way to 100, but not equal');
		
		ui.pub_sub.publish("click.next_button");	//should do nothing
	}, 500);
	
	setTimeout(function() {
		//CLEANUP
		lesson.prototype.next = next_backup;
		TEARDOWN();
		t.ok(true, "finished tween");
	}, 1500);
});

test('[lesson._setup_array] correct', function (t) {
	//SETUP
	var ui = SETUP();
	
	//TEST
	var result = lesson.prototype._setup_array(1);
	
	t.ok(check.object(result), 'made a new array object');
	t.ok(check.object(result._.arrow), 'made a new arrow object');
	t.ok(check.not.undefined(result.x), 'defined the x');
	t.ok(check.not.undefined(result.y), 'and the y');
	
	TEARDOWN();
	t.end();
});

test('[lesson.next] incorrect, bad state', function (t) {
	//SETUP
	var ui = SETUP();
	var l = lesson({UI: ui});
	l._state = -1;
	
	//TEST
	var result = l.next();
	
	t.notOk(result);
	
	//CLEANUP
	TEARDOWN();
	t.end();
});

test('[lesson.next] incorrect, bad input', function (t) {
	//SETUP
	var ui = SETUP();
	var l = lesson({UI: ui});
	ui.input.set("");
	
	//TEST
	var result = l.next();
	
	t.notOk(result);
	var output = ui.output.get();
	t.ok(output.match(/not a number/), 'shows what was wrong');
	t.ok(output.match(/Please enter a number/), 'tells you what to enter');
	t.ok(output.match(/the 'Next' button/), '...and what to do');
	
	//CLEANUP
	TEARDOWN();
	t.end();
});

test('[lesson.next] correct', function (t) {
	//SETUP
	var ui = SETUP();
	var l = lesson({UI: ui});
	ui.input.set("0");
	
	//TEST
	var result = l.next();
	
	t.ok(check.object(result));
	t.notOk(result.done);
	t.ok(ui.input.self._.htmlElement.disabled, "text input disabled once started a lesson");
	
	//CLEANUP
	TEARDOWN();
	t.end();
});

test('[lesson.next] correct, end of lesson logic', function (t) {
	//SETUP
	var ui = SETUP();
	var l = lesson({UI: ui});
	ui.input.set("0");
	
	//TEST
	
	//iterate through the lesson logic, until we reach the end
	var intervalID = setInterval(function() {
		var result = l.next();
		
		if (result.done) {
			console.log("DONE");
			
			t.equal(l._state, l._READY, "in READY state after completely traversing a lesson");
			t.notOk(ui.input.self._.htmlElement.disabled, "text input is no longer disabled");
			
			//CLEANUP
			TEARDOWN();
			t.end();
			clearInterval(intervalID);
		}
	}, 3000);
});

test('[lesson._populate_array] correct', function (t) {
	//SETUP
	var ui = SETUP();
	var array_UI = require('lib/UI/array_UI');
	var a = array_UI({length:2, arrow:{name:"search"}});
	var test_array = a;
	var test_arrow = a._.arrow;
	
	//TEST
	var result = lesson.prototype._populate_array(test_array, test_arrow);
	
	for (var i = 0; i < result._.length; i++) {
		t.equal(result.children[i].children.length, 2, "should see the new Text item inserted at each index");
		var value = Number.parseInt(result.children[i].children[1].text);
		t.ok(check.integer(value), "...that new item should be an integer...");
		t.equal(value, result._.values[i], "... and should be equal to the integer in the values array at that same index");
	}
	
	TEARDOWN();
	t.end();
});

test('[lesson] integration testing, not found case', function(t) {
	var lesson_UI = require('lib/UI/lesson_UI');
	var UI = lesson_UI({lesson:lesson});
	UI.next();
	var ui = UI.get_proxy();
	
	var l = UI._lesson_instance;
	
	//populate the test array with value 1...n, where n is the length of the array
	for (var i = 0; i < l._array._.length; i++) {
		l._array.children[i].children[1].text = String(i+1);
		l._array._.values[i] = i+1;
	}
	
	var command_queue = [];
	
	function step_1() {
		ui.input.set(0);
		
		ui.pub_sub.publish("click.next_button");
	};
	command_queue.push(step_1);
	
	function step_1_test() {
		console.log("STEP 1, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/allocate a find arrow/));
		t.ok(result.match(/look through each item in the array/));
		t.ok(result.match(/if we found it/));
		t.ok(result.match(/report which index/));
		t.ok(result.match(/report an error/));
		/* t.equal(l._state, l._RUN);
		t.equal(l._step_state, l._STEP_2); */
	};
	command_queue.push(step_1_test);
	
	function step_2() {
		ui.pub_sub.publish("click.next_button");
	};
	command_queue.push(step_2);
	
	function step_2_test() {
		console.log("STEP 2, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/Allocating a 'find' arrow/));
		t.ok(result.match(/pointing at the start/));
		
		/* t.equal(l._state, l._RUN);
		t.equal(l._step_state, l._STEP_SEARCHING_1); */
	};
	command_queue.push(step_2_test);
	
	function step_3() {
		ui.pub_sub.publish("click.next_button");
	};
	command_queue.push(step_3);
	
	function step_3_test() {
		console.log("STEP 3, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/value at the index/));
		t.ok(result.match(/equal to what we're/));
		t.ok(result.match(/searching for/));
		
		//t.equal(l._state, l._RUN);
		//not found, continuing to search
		//t.equal(l._step_state, l._STEP_SEARCHING_2);
	};
	command_queue.push(step_3_test);
	
	function step_4() {
		ui.pub_sub.publish("click.next_button");
	};
	command_queue.push(step_4);
	
	function step_4_test() {
		console.log("STEP 4, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/increment the 'find' arrow/));
		t.ok(result.match(/next index and check/));
		t.ok(result.match(/found the value/));
		
		/* t.equal(l._state, l._RUN);
		t.equal(l._step_state, l._STEP_SEARCHING_1); */
	};
	command_queue.push(step_4_test);
	
	function step_5() {
		ui.pub_sub.publish("click.next_button");
	};
	command_queue.push(step_5);
	
	function step_5_test() {
		console.log("STEP 5, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/value at the index/));
		t.ok(result.match(/equal to what we're/));
		t.ok(result.match(/searching for/));
		
		//t.equal(l._state, l._RUN);
		//not found, continuing to search
		//t.equal(l._step_state, l._STEP_SEARCHING_2);
	};
	command_queue.push(step_5_test);
	
	function step_6() {
		ui.pub_sub.publish("click.next_button");
	};
	command_queue.push(step_6);
	
	function step_6_test() {
		console.log("STEP 6, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/increment the 'find' arrow/));
		t.ok(result.match(/next index and check/));
		t.ok(result.match(/found the value/));
		
		/* t.equal(l._state, l._RUN);
		t.equal(l._step_state, l._STEP_SEARCHING_1); */
	};
	command_queue.push(step_6_test);
	
	function step_7() {
		ui.pub_sub.publish("click.next_button");
	};
	command_queue.push(step_7);
	
	function step_7_test() {
		console.log("STEP 7, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/value at the index/));
		t.ok(result.match(/equal to what we're/));
		t.ok(result.match(/searching for/));
		
		//t.equal(l._state, l._RUN);
		//not found, continuing to search
		//t.equal(l._step_state, l._STEP_SEARCHING_2);
	};
	command_queue.push(step_7_test);
	
	function step_8() {
		ui.pub_sub.publish("click.next_button");
	};
	command_queue.push(step_8);
	
	function step_8_test() {
		console.log("STEP 8, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/increment the 'find' arrow/));
		t.ok(result.match(/next index and check/));
		t.ok(result.match(/found the value/));
		
		/* t.equal(l._state, l._RUN);
		t.equal(l._step_state, l._STEP_SEARCHING_1); */
	};
	command_queue.push(step_8_test);
	
	function step_9() {
		ui.pub_sub.publish("click.next_button");
	};
	command_queue.push(step_9);
	
	function step_9_test() {
		console.log("STEP 9, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/value at the index/));
		t.ok(result.match(/equal to what we're/));
		t.ok(result.match(/searching for/));
		
		//t.equal(l._state, l._RUN);
		//not found, continuing to search
		//t.equal(l._step_state, l._STEP_SEARCHING_2);
	};
	command_queue.push(step_9_test);
	
	function step_10() {
		ui.pub_sub.publish("click.next_button");
	};
	command_queue.push(step_10);
	
	function step_10_test() {
		console.log("STEP 10, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/increment the 'find' arrow/));
		t.ok(result.match(/next index and check/));
		t.ok(result.match(/found the value/));
		
		/* t.equal(l._state, l._RUN);
		t.equal(l._step_state, l._STEP_SEARCHING_1); */
	};
	command_queue.push(step_10_test);
	
	function step_11() {
		ui.pub_sub.publish("click.next_button");
	};
	command_queue.push(step_11);
	
	function step_11_test() {
		console.log("STEP 11, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/The 'find' arrow/));
		t.ok(result.match(/same place as the 'tail' arrow/));
		t.ok(result.match(/did not find/));
		
		//t.equal(l._state, l._RUN);
		//at the end of the array, ending, not found
		//t.equal(l._step_state, l._STEP_END_NOT_FOUND);
	};
	command_queue.push(step_11_test);
	
	function step_12() {
		ui.pub_sub.publish("click.next_button");
	};
	command_queue.push(step_12);
	
	function step_12_test() {
		console.log("STEP 12, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/could not find it/));
		t.ok(result.match(/report an error/));
		
		/* t.equal(l._state, l._RUN);
		t.equal(l._step_state, l._STEP_CLEANUP); */
	};
	command_queue.push(step_12_test);
	
	function step_13() {
		ui.pub_sub.publish("click.next_button");
	};
	command_queue.push(step_13);
	
	function step_13_test() {
		console.log("STEP 13, testing");

		var result = ui.output.get();
		t.ok(result.match(/Deallocating the 'find' arrow/));
		t.ok(result.match(/clean up before the next search/));
		
		/* t.equal(l._state, l._READY);
		t.ok(check.undefined(l._step_state)); */
	};
	command_queue.push(step_13_test);
	
	var iter = command_queue[Symbol.iterator]();
	
	var intervalID = setInterval(function() {
		var result = iter.next();
		
		if (!result.done) {
			result.value();
		} else {
			console.log("DONE");
			TEARDOWN();
			t.end();
			clearInterval(intervalID);
		}
	}, 3000);
});

test('[lesson] integration testing, found case', function(t) {
	var lesson_UI = require('lib/UI/lesson_UI');
	var UI = lesson_UI({lesson:lesson});
	UI.next();
	var ui = UI.get_proxy();
	
	var l = UI._lesson_instance;
	
	//populate the test array with value 1...n, where n is the length of the array
	for (var i = 0; i < l._array._.length; i++) {
		l._array.children[i].children[1].text = String(i+1);
		l._array._.values[i] = i+1;
	}
	
	var command_queue = [];
	
	function step_1() {
		ui.input.set(2);
		
		ui.pub_sub.publish("click.next_button");
	};
	command_queue.push(step_1);
	
	function step_1_test() {
		console.log("STEP 1, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/allocate a find arrow/));
		t.ok(result.match(/look through each item in the array/));
		t.ok(result.match(/if we found it/));
		t.ok(result.match(/report which index/));
		t.ok(result.match(/report an error/));
		/* t.equal(l._state, l._RUN);
		t.equal(l._step_state, l._STEP_2); */
	};
	command_queue.push(step_1_test);
	
	function step_2() {
		ui.pub_sub.publish("click.next_button");
	};
	command_queue.push(step_2);
	
	function step_2_test() {
		console.log("STEP 2, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/Allocating a 'find' arrow/));
		t.ok(result.match(/pointing at the start/));
		
		/* t.equal(l._state, l._RUN);
		t.equal(l._step_state, l._STEP_SEARCHING_1); */
	};
	command_queue.push(step_2_test);
	
	function step_3() {
		ui.pub_sub.publish("click.next_button");
	};
	command_queue.push(step_3);
	
	function step_3_test() {
		console.log("STEP 3, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/value at the index/));
		t.ok(result.match(/equal to what we're/));
		t.ok(result.match(/searching for/));
		
		//t.equal(l._state, l._RUN);
		//not found, continuing to search
		//t.equal(l._step_state, l._STEP_SEARCHING_2);
	};
	command_queue.push(step_3_test);
	
	function step_4() {
		ui.pub_sub.publish("click.next_button");
	};
	command_queue.push(step_4);
	
	function step_4_test() {
		console.log("STEP 4, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/increment the 'find' arrow/));
		t.ok(result.match(/next index and check/));
		t.ok(result.match(/found the value/));
		
		/* t.equal(l._state, l._RUN);
		t.equal(l._step_state, l._STEP_SEARCHING_1); */
	};
	command_queue.push(step_4_test);
	
	function step_5() {
		ui.pub_sub.publish("click.next_button");
	};
	command_queue.push(step_5);
	
	function step_5_test() {
		console.log("STEP 5, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/value at the index/));
		t.ok(result.match(/equal to what we're/));
		t.ok(result.match(/searching for/));
		
		//t.equal(l._state, l._RUN);
		//found the value, stop searching and report
		//t.equal(l._step_state, l._STEP_END_FOUND);
	};
	command_queue.push(step_5_test);
	
	function step_6() {
		ui.pub_sub.publish("click.next_button");
	};
	command_queue.push(step_6);
	
	function step_6_test() {
		console.log("STEP 6, testing");
		var result = ui.output.get();
		
		t.ok(result.match(/We found it/));
		t.ok(result.match(/found the value/));
		t.ok(result.match(/at index/));
		
		/* t.equal(l._state, l._RUN);
		t.equal(l._step_state, l._STEP_CLEANUP); */
	};
	command_queue.push(step_6_test);
	
	function step_13() {
		ui.pub_sub.publish("click.next_button");
	};
	command_queue.push(step_13);
	
	function step_13_test() {
		console.log("STEP 13, testing");

		var result = ui.output.get();
		t.ok(result.match(/Deallocating the 'find' arrow/));
		t.ok(result.match(/clean up before the next search/));
		
		/* t.equal(l._state, l._READY);
		t.ok(check.undefined(l._step_state)); */
	};
	command_queue.push(step_13_test);
	
	var iter = command_queue[Symbol.iterator]();
	
	var intervalID = setInterval(function() {
		var result = iter.next();
		
		if (!result.done) {
			result.value();
		} else {
			console.log("DONE");
			TEARDOWN();
			t.end();
			clearInterval(intervalID);
		}
	}, 3000);
});

//tail
