var validate = require('lib/lesson/util/array_lesson_argument_validate.js');
var test = require('tape');
var check = require('check-types');

function SETUP() {
	var lesson_UI = require('lib/UI/lesson_UI');
	var UI = lesson_UI();
	UI.next();	//get the testing lesson_UI into the LESSON state, so that get_proxy() works
	return UI.get_proxy();
}

function TEARDOWN() {
	var primitives = require("lib/util/primitives");
	var stage = primitives.get('stage');
	
	//reset the stage
	stage.clear();
	stage.removeAllChildren();
	
	//delete the text input created by lesson_UI
	var div = document.getElementById('canvas_container');
	//	find the input control
	var input_index;
	for (var i = 0; i < div.children.length; i++) {
		if (div.children[i].type === "text") {
			//don't delete inside the array while iterating over it
			input_index = i;
		}
	};
	
	//if there was a text input, then delete it
	if (input_index) {
		div.removeChild(div.children[input_index]);
	}
	
	//clear the pub sub
	var pub_sub = require('pubsub-js');
	pub_sub.clearAllSubscriptions();
};

TEARDOWN();

test('[validate] incorrect, no arguments', function (t) {
	t.plan(2);
	
	//TEST
	
	var result = validate();
	t.ok(result.msg.match(/Requires argument object/), 'what argument caused the problem');
	t.notOk(result.valid);
});

test('[validate] incorrect, bad arguments', function (t) {
	t.plan(2);
	
	//TEST
	
	var result = validate("some bad argument");
	t.ok(result.msg.match(/Requires argument object/), 'what argument caused the problem');
	t.notOk(result.valid);
});

test('[validate._.options] correct', function (t) {
	t.plan(2);
	
	//TEST
	
	var result = validate._.options({});
	t.ok(result.valid, "arguments are correct");
	t.ok(check.undefined(result.msg));
});

test('[validate] incorrect, argument object, no properties', function (t) {
	t.plan(3);
	
	//TEST
	var result = validate({});
	t.ok(result.msg.match(/Required argument: UI/), "tells you what's wrong");
	t.ok(result.msg.match(/should be object/), "how to fix it");
	t.notOk(result.valid);
});

test('[validate] incorrect, argument object, UI property set, bad type', function (t) {
	t.plan(3);
	
	//TEST
	var result = validate({UI:"some bad type"});
	t.ok(result.msg.match(/Required argument: UI/), "tells you what's wrong");
	t.ok(result.msg.match(/should be object/), "how to fix it");
	t.notOk(result.valid);
});

test('[validate] incorrect, argument object, UI right type, no input namespace', function (t) {
	t.plan(3);
	
	//TEST
	var result = validate({UI:{}});
	t.ok(result.msg.match(/Required argument: UI/), "tells you what's wrong");
	t.ok(result.msg.match(/should have namespace 'input'/), "how to fix it");
	t.notOk(result.valid);
});

test('[validate] incorrect, argument object, UI right type, no output namespace', function (t) {
	t.plan(3);
	
	var mock_ui = {
		input : {},
	}
	
	//TEST
	var result = validate({UI:mock_ui});
	t.ok(result.msg.match(/Required argument: UI/), "tells you what's wrong");
	t.ok(result.msg.match(/should have namespace 'output'/), "how to fix it");
	t.notOk(result.valid);
});

test('[validate] incorrect, argument object, UI right type, no stage namespace', function (t) {
	t.plan(3);
	
	var mock_ui = {
		input : {},
		output : {},
	}
	
	//TEST
	var result = validate({UI:mock_ui});
	t.ok(result.msg.match(/Required argument: UI/), "tells you what's wrong");
	t.ok(result.msg.match(/should have namespace 'stage'/), "how to fix it");
	t.notOk(result.valid);
});

test('[validate] incorrect, argument object, UI right type, no pub_sub namespace', function (t) {
	t.plan(3);
	
	var mock_ui = {
		input : {},
		output : {},
		stage : {},
	}
	
	//TEST
	var result = validate({UI:mock_ui});
	t.ok(result.msg.match(/Required argument: UI/), "tells you what's wrong");
	t.ok(result.msg.match(/should have namespace 'pub_sub'/), "how to fix it");
	t.notOk(result.valid);
});

test('[validate._.UI] correct', function (t) {
	t.plan(2);
	
	var ui = SETUP();
	
	//TEST
	var result = validate._.UI(ui);
	t.ok(result.valid, "arguments are correct");
	t.ok(check.undefined(result.msg));
	
	TEARDOWN();
});

test('[validate] incorrect, argument object, UI property right type, array property not set', function (t) {
	t.plan(3);
	
	var ui = SETUP();
	
	//TEST
	var result = validate({UI:ui});
	t.ok(result.msg.match(/Required argument: array/), "tells you what's wrong");
	t.ok(result.msg.match(/should be type array_UI/), "how to fix it");
	t.notOk(result.valid);
	
	TEARDOWN();
});

test('[validate] incorrect, argument object, UI property right type, array wrong type', function (t) {
	t.plan(3);
	
	var ui = SETUP();
	
	//TEST
	var result = validate({UI:ui, array:"some bad type"});
	t.ok(result.msg.match(/Required argument: array/), "tells you what's wrong");
	t.ok(result.msg.match(/should be type array_UI/), "how to fix it");
	t.notOk(result.valid);
	
	TEARDOWN();
});

test('[validate] incorrect, argument object, UI property right type, array right type, arrow not set', function (t) {
	t.plan(3);
	
	//SETUP
	var ui = SETUP();
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:1});
	
	//TEST
	var result = validate({UI:ui, array:array});
	t.ok(result.msg.match(/Required argument: arrow/), "tells you what's wrong");
	t.ok(result.msg.match(/should be type arrow_UI/), "how to fix it");
	t.notOk(result.valid);
	
	TEARDOWN();
});

test('[validate] incorrect, argument object, UI property right type, array right type, arrow wrong type', function (t) {
	t.plan(3);
	
	//SETUP
	var ui = SETUP();
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:1});
	
	//TEST
	var result = validate({UI:ui, array:array, arrow:"some bad type"});
	t.ok(result.msg.match(/Required argument: arrow/), "tells you what's wrong");
	t.ok(result.msg.match(/should be type arrow_UI/), "how to fix it");
	t.notOk(result.valid);
	
	TEARDOWN();
});

test('[validate] correct', function (t) {
	//SETUP
	var ui = SETUP();
	
	var array_UI = require('lib/UI/array_UI');
	var array = array_UI({length:1});
	var arrow = array._.arrow;
	
	var result = validate({UI:ui, array:array, arrow:arrow});
	
	//TEST
	t.ok(result.valid, "arguments are correct");
	t.ok(check.undefined(result.msg));
	
	TEARDOWN();
	t.end();
});

//tail