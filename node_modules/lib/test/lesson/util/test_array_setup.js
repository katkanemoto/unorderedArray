var array_setup = require('lib/lesson/util/array_setup');
var test = require('tape');
var check = require('check-types');

function SETUP() {
	var lesson_UI = require('lib/UI/lesson_UI');
	var UI = lesson_UI();
	UI.next();	//get the testing lesson_UI into the LESSON state, so that get_proxy() works
	return UI.get_proxy();
}

function TEARDOWN() {
	var primitives = require("lib/util/primitives");
	var stage = primitives.get('stage');
	
	//reset the stage
	stage.clear();
	stage.removeAllChildren();
	
	//delete the text input created by lesson_UI
	var div = document.getElementById('canvas_container');
	//	find the input control
	var input_index;
	for (var i = 0; i < div.children.length; i++) {
		if (div.children[i].type === "text") {
			//don't delete inside the array while iterating over it
			input_index = i;
		}
	};
	
	//if there was a text input, then delete it
	if (input_index) {
		div.removeChild(div.children[input_index]);
	}
	
	//clear the pub sub
	var pub_sub = require('pubsub-js');
	pub_sub.clearAllSubscriptions();
};

TEARDOWN();

test('[array_setup] incorrect, size undefined', function (t) {
	t.plan(3);
	
	var ui = SETUP();
	
	//TEST
	try {
		array_setup({});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Required argument: 'size'/), 'what was wrong');
		t.ok(message.match(/should be integer > 0/), 'how to solve it');
	}
	
	TEARDOWN();
});

test('[array_setup] incorrect, size defined, but wrong type', function (t) {
	t.plan(3);
	
	var ui = SETUP();
	
	//TEST
	try {
		array_setup({size:"some bad type"});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Required argument: 'size'/), 'what was wrong');
		t.ok(message.match(/should be integer > 0/), 'how to solve it');
	}
	
	TEARDOWN();
});

test('[array_setup] incorrect, size defined, but bad number type', function (t) {
	t.plan(3);
	
	var ui = SETUP();
	
	//TEST
	try {
		array_setup({size:0.1});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Required argument: 'size'/), 'what was wrong');
		t.ok(message.match(/should be integer > 0/), 'how to solve it');
	}
	
	TEARDOWN();
});

test('[array_setup] incorrect, size defined, but bad value', function (t) {
	t.plan(3);
	
	var ui = SETUP();
	
	//TEST
	try {
		array_setup({size:0});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Required argument: 'size'/), 'what was wrong');
		t.ok(message.match(/should be integer > 0/), 'how to solve it');
	}
	
	TEARDOWN();
});

test('[array_setup] correct', function (t) {
	//TEST
	var result = array_setup({size:1});
	
	t.ok(check.object(result), 'made a new array object');
	t.ok(result.children.length, 1, '..of the correct size');
	t.ok(result.children[0].children.length, 1, '...and is empty');
	t.ok(check.object(result._.arrow), 'made a new arrow object');
	t.ok(check.not.undefined(result.x), 'defined the x');
	t.ok(check.not.undefined(result.y), 'and the y');
	
	TEARDOWN();
	t.end();
});

test('[array_setup -> x/y] incorrect, defined but wrong type', function (t) {
	t.plan(6);
	
	var ui = SETUP();
	
	//TEST
	try {
		array_setup({size:1, x:"some bad type"});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Optional argument: 'x'/), 'what was wrong');
		t.ok(message.match(/should be number/), 'how to fix it');
	}
	
	//TEST
	try {
		array_setup({size:1, y:"some bad type"});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Optional argument: 'y'/), 'what was wrong');
		t.ok(message.match(/should be number/), 'how to fix it');
	}
	
	TEARDOWN();
});

test('[array_setup -> x/y] correct', function (t) {
	//TEST
	var result = array_setup({size:1, x:0});
	
	t.equal(result.x, 0);
	t.equal(result.y, 150);
	
	result = array_setup({size:1, y:0});
	
	t.equal(result.x, 100);
	t.equal(result.y, 0);
	
	result = array_setup({size:1, x:0, y:0});
	
	t.equal(result.y, 0);
	t.equal(result.x, 0);
	
	result = array_setup({size:1});
	
	t.equal(result.x, 100);
	t.equal(result.y, 150);
	
	TEARDOWN();
	t.end();
});

test('[array_setup -> fill] incorrect, defined but wrong type', function (t) {
	t.plan(4);
	
	var ui = SETUP();
	
	//TEST
	try {
		array_setup({size:1, fill:"some bad type"});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Optional argument: 'fill'/), 'what was wrong');
		t.ok(message.match(/should be integer/), 'how to fix it');
		t.ok(message.match(/array/), 'how to fix it');
	}
	
	TEARDOWN();
});

test('[array_setup -> fill] incorrect, right type (number), but bad value', function (t) {
	t.plan(4);
	
	var ui = SETUP();
	
	//TEST
	try {
		array_setup({size:1, fill:0});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Optional argument: 'fill'/), 'what was wrong');
		t.ok(message.match(/should be integer/), 'how to fix it');
		t.ok(message.match(/array/), 'how to fix it');
	}
	
	TEARDOWN();
});

test('[array_setup -> fill] incorrect, right type (number), but bad value (fill > size)', function (t) {
	t.plan(4);
	
	var ui = SETUP();
	
	//TEST
	try {
		array_setup({size:1, fill:2});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Optional argument: 'fill'/), 'what was wrong');
		t.ok(message.match(/should be integer/), 'how to fix it');
		t.ok(message.match(/array/), 'how to fix it');
	}
	
	TEARDOWN();
});

test('[array_setup -> fill] correct (number)', function (t) {
	//TEST
	var result = array_setup({size:1, fill:1});
	
	t.equal(result.children[0].children.length, 2);
	t.ok(check.number(Number(result.children[0].children[1].text)), "createjs.Text object as second child whose value is a number");
	t.equal(result._.arrow._.index, 1, "we've also incremened the tail pointer on the array");
	
	TEARDOWN();
	t.end();
});

test('[array_setup -> fill] correct (number), partial fill', function (t) {
	//TEST
	var result = array_setup({size:2, fill:1});
	
	t.equal(result.children[0].children.length, 2);
	t.ok(check.number(Number(result.children[0].children[1].text)), "createjs.Text object as second child whose value is a number");
	t.equal(result._.arrow._.index, 1, "we've also incremened the tail pointer on the array");
	
	TEARDOWN();
	t.end();
});

test('[array_setup -> fill] incorrect, right type (number), but bad length', function (t) {
	t.plan(4);
	
	//SETUP
	var ui = SETUP();
	var test_array = [0, 1];
	
	//TEST
	try {
		array_setup({size:1, fill:test_array});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Optional argument: 'fill'/), 'what was wrong');
		t.ok(message.match(/should be integer/), 'how to fix it');
		t.ok(message.match(/array/), 'how to fix it');
	}
	
	TEARDOWN();
});

test('[array_setup -> fill] correct (array)', function (t) {
	//TEST
	var test_array = [0];
	var result = array_setup({size:1, fill:test_array});
	
	t.equal(result.children[0].children.length, 2);
	var value = Number(result.children[0].children[1].text);
	t.ok(check.number(value), "createjs.Text object as second child whose value is a number");
	t.equal(value, 0);
	t.equal(result._.arrow._.index, 1, "we've also incremened the tail pointer on the array");
	
	TEARDOWN();
	t.end();
});

test('[array_setup -> fill] correct (array), partial fill', function (t) {
	//TEST
	var test_array = [0];
	var result = array_setup({size:2, fill:test_array});
	
	t.equal(result.children[0].children.length, 2);
	var value = Number(result.children[0].children[1].text);
	t.ok(check.number(value), "createjs.Text object as second child whose value is a number");
	t.equal(value, 0);
	t.equal(result._.arrow._.index, 1, "we've also incremened the tail pointer on the array");
	
	TEARDOWN();
	t.end();
});

//tail