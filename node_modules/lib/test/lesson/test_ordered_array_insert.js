var lesson = require('lib/lesson/ordered_array_insert');
var test = require('tape');
var check = require('check-types');

function SETUP() {
	var lesson_UI = require('lib/UI/lesson_UI');
	var UI = lesson_UI();
	UI.next();	//get the testing lesson_UI into the LESSON state, so that get_proxy() works
	return UI.get_proxy();
}

function TEARDOWN() {
	var primitives = require("lib/util/primitives");
	var stage = primitives.get('stage');
	
	//reset the stage
	stage.clear();
	stage.removeAllChildren();
	
	//delete the text input created by lesson_UI
	var div = document.getElementById('canvas_container');
	//	find the input control
	var input_index;
	for (var i = 0; i < div.children.length; i++) {
		if (div.children[i].type === "text") {
			//don't delete inside the array while iterating over it
			input_index = i;
		}
	};
	
	//if there was a text input, then delete it
	if (input_index) {
		div.removeChild(div.children[input_index]);
	}
	
	//clear the pub sub
	var pub_sub = require('pubsub-js');
	pub_sub.clearAllSubscriptions();
};

TEARDOWN();

test('[lesson] incorrect, no arguments', function (t) {
	t.plan(4);
	
	//SETUP
	var ui = SETUP();
	
	//TEST
	try {
		lesson();
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/UI/), 'tells you what caused the problem');
		t.ok(message.match(/is required/), 'tells you what caused the problem');
		t.ok(message.match(/should be object/), 'tells you what caused the problem');
	}
	
	TEARDOWN();
});

test('[lesson] correct', function (t) {
	t.plan(4);
	//SETUP
	var ui = SETUP();
	var stage_add_called = false;
	ui.stage.add = function() {
		stage_add_called = true;
	};
	var l = lesson({UI: ui});
	
	//TEST
	t.ok(check.object(l._array), "setup the array");
	t.ok(check.object(l._arrow), "populated the arrow reference, from setting up the array");
	t.ok(stage_add_called, "added the array to the stage");
	
	//avoid calling _next() on click
	l._next = function() {};
	
	ui.pub_sub.subscribe("click.next_button", function() {
		t.ok(true, "saw click event published");
		
		TEARDOWN();
	});
	ui.pub_sub.publish("click.next_button");
});

test('[lesson.next] correct, INIT state', function (t) {
	//SETUP
	var ui = SETUP();
	var l = lesson({UI: ui});
	l._state = l._INIT;
	
	//TEST
	var result = l.next();
	
	t.notOk(result);
	
	//CLEANUP
	TEARDOWN();
	t.end();
});

test('[lesson.next] correct, DONE state', function (t) {
	//SETUP
	var ui = SETUP();
	var l = lesson({UI: ui});
	l._state = l._DONE;
	
	//TEST
	var result = l.next();
	
	t.ok(result.done);
	
	var output = ui.output.get();
	t.ok(output.match(/Cannot/));
	t.ok(output.match(/full/));
	
	//CLEANUP
	TEARDOWN();
	t.end();
});

test('[lesson.next] incorrect, bad input', function (t) {
	//SETUP
	var ui = SETUP();
	var l = lesson({UI: ui});
	ui.input.set("");
	
	//TEST
	var result = l.next();
	
	t.notOk(result);
	var output = ui.output.get();
	t.ok(output.match(/not a number/), 'shows what was wrong');
	t.ok(output.match(/Please enter a number/), 'tells you what to enter');
	t.ok(output.match(/the 'Next' button/), '...and what to do');
	
	//CLEANUP
	TEARDOWN();
	t.end();
});

test('[lesson.next] correct', function (t) {
	//SETUP
	var ui = SETUP();
	var l = lesson({UI: ui});
	ui.input.set("0");
	
	//TEST
	var result = l.next();
	
	t.ok(check.object(result), "get back an object from next()");
	t.notOk(result.done, "not done with the lesson yet");
	t.ok(ui.input.self._.htmlElement.disabled, "text input disabled once started a lesson");
	
	t.ok(result.value.match(/Inserting/));
	t.ok(result.value.match(/two step/));
	t.ok(result.value.match(/binary search/));
	t.ok(result.value.match(/insert/));
	
	//CLEANUP
	TEARDOWN();
	t.end();
});

test('[lesson.next] correct, search complete', function (t) {
	//SETUP
	var ui = SETUP();
	var l = lesson({UI: ui});
	ui.input.set("0");
	
	var array_setup = require('lib/lesson/util/array_setup');
	var test_array = array_setup({size:4, fill:[1, 2]});
	var test_arrow = test_array._.arrow;
	
	ui.stage.del(l._array);
	ui.stage.del(l._arrow);
	
	l._array = test_array;
	l._arrow = test_arrow;
	
	ui.stage.add(l._array);
	
	//TEST
	
	//iterate through the lesson logic, until we reach the end of the search logic
	var intervalID = setInterval(function() {
		var result = l.next();
		
		if (l._step_state === l._STEP_INIT_INSERT) {
			t.equal(result.value.index, 0);
			t.notOk(result.value.found);
			
			t.ok(check.object(l._insert));
			
			//CLEANUP
			TEARDOWN();
			t.end();
			clearInterval(intervalID);
		}
	}, 1500);
});

test('[lesson.next] correct, _STEP_INIT_INSERT', function (t) {
	//SETUP
	var ui = SETUP();
	var l = lesson({UI: ui});
	ui.input.set("0");
	
	var array_setup = require('lib/lesson/util/array_setup');
	var test_array = array_setup({size:4, fill:[1, 2]});
	var test_arrow = test_array._.arrow;
	
	ui.stage.del(l._array);
	ui.stage.del(l._arrow);
	
	l._array = test_array;
	l._arrow = test_arrow;
	
	ui.stage.add(l._array);
	
	l._state = l._RUN;
	l._step_state = l._STEP_INIT_INSERT;
	
	//TEST
	var result = l.next();
	
	t.ok(result.value.match(/found/));
	t.ok(result.value.match(/make room/));
	t.ok(result.value.match(/insert/));
	
	t.equal(l._STEP_INSERTING, l._step_state);
	
	TEARDOWN();
	t.end();
});

test('[lesson.next] correct, complete insert, beginning of array', function (t) {
	//SETUP
	var ui = SETUP();
	var l = lesson({UI: ui});
	ui.input.set("0");
	
	var array_setup = require('lib/lesson/util/array_setup');
	var test_array = array_setup({size:4, fill:[1, 2]});
	var test_arrow = test_array._.arrow;
	
	ui.stage.del(l._array);
	ui.stage.del(l._arrow);
	
	l._array = test_array;
	l._arrow = test_arrow;
	
	ui.stage.add(l._array);
	
	//TEST
	
	//iterate through the lesson logic, until we reach the end of the search logic
	var intervalID = setInterval(function() {
		var result = l.next();
		
		if (result.done) {
			t.equal(l._array._.values.length, 3);
			t.equal(l._array._.values[0],0);
			t.equal(l._array.children[0].children.length, 2);
			t.equal(l._array.children[0].children[1].text, "0");
			
			//CLEANUP
			TEARDOWN();
			t.end();
			clearInterval(intervalID);
		}
	}, 1500);
});

test('[lesson.next] correct, complete insert, end of array', function (t) {
	//SETUP
	var ui = SETUP();
	var l = lesson({UI: ui});
	ui.input.set("3");
	
	var array_setup = require('lib/lesson/util/array_setup');
	var test_array = array_setup({size:4, fill:[1, 2]});
	var test_arrow = test_array._.arrow;
	
	ui.stage.del(l._array);
	ui.stage.del(l._arrow);
	
	l._array = test_array;
	l._arrow = test_arrow;
	
	ui.stage.add(l._array);
	
	//TEST
	
	//iterate through the lesson logic, until we reach the end of the search logic
	var intervalID = setInterval(function() {
		var result = l.next();
		
		if (result.done) {
			t.equal(l._array._.values.length, 3);
			t.equal(l._array._.values[2], 3);
			t.equal(l._array.children[2].children.length, 2);
			t.equal(l._array.children[2].children[1].text, "3");
			
			//CLEANUP
			TEARDOWN();
			t.end();
			clearInterval(intervalID);
		}
	}, 1500);
});

test('[lesson.next] correct, complete insert, middle of array', function (t) {
	//SETUP
	var ui = SETUP();
	var l = lesson({UI: ui});
	ui.input.set("1");
	
	var array_setup = require('lib/lesson/util/array_setup');
	var test_array = array_setup({size:4, fill:[0, 2]});
	var test_arrow = test_array._.arrow;
	
	ui.stage.del(l._array);
	ui.stage.del(l._arrow);
	
	l._array = test_array;
	l._arrow = test_arrow;
	
	ui.stage.add(l._array);
	
	//TEST
	
	//iterate through the lesson logic, until we reach the end of the search logic
	var intervalID = setInterval(function() {
		var result = l.next();
		
		if (result.done) {
			t.equal(l._array._.values.length, 3);
			t.equal(l._array._.values[1], 1);
			t.equal(l._array.children[1].children.length, 2);
			t.equal(l._array.children[1].children[1].text, "1");
			
			//CLEANUP
			TEARDOWN();
			t.end();
			clearInterval(intervalID);
		}
	}, 1500);
});

test('[lesson.next] correct, complete insert, multiple inserts, filling array', function (t) {
	//SETUP
	var ui = SETUP();
	var l = lesson({UI: ui});
	
	var array_setup = require('lib/lesson/util/array_setup');
	var test_array = array_setup({size:4, fill:[0, 2]});
	var test_arrow = test_array._.arrow;
	
	ui.stage.del(l._array);
	ui.stage.del(l._arrow);
	
	l._array = test_array;
	l._arrow = test_arrow;
	
	ui.stage.add(l._array);
	
	function do_lesson(value, test, cleanup) {
		ui.input.set(String(value));
		
		var intervalID = setInterval(function() {
			var result = l.next();
			
			if (result.done) {
				//CLEANUP
				test();
				
				if (check.boolean(cleanup) && cleanup === true) {
					TEARDOWN();
					t.end();
				}
				
				clearInterval(intervalID);
			}
		}, 1500);
	}
	
	function test_1() {
		t.equal(l._array._.values.length, 3);
		t.equal(l._array._.values[1], 1);
		t.equal(l._array.children[1].children.length, 2);
		t.equal(l._array.children[1].children[1].text, "1");
		
		do_lesson(3, test_2);
	}
	
	function test_2() {
		t.equal(l._array._.values.length, 4);
		t.equal(l._array._.values[3], 3);
		t.equal(l._array.children[3].children.length, 2);
		t.equal(l._array.children[3].children[1].text, "3");
		
		do_lesson(4, test_3, true);
	}
	
	function test_3() {
		t.equal(l._state, l._DONE);
	}
	
	do_lesson(1, test_1);
});
