var append_to = require('lib/util/append_to');
var test = require('tape');
var check = require('check-types');

test('[append_to] correct, argument form: obj.htmlElement', function (t) {
	t.plan(4);
	
	//setup
	var parent_html = document.createElement('div');
	
	var mock_child_obj = {};
	mock_child_obj.htmlElement = document.createElement('div');
	
	mock_child_obj.append_to = append_to(mock_child_obj);
	
	//test
	t.ok(check.function(mock_child_obj.append_to), 'we should get back a function');
	
	t.equal(parent_html.childNodes.length, 0, 'our test parent should not have any children...');
	mock_child_obj.append_to(parent_html);
	t.equal(parent_html.childNodes.length, 1, '...until after we append something...');
	
	t.deepEqual(parent_html.childNodes[0], mock_child_obj.htmlElement, '...and that object appended should be the mock');
});

test('[append_to] incorrect, argument form: obj.htmlElement, htmlElement is not Element', function (t) {
	t.plan(3);
	
	//setup
	var parent_html = document.createElement('div');
	
	var mock_child_obj = {};
	mock_child_obj.htmlElement = 'some incorrect object type';
	
	//test
	try {
		append_to(mock_child_obj);
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Incorrect property type/), 'bad type');
		t.ok(message.match(/HTML Element/), 'tells you what was needed');
	}
});

test('[append_to.direct_append_to] incorrect, bad argument', function (t) {
	t.plan(3);
	
	//setup
	var parent_html = document.createElement('div');
	
	var mock_child_obj = {};
	mock_child_obj.htmlElement = document.createElement('div');
	
	mock_child_obj.append_to = append_to(mock_child_obj);
	
	//test
	try {
		mock_child_obj.append_to(['some bad argument']);
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Incorrect argument type/), 'bad type');
		t.ok(message.match(/HTML Element/), 'tells you what was needed');
	}
});

test('[append_to] correct, argument form: obj._.htmlElement', function (t) {
	t.plan(4);
	
	//setup
	var parent_html = document.createElement('div');
	
	var mock_child_obj = {};
	mock_child_obj._ = {};
	mock_child_obj._.htmlElement = document.createElement('div');
	
	mock_child_obj.append_to = append_to(mock_child_obj);
	
	//test
	t.ok(check.function(mock_child_obj.append_to), 'we should get back a function');
	
	t.equal(parent_html.childNodes.length, 0, 'our test parent should not have any children...');
	mock_child_obj.append_to(parent_html);
	t.equal(parent_html.childNodes.length, 1, '...until after we append something...');
	
	t.deepEqual(parent_html.childNodes[0], mock_child_obj._.htmlElement, '...and that object appended should be the mock');
});

test('[append_to] incorrect, argument form: obj._.htmlElement, htmlElement is not Element', function (t) {
	t.plan(3);
	
	//setup
	var parent_html = document.createElement('div');
	
	var mock_child_obj = {};
	mock_child_obj._ = {};
	mock_child_obj._.htmlElement = 'some incorrect object type';
	
	//test
	try {
		append_to(mock_child_obj);
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Incorrect property type/), 'bad type');
		t.ok(message.match(/HTML Element/), 'tells you what was needed');
	}
});

test('[append_to] correct, argument form: obj.children WITH ._. namepsace', function (t) {
	t.plan(2);
	
	//setup
	var parent_html = document.createElement('div');
	
	var mock_child_obj = {};
	mock_child_obj._ = {};
	mock_child_obj.children = [];
	var m = {};
	m._ = {append_to : function() {
		t.ok(true, 'called append_to on child');
	}};
	mock_child_obj.children.push(m);
	
	mock_child_obj.append_to = append_to(mock_child_obj);
	
	//test
	t.ok(check.function(mock_child_obj.append_to), 'we should get back a function');
	//then calling append_to() here should call the append_to() function on the child object m, as above
	mock_child_obj.append_to(parent_html);
});

test('[append_to] incorrect, argument form: obj.children, children not array', function (t) {
	t.plan(3);
	
	//setup
	var parent_html = document.createElement('div');
	
	var mock_child_obj = {};
	mock_child_obj.children = {};
	
	try {
		append_to(mock_child_obj);
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/children/), 'bad type');
		t.ok(message.match(/should be of type array/), 'tells you what was needed');
	}
});

test('[append_to] incorrect, bad argument form', function (t) {
	t.plan(3);
	
	//setup
	var parent_html = document.createElement('div');
	var mock_child_obj = {};
	
	try {
		append_to(mock_child_obj);
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Object was of incorrect form/), 'bad type');
		t.ok(message.match(/see documentation for acceptable forms/), 'tells you what was needed');
	}
});

test('[append_to] incorrect, argument not object', function (t) {
	t.plan(3);
	
	//setup
	var parent_html = document.createElement('div');
	var mock_child_obj = [];
	
	try {
		append_to(mock_child_obj);
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Incorrect argument type/), 'bad type');
		t.ok(message.match(/requires Object/), 'tells you what was needed');
	}
});

test('[append_to] incorrect, ._. namespace exists, but form incorrect', function (t) {
	t.plan(3);
	
	//setup
	var parent_html = document.createElement('div');
	var mock_child_obj = {};
	mock_child_obj._ = {};
	
	try {
		append_to(mock_child_obj);
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Object was of incorrect form/), 'bad type');
		t.ok(message.match(/see documentation for acceptable forms/), 'tells you what was needed');
	}
});
