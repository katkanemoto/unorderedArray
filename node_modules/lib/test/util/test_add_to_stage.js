var add_to_stage = require("lib/util/add_to_stage");
var test = require('tape');
var check = require('check-types');

function SETUP() {
	var primitives = require("lib/util/primitives");
	primitives.set('createjs', createjs);
	
	var canvas = document.getElementsByTagName('canvas')[0];
	var stage = new createjs.Stage(canvas);
	
	primitives.set('stage', stage);
}

function TEARDOWN() {
	var primitives = require("lib/util/primitives");
	primitives.clear();
}

test('[add_to_stage] incorrect, bad argument', function (t) {
	t.plan(3);
	
	//SETUP
	var canvas = document.getElementsByTagName('canvas')[0];
	var stage = new createjs.Stage(canvas);
	
	var primitives = require("lib/util/primitives");
	primitives.set('stage', stage);
	
	//TEST
	try {
		add_to_stage({});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Cannot add object of type/), 'bad object type');
		t.ok(message.match(/requires createjs DisplayObject/), 'need DisplayObject');
	}
	
	//CLEANUP
	primitives.clear();
});

test('[add_to_stage] correct, get back a function', function (t) {
	t.plan(1);
	
	//SETUP
	var canvas = document.getElementsByTagName('canvas')[0];
	var stage = new createjs.Stage(canvas);
	
	var primitives = require("lib/util/primitives");
	primitives.set('stage', stage);
	
	//TEST
	var text = new createjs.Text('some string');
	
	var add_text = add_to_stage(text);
	
	t.ok(check.function(add_text));
	
	//CLEANUP
	stage.removeAllChildren();
	primitives.clear();
});

test('[add_to_stage] correct, the function adds to the stage', function (t) {
	t.plan(3);
	
	//SETUP
	var canvas = document.getElementsByTagName('canvas')[0];
	var stage = new createjs.Stage(canvas);
	
	var primitives = require("lib/util/primitives");
	primitives.set('stage', stage);
	
	//TEST
	var text = new createjs.Text('some string');
	
	var add_text = add_to_stage(text);
	
	t.equal(stage.children.length, 0,'stage starts empty...');
	
	add_text();
	
	t.equal(stage.children.length, 1, '...but then we see the new child added');
	t.deepEqual(stage.children[0], text, "...and it's the node we passed in");
	
	//CLEANUP
	stage.removeAllChildren();
	primitives.clear();
});

test("[add_to_stage] correct, but doesn't add the object twice", function (t) {
	t.plan(3);
	
	//SETUP
	var canvas = document.getElementsByTagName('canvas')[0];
	var stage = new createjs.Stage(canvas);
	
	var primitives = require("lib/util/primitives");
	primitives.set('stage', stage);
	
	//TEST
	var text = new createjs.Text('some string');
	
	var add_text = add_to_stage(text);
	
	t.equal(stage.children.length, 0, 'stage starts empty...');
	
	add_text();
	
	t.equal(stage.children.length, 1, '...but then we see the new child added');
	
	add_text();
	
	t.equal(stage.children.length, 1, 'then not added again, if we call add_to_stage again');
	
	//CLEANUP
	stage.removeAllChildren();
	primitives.clear();
});

/* test("[add_to_stage] incorrect, stage not registerd with primitives before call", function (t) {
	t.plan(3);
	
	//SETUP
	var text = new createjs.Text('some string');
	
	//TEST
	try {
		add_to_stage(text);
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/stage/), 'was checking for stage');
		t.ok(message.match(/undefined in primitives object/), 'defined what was wrong');
	}
}); */

test("[add_to_stage] incorrect, 'stage' unset", function (t) {
	t.plan(3);
	
	//SETUP
	var text = new createjs.Text('some string');
	
	//TEST
	try {
		add_to_stage(text);
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/stage/), 'checking for an object in primitives');
		t.ok(message.match(/undefined or not object in primitives object/), 'defined what was wrong');
	}
	
	TEARDOWN();
});

test("[add_to_stage] incorrect, 'stage' wrong type", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	var text = new createjs.Text('some string');
	
	var primitives = require("lib/util/primitives");
	primitives.set('stage', '');
	
	//TEST
	try {
		add_to_stage(text);
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/stage/), 'checking for an object in primitives');
		t.ok(message.match(/undefined or not object in primitives object/), 'defined what was wrong');
	}
	
	TEARDOWN();
});