var argument_check = require("lib/util/argument_check");
var test = require('tape');
var check = require('check-types');

test('[argument_check] error invalid type passed', function (t) {
	t.plan(2);
	try {
		argument_check("");
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Arguments to argument_check/), 'we should see the special error message for the arguments check');
	}
});

test('[argument_check] passed undefined, return empty object', function (t) {
	t.plan(1);
	t.ok(check.emptyObject(argument_check(undefined)), 'should get back empty object on undefined');
});

test('[argument_check] Correct, but empty', function (t) {
	t.plan(1);
	t.ok(check.emptyObject(argument_check({})), 'should get back empty object on empty object');
});

test('[argument_check] Correct, but unknown argument', function (t) {
	t.plan(1);
	t.deepEqual(argument_check({some_fake_argument_name:42}), { some_fake_argument_name: 42 });
});

test('[argument_check] Correct, known argument with valid type', function (t) {
	t.plan(1);
	t.deepEqual(argument_check({width:42}), { width: 42 });
});

test('[argument_check][width] Error, known argument with invalid type', function (t) {
	t.plan(4);
	
	try {
		argument_check({width:"42"})
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/width/), 'verify we saw the right argument');
		t.ok(message.match(/was String/), '...and detected the right type');
		t.ok(message.match(/number \( greater than zero \)/), '...and reported which type it should be');
	}
});

test('[argument_check] Correct, known argument with valid wrapper type', function (t) {
	t.plan(1);
	t.deepEqual(argument_check({width:Number(42)}), { width: 42 });
});

test('[argument_check] Correct, known argument: null', function (t) {
	t.plan(1);
	t.deepEqual(argument_check({fill:null}), {fill:null});
});

test('[argument_check] Correct, known argument: non-empty string', function (t) {
	t.plan(1);
	t.deepEqual(argument_check({fill:"red"}), {fill:"red"});
});

test('[argument_check][fill] Error, known argument, emtpy string', function (t) {
	t.plan(4);
	try {
		argument_check({fill:""})
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/fill/), 'verify we saw the right argument');
		t.ok(message.match(/was empty String/), '...and detected the right type');
		t.ok(message.match(/non-empty String \(of a valid CSS color\)/), '...and reported which type it should be');
	}
});

test('[argument_check] Correct, argument textAlign', function (t) {
	t.plan(1);
	t.deepEqual(argument_check({textAlign:"start"}), {textAlign:"start"});
});

test('[argument_check][textAlign] incorrect, argument is string but not an acceptable one', function (t) {
	t.plan(3);
	try {
		argument_check({textAlign:"some fake string"});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/textAlign/), 'verify we saw the right argument');
		t.ok(message.match(/of one of these: start, end, left, right, center/), '...and reported which value it should be');
	}
});

test('[argument_check][textAlign], error null', function (t) {
	t.plan(3);
	try {
		argument_check({textAlign:null});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/textAlign/), 'verify we saw the right argument');
		t.ok(message.match(/of one of these: start, end, left, right, center/), '...and reported which value it should be');
	}
});

test('[argument_check] Correct, argument color', function (t) {
	t.plan(1);
	t.deepEqual(argument_check({color:"red"}), {color:"red"});
});

test('[argument_check] incorrect, argument color, but not a color', function (t) {
	t.plan(3);
	try {
		argument_check({color:"some fake string"});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/color/), 'verify we saw the right argument');
		t.ok(message.match(/of a valid CSS color/), '...and reported which value it should be');
	}
});

test('[argument_check][font] correct', function (t) {
	t.plan(1);
	t.deepEqual(argument_check({font:"18px Arial"}), {font:"18px Arial"});
});

test('[argument_check][font] bad font', function (t) {
	t.plan(3);
	try {
		argument_check({font:"some fake string"});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/font/), 'verify we saw the right argument');
		t.ok(message.match(/of a valid CSS font/), '...and reported which value it should be');
	}
});

test('[argument_check][font] empty string font', function (t) {
	t.plan(3);
	try {
		argument_check({font:""});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/font/), 'verify we saw the right argument');
		t.ok(message.match(/of a valid CSS font/), '...and reported which value it should be');
	}
});

test('[argument_check][font] null font', function (t) {
	t.plan(3);
	try {
		argument_check({font:null});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/font/), 'verify we saw the right argument');
		t.ok(message.match(/of a valid CSS font/), '...and reported which value it should be');
	}
});

test('[argument_check][width] correct', function (t) {
	t.plan(1);
	t.deepEqual(argument_check({width:1}), {width:1});
});

test('[argument_check][width] error, null', function (t) {
	t.plan(3);
	try {
		argument_check({width:null});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/width/), 'verify we saw the right argument');
		t.ok(message.match(/number \( greater than zero \)/), '...and reported which value it should be');
	}
});

test('[argument_check][width] error, 0', function (t) {
	t.plan(3);
	try {
		argument_check({width:0});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/width/), 'verify we saw the right argument');
		t.ok(message.match(/number \( greater than zero \)/), '...and reported which value it should be');
	}
});

test('[argument_check][x] error, null', function (t) {
	t.plan(3);
	try {
		argument_check({x:null});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/x/), 'verify we saw the right argument');
		t.ok(message.match(/number/), '...and reported which value it should be');
	}
});

test('[argument_check][radius] error, 0', function (t) {
	t.plan(3);
	try {
		argument_check({radius:0});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/radius/), 'verify we saw the right argument');
		t.ok(message.match(/number \( greater than zero \)/), '...and reported which value it should be');
	}
});

test('[argument_check][x] error any argument whose value is undefined', function (t) {
	t.plan(3);
	try {
		argument_check({x:undefined});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/x/), 'verify we saw the right argument');
		t.ok(message.match(/number/), '...and reported which value it should be');
	}
});

test('[argument_check][fill] error any argument whose value is undefined', function (t) {
	t.plan(4);
	try {
		argument_check({fill:undefined});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/fill/), 'verify we saw the right argument');
		t.ok(message.match(/non-empty String/), '...and reported which value it should be');
		t.ok(message.match(/or null/), '...and reported which value it should be');
	}
});

test('[argument_check][font] error any argument whose value is undefined', function (t) {
	t.plan(4);
	try {
		argument_check({font:undefined});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/font/), 'verify we saw the right argument');
		t.ok(message.match(/non-empty String/), '...and reported which value it should be');
		t.ok(message.match(/of a valid CSS font/), '...and reported which value it should be');
	}
});

test('[argument_check][textAlign] error any argument whose value is undefined', function (t) {
	t.plan(4);
	try {
		argument_check({textAlign:undefined});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/textAlign/), 'verify we saw the right argument');
		t.ok(message.match(/non-empty String/), '...and reported which value it should be');
		t.ok(message.match(/start, end, left, right, center/), '...and reported which value it should be');
	}
});

test('[argument_check][radius] error any argument whose value is undefined', function (t) {
	t.plan(4);
	try {
		argument_check({radius:undefined});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/radius/), 'verify we saw the right argument');
		t.ok(message.match(/number/), '...and reported which value it should be');
		t.ok(message.match(/greater than zero/), '...and reported which value it should be');
	}
});

test('[argument_check]unknown variable, error any argument whose value is undefined', function (t) {
	t.plan(3);
	try {
		argument_check({text:undefined});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/text/), 'verify we saw the right argument');
		t.ok(message.match(/was undefined/), '...and reported why there was an error');
	}
});

test('[argument_check][type], incorrect', function (t) {
	t.plan(3);
	try {
		argument_check({type:0});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/type/), 'verify we saw the right argument');
		t.ok(message.match(/non-empty String/), '...and reported why there was an error');
	}
});

test('[argument_check][type] correct', function (t) {
	t.plan(1);
	t.deepEqual(argument_check({type:"some type string"}), {type:"some type string"});
});