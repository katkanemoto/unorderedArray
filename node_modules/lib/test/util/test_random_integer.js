var random_integer = require('lib/util/random_integer');
var test = require('tape');
var check = require('check-types');

test('[random_integer] correct, no arguments', function (t) {
	var result = random_integer();

	t.plan(1);
	t.ok(result >= 0 || result <= 1000, "should be in default range [0, 1000]");
});

test('[random_integer] correct, valid arguments', function (t) {
	var result = random_integer(0, 1);

	t.plan(1);
	t.ok(result >= 0 || result <= 1, 'should be in range [0, 1]');
});

test('[random_integer] incorrect, single argument', function (t) {
	t.plan(2);
	try {
		random_integer(0);
	} catch(error) {
		t.ok(check.instanceStrict(error, Error), 'we should get back a basic Error');
		var message = error.toString();
		t.ok(message.match(/Incorrect number of arguments/), 'should see the error about incorrect number of arguments');
	}
});

test('[random_integer] incorrect, lower bound is larger than upper bound', function (t) {
	t.plan(2);
	try {
		random_integer(1, 0);
	} catch(error) {
		t.ok(check.instanceStrict(error, Error), 'we should get back a basic Error');
		var message = error.toString();
		t.ok(message.match(/Value Error/), 'should be an error of the value of the arguments');
	}
});

test('[random_integer] incorrect, bad input', function (t) {
	t.plan(2);
	try {
		random_integer(0, "1");
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/number or undefined/), 'should be an error of the type of the argument');
	}
});