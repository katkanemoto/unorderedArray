var unique_id = require('lib/util/unique_id');
var test = require('tape');
var check = require('check-types');

function SETUP() {
	var primitives = require("lib/util/primitives");
	primitives.set('createjs', createjs);
	
	var canvas = document.getElementsByTagName('canvas')[0];
	var stage = new createjs.Stage(canvas);
	
	primitives.set('stage', stage);
}

function TEARDOWN() {
	var primitives = require("lib/util/primitives");
	primitives.clear();
}

test('[unique_id] correct, no argument', function (t) {
	t.plan(1);
	
	//SETUP
	var primitives = require("lib/util/primitives");
	primitives.set('createjs', createjs);
	
	//TEST
	var result = unique_id();
	t.ok(/\_\d/,'get back an underscore followed by a digit');
	
	//CLEANUP
	primitives.clear();
});

test('[unique_id] correct, some argument', function (t) {
	t.plan(1);
	
	//SETUP
	var primitives = require("lib/util/primitives");
	primitives.set('createjs', createjs);
	
	//TEST
	var result = unique_id('some prefix');
	t.ok(/some prefix\_\d/,'get back the prefix prepended to the id');
	
	//CLEANUP
	primitives.clear();
});

test("[unique_id] incorrect, 'createjs' unset", function (t) {
	t.plan(3);
	
	//TEST
	try {
		unique_id();
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		console.log(message);
		t.ok(message.match(/createjs/), 'checking for an object in primitives');
		t.ok(message.match(/undefined or not object in primitives object/), 'defined what was wrong');
	}
	
	TEARDOWN();
});

test("[unique_id] incorrect, 'createjs' wrong type", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	var primitives = require("lib/util/primitives");
	primitives.set('createjs', '');
	
	//TEST
	try {
		unique_id();
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/createjs/), 'checking for an object in primitives');
		t.ok(message.match(/undefined or not object in primitives object/), 'defined what was wrong');
	}
	
	TEARDOWN();
});