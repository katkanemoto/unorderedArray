var html_factory = require('lib/factory/html_factory');
var test = require('tape');
var check = require('check-types');

function SETUP() {
	var primitives = require("lib/util/primitives");
	primitives.set('createjs', createjs);
	
	var canvas = document.getElementsByTagName('canvas')[0];
	var stage = new createjs.Stage(canvas);
	
	primitives.set('stage', stage);
}

function TEARDOWN() {
	var primitives = require("lib/util/primitives");
	primitives.clear();
}

test('[html_factory._get_text] correct, default should be empty string', function (t) {
	t.plan(1);
	
	SETUP();
	
	var hf = html_factory();
	var result = hf._get_text();
	
	t.equal(result.text, '');
	
	TEARDOWN();
});

test('[html_factory.html] incorrect, did not pass "type" option', function (t) {
	t.plan(2);
	
	SETUP();
	
	var hf = html_factory();
	try {
		hf.html({});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/argument \'type\' is required/), 'argument should include "type"');
	}
	
	TEARDOWN();
});

test('[html_factory.html] incorrect, "type" passed, but unknown', function (t) {
	t.plan(2);
	
	SETUP();
	
	var hf = html_factory();
	try {
		hf.html({type:"some wrong type"});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/argument \'type\' was unsupported/), 'argument should include "type"');
	}
	
	TEARDOWN();
});

test('[html_factory.html] correct, "type" passed, id generated', function (t) {
	t.plan(3);
	
	SETUP();
	
	var hf = html_factory();
	hf.html({type:"radio"});
	t.equal(hf._html_options.type, "radio", "should have the radio option set");
	t.ok(hf._html_options.id.match(/^radio/), "id should begin with the type...");
	t.ok(hf._html_options.id.match(/(\d+)$/)[1], "...and end with a number");
	
	TEARDOWN();
});

test('[html_factory.html] correct, "type" passed, id passed', function (t) {
	t.plan(2);
	
	SETUP();
	
	var hf = html_factory();
	hf.html({type:"radio", id:1});
	t.equal(hf._html_options.type, "radio", "should have the radio option set");
	t.equal(hf._html_options.id, "1", "should have an id");
	
	TEARDOWN();
});

test('[html_factory.html] incorrect, option "label" set but type is not button', function (t) {
	t.plan(3);
	
	SETUP();
	
	var hf = html_factory();
	try {
		hf.html({type:"radio", label:"some label"});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/label/));
		t.ok(message.match(/button/));
	}
	
	TEARDOWN();
});

test('[html_factory._get_html] correct', function (t) {
	t.plan(2);
	
	SETUP();
	
	var hf = html_factory();
	hf._html_options.type = "radio";
	hf._html_options.id = "1";
	
	
	var result = hf._get_html();
	t.equal(result.type, "radio", "should have the radio option set");
	t.equal(result.id, "1", "should have an id");
	
	TEARDOWN();
});

//NOTE: using 'value' instead of 'label' property on buttons, as per poor documentation on MDN
test('[html_factory._get_html] correct, label', function (t) {
	t.plan(1);
	
	SETUP();
	
	var hf = html_factory();
	hf._html_options.type = "button";
	hf._html_options.label = 'some label';
	
	var result = hf._get_html();
	t.equal(result.value, 'some label');
	
	TEARDOWN();
});

test('[html_factory._get_html] correct, label (not string)', function (t) {
	t.plan(1);
	
	SETUP();
	
	var hf = html_factory();
	hf._html_options.type = "button";
	hf._html_options.label = 0;
	
	var result = hf._get_html();
	t.equal(result.value, '0');
	
	TEARDOWN();
});

test('[html_factory._get_dom_element] correct', function (t) {
	t.plan(3);
	
	SETUP();
	
	var hf = html_factory();
	var html = document.createElement('input');
	html.type = 'radio';
	html.id = "1";
	
	var result = hf._get_dom_element(html);
	
	t.ok(check.instanceStrict(result, createjs.DOMElement), 'should get back a createjs.DOMElement');
	t.equal(result.htmlElement.type, 'radio', 'radio type input element');
	t.equal(result.htmlElement.id, '1', 'id should be set');
	
	TEARDOWN();
});

test('[html_factory._bundle] correct', function (t) {
	t.plan(6);
	
	SETUP();
	
	var hf = html_factory();
	var html = document.createElement('input');
	html.type = 'radio';
	html.id = "1";
	
	var de = new createjs.DOMElement(html);
	
	var text = new createjs.Text('some string');
	
	var result = hf._bundle(de, text);
	
	t.ok(check.instanceStrict(result, createjs.Container), 'should get back a createjs.Container');
	t.equal(result.children.length, 2);
	t.deepEqual(result.children[0], de);
	t.deepEqual(result.children[1], text);
	t.deepEqual(result._.htmlElement, html);
	t.equal(result._.text, 'some string');
	
	TEARDOWN();
});

test('[html_factory._bundle] correct', function (t) {
	t.plan(6);
	
	SETUP();
	
	var hf = html_factory();
	var html = document.createElement('input');
	html.type = 'radio';
	html.id = "1";
	
	var de = new createjs.DOMElement(html);
	
	var text = new createjs.Text('some string');
	
	var result = hf._bundle(de, text);
	
	t.ok(check.instanceStrict(result, createjs.Container), 'should get back a createjs.Container');
	t.equal(result.children.length, 2);
	t.deepEqual(result.children[0], de);
	t.deepEqual(result.children[1], text);
	t.deepEqual(result._.htmlElement, html);
	t.equal(result._.text, 'some string');
	
	TEARDOWN();
});

test('[html_factory._decorate] correct', function (t) {
	t.plan(2);
	
	SETUP();
	
	var container = new createjs.Container();
	
	container._ = {};
	
	var html = document.createElement('input');
	html.type = 'radio';
	html.id = "1";
	
	container._.htmlElement = html;
	
	var hf = html_factory();
	var result = hf._decorate(container);
	
	t.ok(result._.append_to, "the decorated method was applied to the container");
	t.ok(check.function(result._.append_to), "...and that it's a method");
	
	TEARDOWN();
});

test('[html_factory._decorate.append_to] correct', function (t) {
	t.plan(3);
	
	SETUP();
	
	var container = new createjs.Container();
	
	container._ = {};
	
	var html = document.createElement('input');
	html.type = 'radio';
	html.id = "1";
	
	container._.htmlElement = html;
	
	var hf = html_factory();
	var result = hf._decorate(container);
	
	var target = document.createElement('div');
	
	result._.append_to(target);
	
	t.ok(target.hasChildNodes(), "the div we created should now have children");
	t.equal(target.childNodes.length, 1, "...there should be only one child");
	t.deepEqual(target.childNodes[0], html, "...and the child should be the HTML we made");
	
	TEARDOWN();
});

test('[html_factory._decorate.append_to] incorrect, bad argument', function (t) {
	t.plan(2);
	
	SETUP();
	
	var container = new createjs.Container();
	
	container._ = {};
	
	var html = document.createElement('input');
	html.type = 'radio';
	html.id = "1";
	
	container._.htmlElement = html;
	
	var hf = html_factory();
	var result = hf._decorate(container);
	
	var target = document.createElement('div');
	
	try {
		result._.append_to("some bad argument");
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/HTML Element/), '...we should want an HTML element');
	}
	
	TEARDOWN();
});

test('[html_factory._decorate] correct, add_to_stage', function (t) {
	t.plan(2);
	
	SETUP();
	
	var container = new createjs.Container();
	
	container._ = {};
	
	var html = document.createElement('input');
	html.type = 'radio';
	html.id = "1";
	
	container._.htmlElement = html;
	
	var hf = html_factory();
	var result = hf._decorate(container);
	
	t.ok(check.object(result._));
	t.ok(check.function(result._.add_to_stage));
	
	TEARDOWN();
});

test('[html_factory._decorate] correct, name', function (t) {
	t.plan(3);
	
	//setup
	
	SETUP();
	
	var container = new createjs.Container();
	
	container._ = {};
	
	var html = document.createElement('input');
	html.type = 'radio';
	html.id = "1";
	
	container._.htmlElement = html;
	
	var hf = html_factory();
	hf._name = "some test name";
	
	var result = hf._decorate(container);
	
	//test
	t.ok(check.object(result._));
	t.ok(check.string(result._.name));
	t.equal(result._.name, "some test name");
	
	TEARDOWN();
});

test('[html_factory._decorate] correct, name unset, but label set', function (t) {
	t.plan(3);
	
	//setup
	
	SETUP();
	
	var container = new createjs.Container();
	
	container._ = {};
	
	var html = document.createElement('input');
	html.type = 'radio';
	html.id = "1";
	
	container._.htmlElement = html;
	
	var hf = html_factory();
	hf._html_options.label = 'some test name';
	
	var result = hf._decorate(container);
	
	//test
	t.ok(check.object(result._));
	t.ok(check.string(result._.name));
	t.equal(result._.name, "some test name");
	
	TEARDOWN();
});

test('[html_factory._decorate] correct, name unset, but label set (non-string)', function (t) {
	t.plan(3);
	
	//setup
	
	SETUP();
	
	var container = new createjs.Container();
	
	container._ = {};
	
	var html = document.createElement('input');
	html.type = 'radio';
	html.id = "1";
	
	container._.htmlElement = html;
	
	var hf = html_factory();
	hf._html_options.label = 123456;
	
	var result = hf._decorate(container);
	
	//test
	t.ok(check.object(result._));
	t.ok(check.string(result._.name));
	t.equal(result._.name, "123456");
	
	TEARDOWN();
});

test('[html_factory._set_props] correct, no options', function (t) {
	t.plan(2);
	
	SETUP();
	
	var container = new createjs.Container();
	var hf = html_factory();
	
	var result = hf._set_props(container);
	
	t.equal(result.x, 0);
	t.equal(result.y, 0);
	
	TEARDOWN();
});

test('[html_factory._set_props] correct, user options', function (t) {
	t.plan(2);
	
	SETUP();
	
	var container = new createjs.Container();
	var hf = html_factory();
	
	var result = hf._set_props(container, {x:1, y:1});
	
	t.equal(result.y, 1);
	t.equal(result.x, 1);
	
	TEARDOWN();
});

test('[html_factory.get] correct', function (t) {
	t.plan(8);
	
	SETUP();
	
	var hf = html_factory();
	hf.html({type:'radio'});
	var result = hf.get()
	
	t.ok(result.children, "we should have a container");
	t.equal(result.children.length, 2, "...that has two children");
	t.ok(result.children[0].htmlElement, "...the first child is an HTML element");
	t.ok(check.string(result.children[1].text), "...the second is Text");
	t.deepEqual(result.children[0].htmlElement, result._.htmlElement, "...we should see the HTML exposed in our namespace _");
	t.equal(result.children[1].text, result._.text, "...and the text value exposed in _");
	t.equal(result._.htmlElement.type, 'radio', '...and the type of the HTML input should be "radio"');
	t.ok(check.function(result._.append_to), "...and we can see the apply_to method");
	
	TEARDOWN();
});

test('[html_factory.get] incorrect, bad options', function (t) {
	t.plan(2);
	
	SETUP();
	
	var hf = html_factory();
	hf.html({type:'radio'});
	
	try {
		hf.get("some bad argument")
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/requires Object/), 'object required');
	}
	
	TEARDOWN();
});

test('[html_factory.get] incorrect, type unset', function (t) {
	t.plan(2);
	
	SETUP();
	
	var hf = html_factory();
	
	try {
		hf.get();
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/Unknown type of HTML to create/), 'argument should include "type"');
	}
	
	TEARDOWN();
});

test('[html_factory.get] correct, user options', function (t) {
	t.plan(2);
	
	SETUP();
	
	var hf = html_factory();
	hf.html({type:'radio'});
	var result = hf.get({x:1, y:1});
	
	t.equal(result.y, 1);
	t.equal(result.x, 1);
	
	TEARDOWN();
});

test('[html_factory.get] correct, user options, multiple object', function (t) {
	t.plan(6);
	
	SETUP();
	
	var hf = html_factory();
	hf.html({type:'radio'});
	var result1 = hf.get({x:1, y:1});
	
	t.equal(result1.y, 1);
	t.equal(result1.x, 1);
	t.equal(result1._.htmlElement.type, 'radio');
	
	var result2 = hf.get();
	
	t.equal(result2.x, 1);
	t.equal(result2.y, 1);
	t.equal(result2._.htmlElement.type, 'radio');
	
	TEARDOWN();
});

test('[html_factory.get] correct, user options, text set', function (t) {
	t.plan(8);
	
	SETUP();
	
	var hf = html_factory();
	hf.html({type:'radio'});
	hf.text({text:"some string"})
	var result1 = hf.get({x:1, y:1});
	
	t.equal(result1.y, 1);
	t.equal(result1.x, 1);
	t.equal(result1._.htmlElement.type, 'radio');
	t.equal(result1._.text, "some string");
	
	var result2 = hf.get();
	
	t.equal(result2.x, 1);
	t.equal(result2.y, 1);
	t.equal(result2._.htmlElement.type, 'radio');
	t.equal(result2._.text, "some string");
	
	TEARDOWN();
});

test("[html_factory] incorrect, 'createjs' unset", function (t) {
	t.plan(3);
	
	//TEST
	try {
		html_factory();
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		console.log(message);
		t.ok(message.match(/createjs/), 'checking for an object in primitives');
		t.ok(message.match(/undefined or not object in primitives object/), 'defined what was wrong');
	}
	
	TEARDOWN();
});

test("[html_factory] incorrect, 'createjs' wrong type", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	var primitives = require("lib/util/primitives");
	primitives.set('createjs', '');
	
	//TEST
	try {
		html_factory();
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/createjs/), 'checking for an object in primitives');
		t.ok(message.match(/undefined or not object in primitives object/), 'defined what was wrong');
	}
	
	TEARDOWN();
});