var text_factory = require('lib/factory/text_factory');
var test = require('tape');
var check = require('check-types');

function SETUP() {
	var primitives = require("lib/util/primitives");
	primitives.set('createjs', createjs);
	
	var canvas = document.getElementsByTagName('canvas')[0];
	var stage = new createjs.Stage(canvas);
	
	primitives.set('stage', stage);
}

function TEARDOWN() {
	var primitives = require("lib/util/primitives");
	primitives.clear();
}

test('[text_factory.text] correct, no arguments', function (t) {
	t.plan(1);
	
	SETUP();
	
	//TEST
	var tf = text_factory();
	tf.text();
	t.deepEqual(tf._text_options, {color:"black", font:"18px Arial", text:undefined}, "text options should be set to defaults");
	
	TEARDOWN();
});

test('[text_factory.text] correct, override default', function (t) {
	t.plan(1);
	
	SETUP();
	
	var tf = text_factory();
	tf.text({color:"red"});
	t.deepEqual(tf._text_options, {color:"red", font:"18px Arial", text:undefined}, "should see color set");
	
	TEARDOWN();
});

test('[text_factory.text] correct, set x argument', function (t) {
	t.plan(1);
	
	SETUP();
	
	var tf = text_factory();
	tf.text({x:1});
	t.deepEqual(tf._text_options, {color:"black", font:"18px Arial", x:1, text:undefined}, "should see x option set");
	
	TEARDOWN();
});

test('[text_factory.text] correct, set text argument to non-createjs.Text', function (t) {
	t.plan(1);
	
	SETUP();
	
	var tf = text_factory();
	tf.text({text:1});
	t.deepEqual(tf._text_options, {color:"black", font:"18px Arial", text:"1"}, "should see string '1'");
	
	TEARDOWN();
});

test('[text_factory.text] correct, set text argument to createjs.Text', function (t) {
	t.plan(1);
	
	SETUP();
	
	var tf = text_factory();
	tf.text({text:new createjs.Text()});
	t.ok(check.instanceStrict(tf._text_options.text, createjs.Text), "should see createjs.Text option as text");
	
	TEARDOWN();
});

test('[text_factory.text] incorrect, argument is not object', function (t) {
	t.plan(2);
	
	SETUP();
	
	var tf = text_factory();
	try {
		tf.text("some bad argument");
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/requires Object/), 'argument should be an object');
	}
	
	TEARDOWN();
});

test('[text_factory.text] correct, argument is falsey (0)', function (t) {
	t.plan(1);
	
	SETUP();
	
	var tf = text_factory();
	tf.text({text:0});
	t.equal(tf._text_options.text, "0", "should see falsey item stringified");
	
	TEARDOWN();
});

test('[text_factory.text] correct, argument is falsey (null)', function (t) {
	t.plan(1);
	
	SETUP();
	
	var tf = text_factory();
	tf.text({text:null});
	t.equal(tf._text_options.text, "null", "should see falsey item stringified");
	
	TEARDOWN();
});

test('[text_factory.text] correct, argument is falsey ("")', function (t) {
	t.plan(1);
	
	SETUP();
	
	var tf = text_factory();
	tf.text({text:''});
	t.equal(tf._text_options.text, "", "should see falsey item stringified");
	
	TEARDOWN();
});

test('[text_factory.get] incorrect, argument is not object', function (t) {
	t.plan(2);
	
	SETUP();
	
	var tf = text_factory();
	try {
		tf.get("some bad argument");
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/requires Object/), 'argument should be an object');
	}
	
	TEARDOWN();
});

test('[text_factory.get] correct, overriding text()', function (t) {
	t.plan(4);
	
	SETUP();
	
	var tf = text_factory();
	tf.text({text:"some string", color:"red", x:10, y:10});
	var result = tf.get({x:5});
	t.equal(result.text, "some string");
	t.equal(result.color, "red");
	t.equal(result.x, 5);
	t.equal(result.y, 10);
	
	TEARDOWN();
});

test('[text_factory.get] correct, overriding text()', function (t) {
	SETUP();
	
	var tf = text_factory();
	tf.text({text:1, color:"red", x:10, y:10});
	var result1 = tf.get();
	
	t.equal(result1.text, "1");
	t.equal(result1.color, "red");
	t.equal(result1.x, 10);
	t.equal(result1.y, 10);
	
	var result2 = tf.get({y:15, text:2});
	
	t.equal(result2.text, "2");
	t.equal(result2.color, "red");
	t.equal(result2.x, 10);
	t.equal(result2.y, 15);
	
	TEARDOWN();
	
	t.end();
});

test('[text_factory._get_text] correct, defaults', function (t) {
	t.plan(4);
	
	SETUP();
	
	//setup
	var tf = text_factory();
	tf._text_options.text = undefined;
	
	//test
	var text = tf._get_text();
	t.equal(text.color, "black");
	t.ok(check.string(text.font), 'should have a font string, instead of undefined');
	t.ok(check.string(text.text), 'should have a string assigned');
	t.ok(check.number(Number(text.text)), '...and the value of the Text should be a number');
	
	TEARDOWN();
});

test('[text_factory._get_text] correct, user assigned value', function (t) {
	t.plan(4);
	
	//setup
	SETUP();
	
	var tf = text_factory();
	tf._text_options.text = "some user string";
	
	//test
	var text = tf._get_text();
	t.equal(text.color, "black");
	t.ok(check.string(text.font), 'should have a font string, instead of undefined');
	t.ok(check.string(text.text), 'should have a string assigned');
	t.equal(text.text, "some user string", 'and should be what we set');
	
	TEARDOWN();
});

test('[text_factory._get_text] correct, Text object', function (t) {
	t.plan(3);
	
	//setup
	SETUP();
	
	var tf = text_factory();
	tf._text_options.text = new createjs.Text("some test object");
	
	//test
	var text = tf._get_text()
	t.equal(tf._text_options.text, text, "we should have the same object returned as what we set");
	t.ok(check.string(text.text), 'should have a string assigned');
	t.equal(text.text, "some test object", 'and should be what we set');
	
	TEARDOWN();
});

test('[text_factory._decorate] correct, add_to_stage', function (t) {
	t.plan(2);
	
	//setup
	SETUP();
	
	var tf = text_factory();
	var text = new createjs.Text("some test object");
	
	//test
	var result = tf._decorate(text);
	t.ok(check.object(result._));
	t.ok(check.function(result._.add_to_stage));
	
	TEARDOWN();
});

test("[text_factory] incorrect, 'createjs' unset", function (t) {
	t.plan(3);
	
	//TEST
	try {
		text_factory();
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		console.log(message);
		t.ok(message.match(/createjs/), 'checking for an object in primitives');
		t.ok(message.match(/undefined or not object in primitives object/), 'defined what was wrong');
	}
	
	TEARDOWN();
});

test("[text_factory] incorrect, 'createjs' wrong type", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	var primitives = require("lib/util/primitives");
	primitives.set('createjs', '');
	
	//TEST
	try {
		text_factory();
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/createjs/), 'checking for an object in primitives');
		t.ok(message.match(/undefined or not object in primitives object/), 'defined what was wrong');
	}
	
	TEARDOWN();
});