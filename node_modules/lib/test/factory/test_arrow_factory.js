var arrow_factory = require('lib/factory/arrow_factory');
var test = require('tape');
var check = require('check-types');

function SETUP() {
	var primitives = require("lib/util/primitives");
	primitives.set('createjs', createjs);
	
	var canvas = document.getElementsByTagName('canvas')[0];
	var stage = new createjs.Stage(canvas);
	
	primitives.set('stage', stage);
}

function TEARDOWN() {
	var primitives = require("lib/util/primitives");
	primitives.clear();
}

test('[arrow_factory.arrow] correct, defaults', function (t) {
	t.plan(2);
	
	SETUP();
	
	var af = arrow_factory();
	
	t.deepEqual(af._arrow_options, {length: 20, width: 12, color: 'red', angle: 0});
	
	af.arrow();
	
	t.deepEqual(af._arrow_options, {length: 20, width: 12, color: 'red', angle: 0});
	
	TEARDOWN();
});

test('[arrow_factory.arrow] incorrect, angle', function (t) {
	t.plan(3);
	
	SETUP();
	
	var af = arrow_factory();
	
	try {
		af.arrow({angle:''});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/angle/), 'error should include variable with incorrect type');
		t.ok(message.match(/number/), 'and should report what type it should be');
	}
	
	TEARDOWN();
});

test('[arrow_factory.arrow] incorrect, length, wrong type', function (t) {
	t.plan(3);
	
	SETUP();
	
	var af = arrow_factory();
	
	try {
		af.arrow({length:''});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/length/), 'error should include variable with incorrect type');
		t.ok(message.match(/number/), 'and should report what type it should be');
	}
	
	TEARDOWN();
});

test('[arrow_factory.arrow] incorrect, length, wrong value', function (t) {
	t.plan(3);
	
	SETUP();
	
	var af = arrow_factory();
	
	try {
		af.arrow({length:0});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/length/), 'error should include variable with incorrect type');
		t.ok(message.match(/should be greater than zero/));
	}
	
	TEARDOWN();
});

test('[arrow_factory.arrow] incorrect, direction, wrong type', function (t) {
	t.plan(3);
	
	SETUP();
	
	var af = arrow_factory();
	
	try {
		af.arrow({direction:1});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/direction/), 'error should include variable with incorrect type');
		t.ok(message.match(/string/), 'and should report what type it should be');
	}
	
	TEARDOWN();
});

test('[arrow_factory.arrow] incorrect, direction, wrong value', function (t) {
	t.plan(3);
	
	SETUP();
	
	var af = arrow_factory();
	
	try {
		af.arrow({direction:"some bad direction"});
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/direction/), 'error should include variable with incorrect type');
		t.ok(message.match(/one of these/), 'and should report what type it should be');
	}
	
	TEARDOWN();
});

test('[arrow_factory.arrow] incorrect, direction and angle defined together', function (t) {
	t.plan(4);
	
	SETUP();
	
	var af = arrow_factory();
	
	try {
		af.arrow({direction:"left", angle:0});
	} catch(error) {
		t.ok(check.instanceStrict(error, Error), 'we should get back an Error');
		var message = error.toString();
		t.ok(message.match(/direction/), 'error should include variable with incorrect type');
		t.ok(message.match(/angle/), 'error should include variable with incorrect type');
		t.ok(message.match(/defined at the same time/));
	}
	
	TEARDOWN();
});

test('[arrow_factory.arrow] correct, angle defined', function (t) {
	t.plan(1);
	
	SETUP();
	
	var af = arrow_factory();
	
	af.arrow({angle:90});
	
	t.deepEqual(af._arrow_options, {length: 20, width: 12, color: 'red', angle: -90});
	
	TEARDOWN();
});

test('[arrow_factory.arrow] correct, direction defined and of the right type', function (t) {
	t.plan(1);
	
	SETUP();
	
	var af = arrow_factory();
	
	af.arrow({direction:'right'});
	
	t.deepEqual(af._arrow_options, {length: 20, width: 12, color: 'red', angle: -180});
	
	TEARDOWN();
});

test('[arrow_factory._get_tip] correct, defaults', function (t) {
	t.plan(2);
	
	SETUP();
	
	var af = arrow_factory();
	af._arrow_options = {length: 20, width: 12, color: 'red', angle: -180};
	var result = af._get_tip();
	
	//individual commands making up the stroke are buried in private variables
	//but we can test for where the "drawing cursor" stopped at the end of its last move
	t.equal(result.graphics.command.x, 6);
	t.equal(result.graphics.command.y, 6);
	
	TEARDOWN();
});

test('[arrow_factory._get_tip] correct, width is non-default', function (t) {
	t.plan(2);
	
	SETUP();
	
	var af = arrow_factory();
	af._arrow_options = {length: 20, width: 20, color: 'red', angle: -180};
	var result = af._get_tip();
	
	t.equal(result.graphics.command.x, 10);
	t.equal(result.graphics.command.y, 10);
	
	TEARDOWN();
});

test('[arrow_factory._get_line] correct, defaults', function (t) {
	t.plan(2);
	
	SETUP();
	
	var af = arrow_factory();
	var result = af._get_line();
	
	t.equal(result.graphics.command.x, 20);
	t.equal(result.graphics.command.y, 0);
	
	TEARDOWN();
});

test('[arrow_factory._get_line] correct, non-defaults', function (t) {
	t.plan(2);
	
	SETUP();
	
	var af = arrow_factory();
	af._arrow_options = {length: 5, width: 12, color: 'red', angle: -180};
	var result = af._get_line();
	
	
	t.equal(result.graphics.command.x, 5);
	t.equal(result.graphics.command.y, 0);
	
	TEARDOWN();
});

test('[arrow_factory._set_props] correct, defaults', function (t) {
	t.plan(3);
	
	SETUP();
	
	var af = arrow_factory();
	var container = new createjs.Container();
	var result = af._set_props(container);
	
	t.equal(result.rotation, 0);
	t.equal(result.x, 0);
	t.equal(result.y, 0);
	
	TEARDOWN();
});

test('[arrow_factory._set_props] correct, passed in options', function (t) {
	t.plan(3);
	
	SETUP();
	
	var af = arrow_factory();
	var container = new createjs.Container();
	var result = af._set_props(container, {x:1, y:1});
	
	t.equal(result.rotation, 0);
	t.equal(result.x, 1);
	t.equal(result.y, 1);
	
	TEARDOWN();
});

test('[arrow_factory._set_props] correct, passed in options + angle set ', function (t) {
	t.plan(3);
	
	SETUP();
	
	var af = arrow_factory();
	var container = new createjs.Container();
	af._arrow_options = {length: 5, width: 12, color: 'red', angle: 20};
	var result = af._set_props(container, {x:1, y:1});
	
	t.equal(result.rotation, 20);
	t.equal(result.x, 1);
	t.equal(result.y, 1);
	
	TEARDOWN();
});

test('[arrow_factory._decorate] correct, place', function (t) {
	t.plan(3);
	
	SETUP();
	
	var af = arrow_factory();
	var container = new createjs.Container();
	af._arrow_options = {length: 5, width: 12, color: 'red', angle: 20};
	var result = af._decorate(container);
	
	t.ok(check.object(result._));
	t.ok(check.object(result._.place));
	t.ok(check.function(result._.place.above));
	//t.deepEqual(result.getBounds(), {x:0, y:0, width:5, height:12});
	
	TEARDOWN();
});

test('[arrow_factory._decorate] correct, bounds', function (t) {
	t.plan(1);
	
	SETUP();
	
	var af = arrow_factory();
	var container = new createjs.Container();
	af._arrow_options = {length: 5, width: 12, color: 'red', angle: 20};
	var result = af._decorate(container);
	
	t.deepEqual(result.getBounds(), {x:0, y:0, width:5, height:12});
	
	TEARDOWN();
});

test('[arrow_factory._decorate] correct, add_to_stage', function (t) {
	t.plan(2);
	
	SETUP();
	
	var af = arrow_factory();
	var container = new createjs.Container();
	af._arrow_options = {length: 5, width: 12, color: 'red', angle: 20};
	var result = af._decorate(container);
	
	t.ok(check.object(result._));
	t.ok(check.function(result._.add_to_stage));
	
	TEARDOWN();
});

test('[arrow_factory.get] integration testing: correct, defaults', function (t) {
	t.plan(8);
	
	SETUP();
	
	var af = arrow_factory();
	var result = af.get();
	
	t.equal(result.children.length, 2, "we should see two child Shapes");
	//this should be the arrow head
	t.equal(result.children[0].graphics.command.x, 6);
	t.equal(result.children[0].graphics.command.y, 6);
	
	//this should be the line
	t.equal(result.children[1].graphics.command.x, 20);
	t.equal(result.children[1].graphics.command.y, 0);
	
	//and the entire figure should be at the default location
	t.equal(result.x, 0);
	t.equal(result.y, 0);

	t.equal(result.rotation, 0, "...and the rotation should be set to the default");
	
	TEARDOWN();
});

test('[arrow_factory.get] integration testing: correct, non-defaults', function (t) {
	t.plan(8);
	
	SETUP();
	
	var af = arrow_factory();
	af.arrow({length:10, width:10, angle:20});
	var result = af.get({x:1, y:1});
	
	t.equal(result.children.length, 2, "we should see two child Shapes");
	//this should be the arrow head
	t.equal(result.children[0].graphics.command.x, 5);
	t.equal(result.children[0].graphics.command.y, 5);
	
	//this should be the line
	t.equal(result.children[1].graphics.command.x, 10);
	t.equal(result.children[1].graphics.command.y, 0);
	
	//and the entire figure should be at the set location
	t.equal(result.x, 1);
	t.equal(result.y, 1);

	t.equal(result.rotation, -20, "...and the rotation should be set");
	
	TEARDOWN();
});

test('[arrow_factory.get] integration testing: correct, non-defaults, multiple arrows', function (t) {
	//t.plan(8);
	
	SETUP();
	
	var af = arrow_factory();
	af.arrow({length:10, width:10, angle:20});
	var result = af.get({x:1, y:1});
	
	t.equal(result.children.length, 2, "we should see two child Shapes");
	//this should be the arrow head
	t.equal(result.children[0].graphics.command.x, 5);
	t.equal(result.children[0].graphics.command.y, 5);
	
	//this should be the line
	t.equal(result.children[1].graphics.command.x, 10);
	t.equal(result.children[1].graphics.command.y, 0);
	
	//and the entire figure should be at the set location
	t.equal(result.x, 1);
	t.equal(result.y, 1);

	t.equal(result.rotation, -20, "...and the rotation should be set");
	
	var result2 = af.get({x:2, y:2});
	
	t.equal(result2.children.length, 2, "we should see two child Shapes");
	//this should be the arrow head
	t.equal(result2.children[0].graphics.command.x, 5);
	t.equal(result.children[0].graphics.command.y, 5);
	
	//this should be the line
	t.equal(result2.children[1].graphics.command.x, 10);
	t.equal(result2.children[1].graphics.command.y, 0);
	
	//and the entire figure should be at the set location
	t.equal(result2.x, 2);
	t.equal(result2.y, 2);

	t.equal(result.rotation, -20, "...and the rotation should be set");
	
	af.arrow({length:20, width:20, angle:45});
	var result3 = af.get();
	
	t.equal(result3.children.length, 2, "we should see two child Shapes");
	//this should be the arrow head
	t.equal(result3.children[0].graphics.command.x, 10);
	t.equal(result3.children[0].graphics.command.y, 10);
	
	//this should be the line
	t.equal(result3.children[1].graphics.command.x, 20);
	t.equal(result3.children[1].graphics.command.y, 0);
	
	//and the entire figure should be at the set location
	t.equal(result3.x, 2);
	t.equal(result3.y, 2);

	t.equal(result3.rotation, -45, "...and the rotation should be set");
	
	TEARDOWN();
	t.end();
});

test('[arrow_factory.get] bounds testing, defaults', function (t) {
	t.plan(4);
	
	SETUP();
	
	var af = arrow_factory();
	var result = af.get();
	
	var bounds = result.getBounds();
	
	t.equal(bounds.x, 0);
	t.equal(bounds.y, 0);
	t.equal(bounds.width, 20);
	t.equal(bounds.height, 12);
	
	TEARDOWN();
});

test('[arrow_factory.get] bounds testing, non-defaults', function (t) {
	t.plan(4);
	
	SETUP();
	
	var af = arrow_factory();
	af.arrow({length:25, width:50});
	var result = af.get();
	
	var bounds = result.getBounds();
	
	t.equal(bounds.x, 0);
	t.equal(bounds.y, 0);
	t.equal(bounds.width, 25);
	t.equal(bounds.height, 50);
	
	TEARDOWN();
});

test('[arrow_factory.get] place test', function (t) {
	t.plan(3);
	
	SETUP();
	
	var af = arrow_factory();
	var result = af.get();
	
	t.ok(result._.place);
	t.ok(result._.place.below);
	t.ok(check.function(result._.place.below));
	
	TEARDOWN();
});

test("[arrow_factory] incorrect, 'createjs' unset", function (t) {
	t.plan(3);
	
	//TEST
	try {
		arrow_factory();
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		console.log(message);
		t.ok(message.match(/createjs/), 'checking for an object in primitives');
		t.ok(message.match(/undefined or not object in primitives object/), 'defined what was wrong');
	}
	
	TEARDOWN();
});

test("[arrow_factory] incorrect, 'createjs' wrong type", function (t) {
	t.plan(3);
	
	//SETUP
	SETUP();
	
	var primitives = require("lib/util/primitives");
	primitives.set('createjs', '');
	
	//TEST
	try {
		arrow_factory();
	} catch(error) {
		t.ok(check.instanceStrict(error, ReferenceError), 'we should get back a ReferenceError');
		var message = error.toString();
		t.ok(message.match(/createjs/), 'checking for an object in primitives');
		t.ok(message.match(/undefined or not object in primitives object/), 'defined what was wrong');
	}
	
	TEARDOWN();
});

/* test('[arrow_factory.get_arrow_between] incorrect, bad argument', function (t) {
	t.plan(2);
	
	var af = arrow_factory();
	
	try {
		af.get_arrow_between([2, "bad"], ["2", 3]);
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/\[x, y\] \(where x and y are numbers\)/), 'shows correct form of the argument');
	}
});

test('[arrow_factory.get_arrow_between] incorrect, no arguments', function (t) {
	t.plan(2);
	
	var af = arrow_factory();
	
	try {
		af.get_arrow_between();
	} catch(error) {
		t.ok(check.instanceStrict(error, TypeError), 'we should get back a TypeError');
		var message = error.toString();
		t.ok(message.match(/\[x, y\] \(where x and y are numbers\)/), 'shows correct form of the argument');
	}
}); */