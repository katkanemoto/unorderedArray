//check if an argument object has valid parameters, throws with informative error if does not
//usage: 
//in function, wrap in a try...catch block, if it throws then there's an error with the type of arguments passed
//if not then all arguments pass their tests, get back an object with validated argument or empty object on no options passed

//https://www.npmjs.com/package/check-types
var check = require('check-types');	//used for checking types of arguments
var default_argument_types = {
	width : {
		is_correct_type: function(n) {
				if (!check.number(n)) return false;
				if (n <= 0) return false;
				return true;
			},
		should_be: "number ( greater than zero )",
		},
	height : {
		is_correct_type: function(n) {
				if (!check.number(n)) return false;
				if (n <= 0) return false;
				return true;
			},
		should_be: "number ( greater than zero )",
		},
	radius : {
		is_correct_type: function(n) {
				if (!check.number(n)) return false;
				if (n <= 0) return false;
				return true;
			},
		should_be: "number ( greater than zero )",
		},
	x : {
		is_correct_type: check.number,
		should_be: "number",
		},
	y : {
		is_correct_type: check.number,
		should_be: "number",
		},
	fill : {
		is_correct_type: function(str) {
				if (check.null(str)) return true;
				if (!check.nonEmptyString(str)) return false;
				var colorString = require("color-string");
				if(!colorString.get(str)) return false;
				return true;
			},
		should_be: "non-empty String (of a valid CSS color) or null",
		},
	stroke : {
		is_correct_type: function(str) {
				if (check.null(str)) return true;
				if (!check.nonEmptyString(str)) return false;
				var colorString = require("color-string");
				if(!colorString.get(str)) return false;
				return true;
			},
		should_be: "non-empty String (of a valid CSS color) or null",
		},
	font : {
		is_correct_type: function(str) {
			if (!check.nonEmptyString(str)) return false;
			
			var parseCssFont = require('parse-css-font');
			try {
				parseCssFont(str);
			} catch(e) {
				return false;
			}
			
			return true;
		},
		should_be: "non-empty String (of a valid CSS font)",
		},
	//text, we can String() anything, so just let the caller turn it into a String as required
	color : {
		is_correct_type: function(str) {
				if (check.null(str)) return true;
				if (!check.nonEmptyString(str)) return false;
				var colorString = require("color-string");
				if(!colorString.get(str)) return false;
				return true;
			},
		should_be: "non-empty String (of a valid CSS color) or null",
		},
	textAlign : {
		is_correct_type: function(str) {
				if (!check.nonEmptyString(str)) return false;
				
				//Array.includes() is not available?
				if (Array.from(["start", "end", "left", "right", "center"]).indexOf(str) === -1) return false;
				
				return true;
			},
		should_be: 'non-empty String (of one of these: ' + String("start, end, left, right, center") + ')',
		},
	//used in factories
	type: {
		is_correct_type: check.nonEmptyString,
		should_be: 'non-empty String',
		},
};

//improved version of `typeof`, used for getting actual type for printing error messages
var type_of = require('lib/util/type_of');

module.exports = function(arguments) {
	//if empty or undefined, just return empty
	if(check.emptyObject(arguments) || check.undefined(arguments)) {
		return {};
	}
	
	//otherwise argument should be an object
	if(!check.object(arguments)) {
		throw new TypeError("Arguments to argument_check was " + type_of(arguments) + ", should be: object");
	}
	
	var ret = {};
	
	//check through each property of the argument object passed in
	for (argument in arguments) {
		//if we have a default rule for what a named argument's type should be ...
		if (argument in default_argument_types) {
			var argument_name = "'" + String(argument) + "'";
			var argument_value = arguments[argument];
			var argument_type = type_of(argument_value);	//get a string of the detected type
			var argument_type_should_be_type = default_argument_types[argument].should_be;
			var error_msg = "Variable: " + argument_name + " was " + argument_type + ", should be: " + argument_type_should_be_type;
			
			//...and if it doesn't pass the type check...
			if (!default_argument_types[argument].is_correct_type(argument_value)) {
				//...then throw with information on: 
				//	what type was detected
				//	and what type it needs to be
				throw new TypeError(error_msg);
			}
		} else {
			//...we don't have a rule for it, but no argument should have a value of "undefined"
			if (check.undefined(arguments[argument])) {
				var error_msg = "Variable: " + argument + " was undefined.";
				throw new TypeError(error_msg);
			}
		}
		
		//...if there is no default rule and no error, then just the argument and its value to the return object, validated
		ret[argument] = arguments[argument];
	}
	return ret;
};