module.exports = arrow_UI;

var check = require('check-types');
var primitives = require("lib/util/primitives");

function arrow_UI(options) {
	if (!(this instanceof arrow_UI)) return new arrow_UI(options);
	
	//requires primitives.createjs
	//TODO: will need primitives.lib once we're done using mock arrow
	this._createjs = primitives.get('createjs');
	if (check.undefined(this._createjs) || check.not.object(this._createjs)) {
		throw new ReferenceError("'createjs' undefined or not object in primitives object.");
	}
	
	if (check.undefined(options)) {
		throw new TypeError("Require argument object.");
	}
	
	//required argument: name (makes a createjs.Text object associated with the arrow)
	if (check.undefined(options.name) || check.not.string(options.name)) {
		throw new TypeError("Require argument object with property 'name', should be String.");
	}
	
	//required argument: position (object with x and y properties, that are both numeric)
	//	where to initially position the arrow on the stage
	if (check.undefined(options.position) || check.not.object(options.position) || check.not.number(options.position.x) || check.not.number(options.position.y)) {
		throw new TypeError("Require argument object with property 'position', should be Object with numeric properties x and y.");
	}
	
	//required argument: pointed_at (object)
	//	a reference to the UI object that the arrow is pointed at
	if (check.undefined(options.pointed_at) || check.not.object(options.pointed_at)) {
		throw new TypeError("Require argument object with property 'pointed_at', should be Object.");
	}
	
	//required argument: next (function)
	//	manipulates the arrow as it iterates (moves around the stage, updates its internal variables, etc)
	if (check.undefined(options.next) || check.not.function(options.next)) {
		throw new TypeError("Require argument object with property 'next', should be function.");
	}
	
	//required argument: index (integer)
	//	manipulates the arrow as it iterates (moves around the stage, updates its internal variables, etc)
	if (check.undefined(options.index) || check.not.integer(options.index)) {
		throw new TypeError("Require argument object with property 'index', should be integer.");
	}
	
	this._arrow = this._make_arrow(options.name);
	
	this._arrow = this._decorate(this._arrow, options);
	
	return this._arrow;
};

arrow_UI.prototype = {
	//METHODS-METHODS-METHODS-METHODS-METHODS-METHODS-METHODS-METHODS-METHODS-METHODS-METHODS
	_make_arrow : function(name) {
		var arrow_factory = require('lib/factory/arrow_factory');
		var af = arrow_factory();
		af.arrow({direction: "up"});
		
		var arrow = af.get();
		
		var c = new this._createjs.Container();
		c.addChild(arrow);
		
		//append the name to the arrow and decorate onto the arrow for reference
		var text_factory = require('lib/factory/text_factory');
		var tf = text_factory();
		tf.text({text:name});
		var label = tf.get();
		
		//lifted from 'lib/util/place', below()
		label.x = arrow.x - label.getBounds().x;
		label.y = arrow.y + arrow.getBounds().height - label.getBounds().y;
		
		//slight correction: down and to the left, to be centered under the arrow
		label.y += 5;
		label.x += -10;
		
		c.addChild(label);
		
		return c;
	},
	
	_decorate : function(arrow, options) {
		//setup namespace to decorate into
		arrow._ = {};
		
		//decorate with the name of the arrow
		arrow._.name = options.name;
		
		//position the arrow
		arrow.x = options.position.x
		arrow.y = options.position.y
		
		//store the reference of the object the arrow is pointed at
		arrow._.pointed_at = options.pointed_at
		
		//add the next function
		arrow._.next = options.next;
		
		//add move() functionality
		var move = require('lib/util/move');
		arrow._.move = move(arrow);
		
		//add an index property, for keeping track of what index the arrow is pointed at
		arrow._.index = options.index;
		
		return arrow;
	},
	
	//PROPERTIES-PROPERTIES-PROPERTIES-PROPERTIES-PROPERTIES-PROPERTIES-PROPERTIES-PROPERTIES
	_createjs : undefined,		//holds a reference to the local createjs instance, avoiding the global
	_arrow : undefined,			//internal reference to the arrow created
};